// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ceo_dashboard.dev_assurance_weekly_0_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.Agg_Class_Methods;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJavaRow_8
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: dev_assurance_weekly Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class dev_assurance_weekly implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (ceo_path != null) {

				this.setProperty("ceo_path", ceo_path.toString());

			}

			if (month_from_input != null) {

				this.setProperty("month_from_input", month_from_input.toString());

			}

			if (month_to != null) {

				this.setProperty("month_to", month_to.toString());

			}

			if (year != null) {

				this.setProperty("year", year.toString());

			}

			if (month_from_extract != null) {

				this.setProperty("month_from_extract", month_from_extract.toString());

			}

		}

		public String ceo_path;

		public String getCeo_path() {
			return this.ceo_path;
		}

		public String month_from_input;

		public String getMonth_from_input() {
			return this.month_from_input;
		}

		public String month_to;

		public String getMonth_to() {
			return this.month_to;
		}

		public String year;

		public String getYear() {
			return this.year;
		}

		public String month_from_extract;

		public String getMonth_from_extract() {
			return this.month_from_extract;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.2";
	private final String jobName = "dev_assurance_weekly";
	private final String projectName = "CEO_DASHBOARD";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					dev_assurance_weekly.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(dev_assurance_weekly.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSampleRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_32_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_32_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_32_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_26_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_32_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_32_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_27_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_28_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_35_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_35_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_35_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_29_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_35_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_29_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputRaw_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_31_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_31_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_31_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_31_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_31_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_31_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_31_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputRaw_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_31_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_27_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tNormalize_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_28_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_30_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_33_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_32_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_36_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_35_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row73_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row26_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row30_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row34_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row39_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row76_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row86_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row102_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_35_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_18_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_18_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_18_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_5_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_5_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_5_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_6_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_6_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_6_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_8_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_8_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_8_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_9_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_9_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_9_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_11_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_11_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_11_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_16_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_16_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_16_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_14_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_14_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_14_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_15_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_15_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_15_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_17_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_17_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_17_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_31_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_13_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_13_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_13_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_4_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_4_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_4_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_4_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_4_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_4_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_3_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_3_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_3_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_1_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_5_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_5_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_5_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_2_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_2_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_2_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_3_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_3_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_3_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_6_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_6_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_6_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_7_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_7_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_7_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_10_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_10_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_10_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_24_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_25_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_32_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_20_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_35_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_29_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_31_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_27_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_11_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_13_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_15_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_17_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_18_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_21_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_23_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row108Struct implements routines.system.IPersistableRow<row108Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row108Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row107Struct implements routines.system.IPersistableRow<row107Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row107Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_5
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_5> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_5 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row105Struct implements routines.system.IPersistableRow<row105Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row105Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_18
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_18> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_18 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row84Struct implements routines.system.IPersistableRow<row84Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row84Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row104Struct implements routines.system.IPersistableRow<row104Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row104Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row42Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row42Struct row42 = new row42Struct();
				row84Struct row84 = new row84Struct();
				row105Struct row105 = new row105Struct();
				row107Struct row107 = new row107Struct();
				row108Struct row108 = new row108Struct();
				row104Struct row104 = new row104Struct();

				/**
				 * [tAggregateRow_18_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_18_AGGOUT", false);
				start_Hash.put("tAggregateRow_18_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_18";

				currentComponent = "tAggregateRow_18_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row84");
				}

				int tos_count_tAggregateRow_18_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_18 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_18 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_18 utilClass_tAggregateRow_18 = new UtilClass_tAggregateRow_18();

				class AggOperationStruct_tAggregateRow_18 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String YEAR_NUM;
					String MONTH_OF_YEAR_max;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_18 other = (AggOperationStruct_tAggregateRow_18) obj;

						if (this.YEAR_NUM == null) {
							if (other.YEAR_NUM != null)
								return false;
						} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_18 operation_result_tAggregateRow_18 = null;
				AggOperationStruct_tAggregateRow_18 operation_finder_tAggregateRow_18 = new AggOperationStruct_tAggregateRow_18();
				java.util.Map<AggOperationStruct_tAggregateRow_18, AggOperationStruct_tAggregateRow_18> hash_tAggregateRow_18 = new java.util.HashMap<AggOperationStruct_tAggregateRow_18, AggOperationStruct_tAggregateRow_18>();

				/**
				 * [tAggregateRow_18_AGGOUT begin ] stop
				 */

				/**
				 * [tHashOutput_23 begin ] start
				 */

				ok_Hash.put("tHashOutput_23", false);
				start_Hash.put("tHashOutput_23", System.currentTimeMillis());

				currentComponent = "tHashOutput_23";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row104");
				}

				int tos_count_tHashOutput_23 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_23 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row104Struct> tHashFile_tHashOutput_23 = null;
				String hashKey_tHashOutput_23 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_23";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_23)) {
					if (mf_tHashOutput_23.getResourceMap().get(hashKey_tHashOutput_23) == null) {
						mf_tHashOutput_23.getResourceMap().put(hashKey_tHashOutput_23,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row104Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_23 = mf_tHashOutput_23.getResourceMap().get(hashKey_tHashOutput_23);
					} else {
						tHashFile_tHashOutput_23 = mf_tHashOutput_23.getResourceMap().get(hashKey_tHashOutput_23);
					}
				}
				int nb_line_tHashOutput_23 = 0;

				/**
				 * [tHashOutput_23 begin ] stop
				 */

				/**
				 * [tReplicate_3 begin ] start
				 */

				ok_Hash.put("tReplicate_3", false);
				start_Hash.put("tReplicate_3", System.currentTimeMillis());

				currentComponent = "tReplicate_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row42");
				}

				int tos_count_tReplicate_3 = 0;

				/**
				 * [tReplicate_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = context.ceo_path + "output/WD_Final.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								context.ceo_path + "output/WD_Final.csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row42 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row42 = new row42Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row42.YEAR_NUM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row42.MONTH_OF_YEAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row42.BU = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row42.KPI_ID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row42.FREQUENCY = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row42.WEEK_OF_YEAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row42.KPI_DESC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row42.Weight = ParserUtils.parseTo_Double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Weight", "row42", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row42.Weight = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row42.JS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row42.Month_Differnece = ParserUtils.parseTo_Double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Month_Differnece", "row42", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row42.Month_Differnece = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 10;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row42.Angle_Of_KPI = ParserUtils.parseTo_Double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Angle_Of_KPI", "row42", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row42.Angle_Of_KPI = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 11;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row42.Achieved = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Achieved", "row42", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row42.Achieved = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 12;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row42.Distance = ParserUtils.parseTo_Double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Distance", "row42", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row42.Distance = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row42.Weight_Disc = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row42.Total_BU = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row42.Title = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row42.Score = ParserUtils.parseTo_Double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Score", "row42", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row42.Score = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 17;

							row42.SUB_BU = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 18;

							row42.Is_weekly = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row42 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row42"
						if (row42 != null) {

							/**
							 * [tReplicate_3 main ] start
							 */

							currentComponent = "tReplicate_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row42");
							}

							row84 = new row84Struct();

							row84.YEAR_NUM = row42.YEAR_NUM;
							row84.MONTH_OF_YEAR = row42.MONTH_OF_YEAR;
							row84.BU = row42.BU;
							row84.KPI_ID = row42.KPI_ID;
							row84.FREQUENCY = row42.FREQUENCY;
							row84.WEEK_OF_YEAR = row42.WEEK_OF_YEAR;
							row84.KPI_DESC = row42.KPI_DESC;
							row84.Weight = row42.Weight;
							row84.JS = row42.JS;
							row84.Month_Differnece = row42.Month_Differnece;
							row84.Angle_Of_KPI = row42.Angle_Of_KPI;
							row84.Achieved = row42.Achieved;
							row84.Distance = row42.Distance;
							row84.Weight_Disc = row42.Weight_Disc;
							row84.Total_BU = row42.Total_BU;
							row84.Title = row42.Title;
							row84.Score = row42.Score;
							row84.SUB_BU = row42.SUB_BU;
							row84.Is_weekly = row42.Is_weekly;
							row104 = new row104Struct();

							row104.YEAR_NUM = row42.YEAR_NUM;
							row104.MONTH_OF_YEAR = row42.MONTH_OF_YEAR;
							row104.BU = row42.BU;
							row104.KPI_ID = row42.KPI_ID;
							row104.FREQUENCY = row42.FREQUENCY;
							row104.WEEK_OF_YEAR = row42.WEEK_OF_YEAR;
							row104.KPI_DESC = row42.KPI_DESC;
							row104.Weight = row42.Weight;
							row104.JS = row42.JS;
							row104.Month_Differnece = row42.Month_Differnece;
							row104.Angle_Of_KPI = row42.Angle_Of_KPI;
							row104.Achieved = row42.Achieved;
							row104.Distance = row42.Distance;
							row104.Weight_Disc = row42.Weight_Disc;
							row104.Total_BU = row42.Total_BU;
							row104.Title = row42.Title;
							row104.Score = row42.Score;
							row104.SUB_BU = row42.SUB_BU;
							row104.Is_weekly = row42.Is_weekly;

							tos_count_tReplicate_3++;

							/**
							 * [tReplicate_3 main ] stop
							 */

							/**
							 * [tReplicate_3 process_data_begin ] start
							 */

							currentComponent = "tReplicate_3";

							/**
							 * [tReplicate_3 process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_18_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_18";

							currentComponent = "tAggregateRow_18_AGGOUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row84");
							}

							operation_finder_tAggregateRow_18.YEAR_NUM = row84.YEAR_NUM;

							operation_finder_tAggregateRow_18.hashCodeDirty = true;

							operation_result_tAggregateRow_18 = hash_tAggregateRow_18
									.get(operation_finder_tAggregateRow_18);

							boolean isFirstAdd_tAggregateRow_18 = false;

							if (operation_result_tAggregateRow_18 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_18 = new AggOperationStruct_tAggregateRow_18();

								operation_result_tAggregateRow_18.YEAR_NUM = operation_finder_tAggregateRow_18.YEAR_NUM;

								isFirstAdd_tAggregateRow_18 = true;

								hash_tAggregateRow_18.put(operation_result_tAggregateRow_18,
										operation_result_tAggregateRow_18);

							} // G_OutMain_AggR_001

							if (

							operation_result_tAggregateRow_18.MONTH_OF_YEAR_max == null || row84.MONTH_OF_YEAR
									.compareTo(operation_result_tAggregateRow_18.MONTH_OF_YEAR_max) > 0

							) {
								operation_result_tAggregateRow_18.MONTH_OF_YEAR_max = row84.MONTH_OF_YEAR;
							}

							tos_count_tAggregateRow_18_AGGOUT++;

							/**
							 * [tAggregateRow_18_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_18_AGGOUT process_data_begin ] start
							 */

							currentVirtualComponent = "tAggregateRow_18";

							currentComponent = "tAggregateRow_18_AGGOUT";

							/**
							 * [tAggregateRow_18_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_18_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_18";

							currentComponent = "tAggregateRow_18_AGGOUT";

							/**
							 * [tAggregateRow_18_AGGOUT process_data_end ] stop
							 */

							/**
							 * [tHashOutput_23 main ] start
							 */

							currentComponent = "tHashOutput_23";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row104");
							}

							row104Struct oneRow_tHashOutput_23 = new row104Struct();

							oneRow_tHashOutput_23.YEAR_NUM = row104.YEAR_NUM;
							oneRow_tHashOutput_23.MONTH_OF_YEAR = row104.MONTH_OF_YEAR;
							oneRow_tHashOutput_23.BU = row104.BU;
							oneRow_tHashOutput_23.KPI_ID = row104.KPI_ID;
							oneRow_tHashOutput_23.FREQUENCY = row104.FREQUENCY;
							oneRow_tHashOutput_23.WEEK_OF_YEAR = row104.WEEK_OF_YEAR;
							oneRow_tHashOutput_23.KPI_DESC = row104.KPI_DESC;
							oneRow_tHashOutput_23.Weight = row104.Weight;
							oneRow_tHashOutput_23.JS = row104.JS;
							oneRow_tHashOutput_23.Month_Differnece = row104.Month_Differnece;
							oneRow_tHashOutput_23.Angle_Of_KPI = row104.Angle_Of_KPI;
							oneRow_tHashOutput_23.Achieved = row104.Achieved;
							oneRow_tHashOutput_23.Distance = row104.Distance;
							oneRow_tHashOutput_23.Weight_Disc = row104.Weight_Disc;
							oneRow_tHashOutput_23.Total_BU = row104.Total_BU;
							oneRow_tHashOutput_23.Title = row104.Title;
							oneRow_tHashOutput_23.Score = row104.Score;
							oneRow_tHashOutput_23.SUB_BU = row104.SUB_BU;
							oneRow_tHashOutput_23.Is_weekly = row104.Is_weekly;

							tHashFile_tHashOutput_23.put(oneRow_tHashOutput_23);
							nb_line_tHashOutput_23++;

							tos_count_tHashOutput_23++;

							/**
							 * [tHashOutput_23 main ] stop
							 */

							/**
							 * [tHashOutput_23 process_data_begin ] start
							 */

							currentComponent = "tHashOutput_23";

							/**
							 * [tHashOutput_23 process_data_begin ] stop
							 */

							/**
							 * [tHashOutput_23 process_data_end ] start
							 */

							currentComponent = "tHashOutput_23";

							/**
							 * [tHashOutput_23 process_data_end ] stop
							 */

							/**
							 * [tReplicate_3 process_data_end ] start
							 */

							currentComponent = "tReplicate_3";

							/**
							 * [tReplicate_3 process_data_end ] stop
							 */

						} // End of branch "row42"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) (context.ceo_path + "output/WD_Final.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tReplicate_3 end ] start
				 */

				currentComponent = "tReplicate_3";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row42");
				}

				ok_Hash.put("tReplicate_3", true);
				end_Hash.put("tReplicate_3", System.currentTimeMillis());

				/**
				 * [tReplicate_3 end ] stop
				 */

				/**
				 * [tAggregateRow_18_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_18";

				currentComponent = "tAggregateRow_18_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row84");
				}

				ok_Hash.put("tAggregateRow_18_AGGOUT", true);
				end_Hash.put("tAggregateRow_18_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_18_AGGOUT end ] stop
				 */

				/**
				 * [tSortRow_5_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_5_SortOut", false);
				start_Hash.put("tSortRow_5_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_5";

				currentComponent = "tSortRow_5_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row105");
				}

				int tos_count_tSortRow_5_SortOut = 0;

				class Comparablerow105Struct extends row105Struct implements Comparable<Comparablerow105Struct> {

					public int compareTo(Comparablerow105Struct other) {

						if (this.YEAR_NUM == null && other.YEAR_NUM != null) {
							return 1;

						} else if (this.YEAR_NUM != null && other.YEAR_NUM == null) {
							return -1;

						} else if (this.YEAR_NUM != null && other.YEAR_NUM != null) {
							if (!this.YEAR_NUM.equals(other.YEAR_NUM)) {
								return other.YEAR_NUM.compareTo(this.YEAR_NUM);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow105Struct> list_tSortRow_5_SortOut = new java.util.ArrayList<Comparablerow105Struct>();

				/**
				 * [tSortRow_5_SortOut begin ] stop
				 */

				/**
				 * [tAggregateRow_18_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_18_AGGIN", false);
				start_Hash.put("tAggregateRow_18_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_18";

				currentComponent = "tAggregateRow_18_AGGIN";

				int tos_count_tAggregateRow_18_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_18> values_tAggregateRow_18 = hash_tAggregateRow_18
						.values();

				globalMap.put("tAggregateRow_18_NB_LINE", values_tAggregateRow_18.size());

				for (AggOperationStruct_tAggregateRow_18 aggregated_row_tAggregateRow_18 : values_tAggregateRow_18) { // G_AggR_600

					/**
					 * [tAggregateRow_18_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_18_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_18";

					currentComponent = "tAggregateRow_18_AGGIN";

					row105.YEAR_NUM = aggregated_row_tAggregateRow_18.YEAR_NUM;

					row105.MONTH_OF_YEAR = aggregated_row_tAggregateRow_18.MONTH_OF_YEAR_max;

					tos_count_tAggregateRow_18_AGGIN++;

					/**
					 * [tAggregateRow_18_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_18_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_18";

					currentComponent = "tAggregateRow_18_AGGIN";

					/**
					 * [tAggregateRow_18_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tSortRow_5_SortOut main ] start
					 */

					currentVirtualComponent = "tSortRow_5";

					currentComponent = "tSortRow_5_SortOut";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row105");
					}

					Comparablerow105Struct arrayRowtSortRow_5_SortOut = new Comparablerow105Struct();

					arrayRowtSortRow_5_SortOut.YEAR_NUM = row105.YEAR_NUM;
					arrayRowtSortRow_5_SortOut.MONTH_OF_YEAR = row105.MONTH_OF_YEAR;
					list_tSortRow_5_SortOut.add(arrayRowtSortRow_5_SortOut);

					tos_count_tSortRow_5_SortOut++;

					/**
					 * [tSortRow_5_SortOut main ] stop
					 */

					/**
					 * [tSortRow_5_SortOut process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_5";

					currentComponent = "tSortRow_5_SortOut";

					/**
					 * [tSortRow_5_SortOut process_data_begin ] stop
					 */

					/**
					 * [tSortRow_5_SortOut process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_5";

					currentComponent = "tSortRow_5_SortOut";

					/**
					 * [tSortRow_5_SortOut process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_18_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_18";

					currentComponent = "tAggregateRow_18_AGGIN";

					/**
					 * [tAggregateRow_18_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_18_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_18";

					currentComponent = "tAggregateRow_18_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_18_AGGIN", true);
				end_Hash.put("tAggregateRow_18_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_18_AGGIN end ] stop
				 */

				/**
				 * [tSortRow_5_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_5";

				currentComponent = "tSortRow_5_SortOut";

				row105Struct[] array_tSortRow_5_SortOut = list_tSortRow_5_SortOut
						.toArray(new Comparablerow105Struct[0]);

				java.util.Arrays.sort(array_tSortRow_5_SortOut);

				globalMap.put("tSortRow_5", array_tSortRow_5_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row105");
				}

				ok_Hash.put("tSortRow_5_SortOut", true);
				end_Hash.put("tSortRow_5_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_5_SortOut end ] stop
				 */

				/**
				 * [tSetGlobalVar_1 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_1", false);
				start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row108");
				}

				int tos_count_tSetGlobalVar_1 = 0;

				/**
				 * [tSetGlobalVar_1 begin ] stop
				 */

				/**
				 * [tSampleRow_1 begin ] start
				 */

				ok_Hash.put("tSampleRow_1", false);
				start_Hash.put("tSampleRow_1", System.currentTimeMillis());

				currentComponent = "tSampleRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row107");
				}

				int tos_count_tSampleRow_1 = 0;

				String[] rangetSampleRow_1 = "1".split(",");
				java.util.Set rangeSettSampleRow_1 = new java.util.HashSet();

				Integer nb_line_tSampleRow_1 = 0;

				for (int i = 0; i < rangetSampleRow_1.length; i++) {

					if (rangetSampleRow_1[i].matches("\\d+")) {

						rangeSettSampleRow_1.add(Integer.valueOf(rangetSampleRow_1[i]));

					} else if (rangetSampleRow_1[i].matches("\\d+\\.\\.\\d+")) {

						String[] edgetSampleRow_1 = rangetSampleRow_1[i].split("\\.\\.");

						for (int j = Integer.valueOf(edgetSampleRow_1[0]).intValue(); j < Integer
								.valueOf(edgetSampleRow_1[1]).intValue() + 1; j++) {
							rangeSettSampleRow_1.add(Integer.valueOf(j));
						}
					} else {

					}

				}

				/**
				 * [tSampleRow_1 begin ] stop
				 */

				/**
				 * [tSortRow_5_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_5_SortIn", false);
				start_Hash.put("tSortRow_5_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_5";

				currentComponent = "tSortRow_5_SortIn";

				int tos_count_tSortRow_5_SortIn = 0;

				row105Struct[] array_tSortRow_5_SortIn = (row105Struct[]) globalMap.remove("tSortRow_5");

				int nb_line_tSortRow_5_SortIn = 0;

				row105Struct current_tSortRow_5_SortIn = null;

				for (int i_tSortRow_5_SortIn = 0; i_tSortRow_5_SortIn < array_tSortRow_5_SortIn.length; i_tSortRow_5_SortIn++) {
					current_tSortRow_5_SortIn = array_tSortRow_5_SortIn[i_tSortRow_5_SortIn];
					row107.YEAR_NUM = current_tSortRow_5_SortIn.YEAR_NUM;
					row107.MONTH_OF_YEAR = current_tSortRow_5_SortIn.MONTH_OF_YEAR;
					// increase number of line sorted
					nb_line_tSortRow_5_SortIn++;

					/**
					 * [tSortRow_5_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_5_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_5";

					currentComponent = "tSortRow_5_SortIn";

					tos_count_tSortRow_5_SortIn++;

					/**
					 * [tSortRow_5_SortIn main ] stop
					 */

					/**
					 * [tSortRow_5_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_5";

					currentComponent = "tSortRow_5_SortIn";

					/**
					 * [tSortRow_5_SortIn process_data_begin ] stop
					 */

					/**
					 * [tSampleRow_1 main ] start
					 */

					currentComponent = "tSampleRow_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row107");
					}

					nb_line_tSampleRow_1++;

					if (!rangeSettSampleRow_1.contains(nb_line_tSampleRow_1)) {
						row108 = null;
					} else {
						row108 = new row108Struct();

						row108.YEAR_NUM = row107.YEAR_NUM;

						row108.MONTH_OF_YEAR = row107.MONTH_OF_YEAR;

					}

					tos_count_tSampleRow_1++;

					/**
					 * [tSampleRow_1 main ] stop
					 */

					/**
					 * [tSampleRow_1 process_data_begin ] start
					 */

					currentComponent = "tSampleRow_1";

					/**
					 * [tSampleRow_1 process_data_begin ] stop
					 */
// Start of branch "row108"
					if (row108 != null) {

						/**
						 * [tSetGlobalVar_1 main ] start
						 */

						currentComponent = "tSetGlobalVar_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row108");
						}

						globalMap.put("last_month", Integer.parseInt(row108.MONTH_OF_YEAR));
						globalMap.put("last_year", Integer.parseInt(row108.YEAR_NUM));

						tos_count_tSetGlobalVar_1++;

						/**
						 * [tSetGlobalVar_1 main ] stop
						 */

						/**
						 * [tSetGlobalVar_1 process_data_begin ] start
						 */

						currentComponent = "tSetGlobalVar_1";

						/**
						 * [tSetGlobalVar_1 process_data_begin ] stop
						 */

						/**
						 * [tSetGlobalVar_1 process_data_end ] start
						 */

						currentComponent = "tSetGlobalVar_1";

						/**
						 * [tSetGlobalVar_1 process_data_end ] stop
						 */

					} // End of branch "row108"

					/**
					 * [tSampleRow_1 process_data_end ] start
					 */

					currentComponent = "tSampleRow_1";

					/**
					 * [tSampleRow_1 process_data_end ] stop
					 */

					/**
					 * [tSortRow_5_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_5";

					currentComponent = "tSortRow_5_SortIn";

					/**
					 * [tSortRow_5_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_5_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_5";

					currentComponent = "tSortRow_5_SortIn";

				}

				globalMap.put("tSortRow_5_SortIn_NB_LINE", nb_line_tSortRow_5_SortIn);

				ok_Hash.put("tSortRow_5_SortIn", true);
				end_Hash.put("tSortRow_5_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_5_SortIn end ] stop
				 */

				/**
				 * [tSampleRow_1 end ] start
				 */

				currentComponent = "tSampleRow_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row107");
				}

				ok_Hash.put("tSampleRow_1", true);
				end_Hash.put("tSampleRow_1", System.currentTimeMillis());

				/**
				 * [tSampleRow_1 end ] stop
				 */

				/**
				 * [tSetGlobalVar_1 end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row108");
				}

				ok_Hash.put("tSetGlobalVar_1", true);
				end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				/**
				 * [tSetGlobalVar_1 end ] stop
				 */

				/**
				 * [tHashOutput_23 end ] start
				 */

				currentComponent = "tHashOutput_23";

				globalMap.put("tHashOutput_23_NB_LINE", nb_line_tHashOutput_23);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row104");
				}

				ok_Hash.put("tHashOutput_23", true);
				end_Hash.put("tHashOutput_23", System.currentTimeMillis());

				/**
				 * [tHashOutput_23 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk20", 0, "ok");
			}

			tHashInput_24Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tSortRow_5_SortIn"
			globalMap.remove("tSortRow_5");

			// free memory for "tAggregateRow_18_AGGIN"
			globalMap.remove("tAggregateRow_18");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tReplicate_3 finally ] start
				 */

				currentComponent = "tReplicate_3";

				/**
				 * [tReplicate_3 finally ] stop
				 */

				/**
				 * [tAggregateRow_18_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_18";

				currentComponent = "tAggregateRow_18_AGGOUT";

				/**
				 * [tAggregateRow_18_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_18_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_18";

				currentComponent = "tAggregateRow_18_AGGIN";

				/**
				 * [tAggregateRow_18_AGGIN finally ] stop
				 */

				/**
				 * [tSortRow_5_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_5";

				currentComponent = "tSortRow_5_SortOut";

				/**
				 * [tSortRow_5_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_5_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_5";

				currentComponent = "tSortRow_5_SortIn";

				/**
				 * [tSortRow_5_SortIn finally ] stop
				 */

				/**
				 * [tSampleRow_1 finally ] start
				 */

				currentComponent = "tSampleRow_1";

				/**
				 * [tSampleRow_1 finally ] stop
				 */

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */

				/**
				 * [tHashOutput_23 finally ] start
				 */

				currentComponent = "tHashOutput_23";

				/**
				 * [tHashOutput_23 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row87Struct implements routines.system.IPersistableRow<row87Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Nxt_WkOfYear;

		public String getNxt_WkOfYear() {
			return this.Nxt_WkOfYear;
		}

		public String Nxt_MnthOfYear;

		public String getNxt_MnthOfYear() {
			return this.Nxt_MnthOfYear;
		}

		public String Nxt_YearOfYear;

		public String getNxt_YearOfYear() {
			return this.Nxt_YearOfYear;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

					this.Nxt_WkOfYear = readString(dis);

					this.Nxt_MnthOfYear = readString(dis);

					this.Nxt_YearOfYear = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Nxt_WkOfYear, dos);

				// String

				writeString(this.Nxt_MnthOfYear, dos);

				// String

				writeString(this.Nxt_YearOfYear, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Nxt_WkOfYear=" + Nxt_WkOfYear);
			sb.append(",Nxt_MnthOfYear=" + Nxt_MnthOfYear);
			sb.append(",Nxt_YearOfYear=" + Nxt_YearOfYear);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row87Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row88Struct implements routines.system.IPersistableRow<row88Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Nxt_WkOfYear;

		public String getNxt_WkOfYear() {
			return this.Nxt_WkOfYear;
		}

		public String Nxt_MnthOfYear;

		public String getNxt_MnthOfYear() {
			return this.Nxt_MnthOfYear;
		}

		public String Nxt_YearOfYear;

		public String getNxt_YearOfYear() {
			return this.Nxt_YearOfYear;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

					this.Nxt_WkOfYear = readString(dis);

					this.Nxt_MnthOfYear = readString(dis);

					this.Nxt_YearOfYear = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Nxt_WkOfYear, dos);

				// String

				writeString(this.Nxt_MnthOfYear, dos);

				// String

				writeString(this.Nxt_YearOfYear, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Nxt_WkOfYear=" + Nxt_WkOfYear);
			sb.append(",Nxt_MnthOfYear=" + Nxt_MnthOfYear);
			sb.append(",Nxt_YearOfYear=" + Nxt_YearOfYear);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row88Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out12Struct implements routines.system.IPersistableRow<out12Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Nxt_WkOfYear;

		public String getNxt_WkOfYear() {
			return this.Nxt_WkOfYear;
		}

		public String Nxt_MnthOfYear;

		public String getNxt_MnthOfYear() {
			return this.Nxt_MnthOfYear;
		}

		public String Nxt_YearOfYear;

		public String getNxt_YearOfYear() {
			return this.Nxt_YearOfYear;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

					this.Nxt_WkOfYear = readString(dis);

					this.Nxt_MnthOfYear = readString(dis);

					this.Nxt_YearOfYear = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Nxt_WkOfYear, dos);

				// String

				writeString(this.Nxt_MnthOfYear, dos);

				// String

				writeString(this.Nxt_YearOfYear, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Nxt_WkOfYear=" + Nxt_WkOfYear);
			sb.append(",Nxt_MnthOfYear=" + Nxt_MnthOfYear);
			sb.append(",Nxt_YearOfYear=" + Nxt_YearOfYear);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row85Struct implements routines.system.IPersistableRow<row85Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String Year;

		public String getYear() {
			return this.Year;
		}

		public String Month;

		public String getMonth() {
			return this.Month;
		}

		public String Week_Of_Year_Str;

		public String getWeek_Of_Year_Str() {
			return this.Week_Of_Year_Str;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.Year = readString(dis);

					this.Month = readString(dis);

					this.Week_Of_Year_Str = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Year, dos);

				// String

				writeString(this.Month, dos);

				// String

				writeString(this.Week_Of_Year_Str, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Year=" + Year);
			sb.append(",Month=" + Month);
			sb.append(",Week_Of_Year_Str=" + Week_Of_Year_Str);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row85Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tHashInput_24Struct
			implements routines.system.IPersistableRow<after_tHashInput_24Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String Year;

		public String getYear() {
			return this.Year;
		}

		public String Month;

		public String getMonth() {
			return this.Month;
		}

		public String Week_Of_Year_Str;

		public String getWeek_Of_Year_Str() {
			return this.Week_Of_Year_Str;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.Year = readString(dis);

					this.Month = readString(dis);

					this.Week_Of_Year_Str = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Year, dos);

				// String

				writeString(this.Month, dos);

				// String

				writeString(this.Week_Of_Year_Str, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Year=" + Year);
			sb.append(",Month=" + Month);
			sb.append(",Week_Of_Year_Str=" + Week_Of_Year_Str);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tHashInput_24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_24_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tHashInput_30Process(globalMap);

				row85Struct row85 = new row85Struct();
				out12Struct out12 = new out12Struct();
				row88Struct row88 = new row88Struct();
				row88Struct row87 = row88;

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row87");
				}

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						context.ceo_path + "output/weekly/MonthlyDS_NxtWk.csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
							fileName_tFileOutputDelimited_6.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);
				int nb_line_tFileOutputDelimited_6 = 0;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				final String OUT_DELIM_tFileOutputDelimited_6 = /** Start field tFileOutputDelimited_6:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /**
																		 * Start field
																		 * tFileOutputDelimited_6:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null && directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_6 = null;

				java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
				if (fileToDelete_tFileOutputDelimited_6.exists()) {
					fileToDelete_tFileOutputDelimited_6.delete();
				}
				outtFileOutputDelimited_6 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_6, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_6.length() == 0) {
					outtFileOutputDelimited_6.write("YEAR_NUM");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("MONTH_OF_YEAR");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("BU");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("KPI_ID");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("FREQUENCY");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("WEEK_OF_YEAR");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("KPI_DESC");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Weight");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("JS");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Month_Differnece");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Angle_Of_KPI");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Achieved");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Distance");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Weight_Disc");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Total_BU");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Title");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Score");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("SUB_BU");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Is_weekly");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Nxt_WkOfYear");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Nxt_MnthOfYear");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Nxt_YearOfYear");
					outtFileOutputDelimited_6.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_6", outtFileOutputDelimited_6);
				resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

				/**
				 * [tFileOutputDelimited_6 begin ] stop
				 */

				/**
				 * [tHashOutput_24 begin ] start
				 */

				ok_Hash.put("tHashOutput_24", false);
				start_Hash.put("tHashOutput_24", System.currentTimeMillis());

				currentComponent = "tHashOutput_24";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row88");
				}

				int tos_count_tHashOutput_24 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_24 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row88Struct> tHashFile_tHashOutput_24 = null;
				String hashKey_tHashOutput_24 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_24";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_24)) {
					if (mf_tHashOutput_24.getResourceMap().get(hashKey_tHashOutput_24) == null) {
						mf_tHashOutput_24.getResourceMap().put(hashKey_tHashOutput_24,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row88Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_24 = mf_tHashOutput_24.getResourceMap().get(hashKey_tHashOutput_24);
					} else {
						tHashFile_tHashOutput_24 = mf_tHashOutput_24.getResourceMap().get(hashKey_tHashOutput_24);
					}
				}
				int nb_line_tHashOutput_24 = 0;

				/**
				 * [tHashOutput_24 begin ] stop
				 */

				/**
				 * [tFilterRow_6 begin ] start
				 */

				ok_Hash.put("tFilterRow_6", false);
				start_Hash.put("tFilterRow_6", System.currentTimeMillis());

				currentComponent = "tFilterRow_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out12");
				}

				int tos_count_tFilterRow_6 = 0;

				int nb_line_tFilterRow_6 = 0;
				int nb_line_ok_tFilterRow_6 = 0;
				int nb_line_reject_tFilterRow_6 = 0;

				class Operator_tFilterRow_6 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_6(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_6 begin ] stop
				 */

				/**
				 * [tMap_14 begin ] start
				 */

				ok_Hash.put("tMap_14", false);
				start_Hash.put("tMap_14", System.currentTimeMillis());

				currentComponent = "tMap_14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row85");
				}

				int tos_count_tMap_14 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row86Struct> tHash_Lookup_row86 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row86Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row86Struct>) globalMap
						.get("tHash_Lookup_row86"));

				row86Struct row86HashKey = new row86Struct();
				row86Struct row86Default = new row86Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_14__Struct {
				}
				Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out12Struct out12_tmp = new out12Struct();
// ###############################

				/**
				 * [tMap_14 begin ] stop
				 */

				/**
				 * [tHashInput_24 begin ] start
				 */

				ok_Hash.put("tHashInput_24", false);
				start_Hash.put("tHashInput_24", System.currentTimeMillis());

				currentComponent = "tHashInput_24";

				int tos_count_tHashInput_24 = 0;

				int nb_line_tHashInput_24 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_24 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row46Struct> tHashFile_tHashInput_24 = mf_tHashInput_24
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_22");
				if (tHashFile_tHashInput_24 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row46Struct> iterator_tHashInput_24 = tHashFile_tHashInput_24.iterator();
				while (iterator_tHashInput_24.hasNext()) {
					row46Struct next_tHashInput_24 = iterator_tHashInput_24.next();

					row85.Year = next_tHashInput_24.Year;
					row85.Month = next_tHashInput_24.Month;
					row85.Week_Of_Year_Str = next_tHashInput_24.Week_Of_Year_Str;

					/**
					 * [tHashInput_24 begin ] stop
					 */

					/**
					 * [tHashInput_24 main ] start
					 */

					currentComponent = "tHashInput_24";

					tos_count_tHashInput_24++;

					/**
					 * [tHashInput_24 main ] stop
					 */

					/**
					 * [tHashInput_24 process_data_begin ] start
					 */

					currentComponent = "tHashInput_24";

					/**
					 * [tHashInput_24 process_data_begin ] stop
					 */

					/**
					 * [tMap_14 main ] start
					 */

					currentComponent = "tMap_14";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row85");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_14 = false;
					boolean mainRowRejected_tMap_14 = false;

					///////////////////////////////////////////////
					// Starting Lookup Table "row86"
					///////////////////////////////////////////////

					boolean forceLooprow86 = false;

					row86Struct row86ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_14) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_14 = false;

						row86HashKey.YEAR_NUM = Agg_Class_Methods.last_avaliable_month((Integer.parseInt(row85.Year)),
								(Integer.parseInt(row85.Month)), ((int) globalMap.get("last_year")),
								((int) globalMap.get("last_month")))[0] + "";

						row86HashKey.MONTH_OF_YEAR = Agg_Class_Methods.last_avaliable_month(
								(Integer.parseInt(row85.Year)), (Integer.parseInt(row85.Month)),
								((int) globalMap.get("last_year")), ((int) globalMap.get("last_month")))[1] + "";

						row86HashKey.hashCodeDirty = true;

						tHash_Lookup_row86.lookup(row86HashKey);

						if (!tHash_Lookup_row86.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_14 = true;

							forceLooprow86 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					else { // G 20 - G 21
						forceLooprow86 = true;
					} // G 21

					row86Struct row86 = null;

					while ((tHash_Lookup_row86 != null && tHash_Lookup_row86.hasNext()) || forceLooprow86) { // G_TM_M_043

						// CALL close loop of lookup 'row86'

						row86Struct fromLookup_row86 = null;
						row86 = row86Default;

						if (!forceLooprow86) { // G 46

							fromLookup_row86 = tHash_Lookup_row86.next();

							if (fromLookup_row86 != null) {
								row86 = fromLookup_row86;
							}

						} // G 46

						forceLooprow86 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
							// ###############################
							// # Output tables

							out12 = null;

							if (!rejectedInnerJoin_tMap_14) {

// # Output table : 'out12'
								out12_tmp.YEAR_NUM = row86.YEAR_NUM;
								out12_tmp.MONTH_OF_YEAR = row86.MONTH_OF_YEAR;
								out12_tmp.BU = row86.BU;
								out12_tmp.KPI_ID = row86.KPI_ID;
								out12_tmp.FREQUENCY = row86.FREQUENCY;
								out12_tmp.WEEK_OF_YEAR = row86.WEEK_OF_YEAR;
								out12_tmp.KPI_DESC = row86.KPI_DESC;
								out12_tmp.Weight = row86.Weight;
								out12_tmp.JS = row86.JS;
								out12_tmp.Month_Differnece = row86.Month_Differnece;
								out12_tmp.Angle_Of_KPI = row86.Angle_Of_KPI;
								out12_tmp.Achieved = row86.Achieved;
								out12_tmp.Distance = row86.Distance;
								out12_tmp.Weight_Disc = row86.Weight_Disc;
								out12_tmp.Total_BU = row86.Total_BU;
								out12_tmp.Title = row86.Title;
								out12_tmp.Score = row86.Score;
								out12_tmp.SUB_BU = row86.SUB_BU;
								out12_tmp.Is_weekly = row86.Is_weekly;
								out12_tmp.Nxt_WkOfYear = row85.Week_Of_Year_Str;
								out12_tmp.Nxt_MnthOfYear = row85.Month;
								out12_tmp.Nxt_YearOfYear = row85.Year;
								out12 = out12_tmp;
							} // closing inner join bracket (2)
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_14 = false;

						tos_count_tMap_14++;

						/**
						 * [tMap_14 main ] stop
						 */

						/**
						 * [tMap_14 process_data_begin ] start
						 */

						currentComponent = "tMap_14";

						/**
						 * [tMap_14 process_data_begin ] stop
						 */
// Start of branch "out12"
						if (out12 != null) {

							/**
							 * [tFilterRow_6 main ] start
							 */

							currentComponent = "tFilterRow_6";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out12");
							}

							row88 = null;
							Operator_tFilterRow_6 ope_tFilterRow_6 = new Operator_tFilterRow_6("&&");
							ope_tFilterRow_6.matches(
									(out12.Is_weekly == null ? false : out12.Is_weekly.matches("No") == true),
									" Is_weekly.matches(\"No\") == true failed");

							if (ope_tFilterRow_6.getMatchFlag()) {
								if (row88 == null) {
									row88 = new row88Struct();
								}
								row88.YEAR_NUM = out12.YEAR_NUM;
								row88.MONTH_OF_YEAR = out12.MONTH_OF_YEAR;
								row88.BU = out12.BU;
								row88.KPI_ID = out12.KPI_ID;
								row88.FREQUENCY = out12.FREQUENCY;
								row88.WEEK_OF_YEAR = out12.WEEK_OF_YEAR;
								row88.KPI_DESC = out12.KPI_DESC;
								row88.Weight = out12.Weight;
								row88.JS = out12.JS;
								row88.Month_Differnece = out12.Month_Differnece;
								row88.Angle_Of_KPI = out12.Angle_Of_KPI;
								row88.Achieved = out12.Achieved;
								row88.Distance = out12.Distance;
								row88.Weight_Disc = out12.Weight_Disc;
								row88.Total_BU = out12.Total_BU;
								row88.Title = out12.Title;
								row88.Score = out12.Score;
								row88.SUB_BU = out12.SUB_BU;
								row88.Is_weekly = out12.Is_weekly;
								row88.Nxt_WkOfYear = out12.Nxt_WkOfYear;
								row88.Nxt_MnthOfYear = out12.Nxt_MnthOfYear;
								row88.Nxt_YearOfYear = out12.Nxt_YearOfYear;
								nb_line_ok_tFilterRow_6++;
							} else {
								nb_line_reject_tFilterRow_6++;
							}

							nb_line_tFilterRow_6++;

							tos_count_tFilterRow_6++;

							/**
							 * [tFilterRow_6 main ] stop
							 */

							/**
							 * [tFilterRow_6 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_6";

							/**
							 * [tFilterRow_6 process_data_begin ] stop
							 */
// Start of branch "row88"
							if (row88 != null) {

								/**
								 * [tHashOutput_24 main ] start
								 */

								currentComponent = "tHashOutput_24";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row88");
								}

								row88Struct oneRow_tHashOutput_24 = new row88Struct();

								oneRow_tHashOutput_24.YEAR_NUM = row88.YEAR_NUM;
								oneRow_tHashOutput_24.MONTH_OF_YEAR = row88.MONTH_OF_YEAR;
								oneRow_tHashOutput_24.BU = row88.BU;
								oneRow_tHashOutput_24.KPI_ID = row88.KPI_ID;
								oneRow_tHashOutput_24.FREQUENCY = row88.FREQUENCY;
								oneRow_tHashOutput_24.WEEK_OF_YEAR = row88.WEEK_OF_YEAR;
								oneRow_tHashOutput_24.KPI_DESC = row88.KPI_DESC;
								oneRow_tHashOutput_24.Weight = row88.Weight;
								oneRow_tHashOutput_24.JS = row88.JS;
								oneRow_tHashOutput_24.Month_Differnece = row88.Month_Differnece;
								oneRow_tHashOutput_24.Angle_Of_KPI = row88.Angle_Of_KPI;
								oneRow_tHashOutput_24.Achieved = row88.Achieved;
								oneRow_tHashOutput_24.Distance = row88.Distance;
								oneRow_tHashOutput_24.Weight_Disc = row88.Weight_Disc;
								oneRow_tHashOutput_24.Total_BU = row88.Total_BU;
								oneRow_tHashOutput_24.Title = row88.Title;
								oneRow_tHashOutput_24.Score = row88.Score;
								oneRow_tHashOutput_24.SUB_BU = row88.SUB_BU;
								oneRow_tHashOutput_24.Is_weekly = row88.Is_weekly;
								oneRow_tHashOutput_24.Nxt_WkOfYear = row88.Nxt_WkOfYear;
								oneRow_tHashOutput_24.Nxt_MnthOfYear = row88.Nxt_MnthOfYear;
								oneRow_tHashOutput_24.Nxt_YearOfYear = row88.Nxt_YearOfYear;

								tHashFile_tHashOutput_24.put(oneRow_tHashOutput_24);
								nb_line_tHashOutput_24++;

								row87 = row88;

								tos_count_tHashOutput_24++;

								/**
								 * [tHashOutput_24 main ] stop
								 */

								/**
								 * [tHashOutput_24 process_data_begin ] start
								 */

								currentComponent = "tHashOutput_24";

								/**
								 * [tHashOutput_24 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_6 main ] start
								 */

								currentComponent = "tFileOutputDelimited_6";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row87");
								}

								StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();
								if (row87.YEAR_NUM != null) {
									sb_tFileOutputDelimited_6.append(row87.YEAR_NUM);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.MONTH_OF_YEAR != null) {
									sb_tFileOutputDelimited_6.append(row87.MONTH_OF_YEAR);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.BU != null) {
									sb_tFileOutputDelimited_6.append(row87.BU);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.KPI_ID != null) {
									sb_tFileOutputDelimited_6.append(row87.KPI_ID);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.FREQUENCY != null) {
									sb_tFileOutputDelimited_6.append(row87.FREQUENCY);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.WEEK_OF_YEAR != null) {
									sb_tFileOutputDelimited_6.append(row87.WEEK_OF_YEAR);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.KPI_DESC != null) {
									sb_tFileOutputDelimited_6.append(row87.KPI_DESC);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.Weight != null) {
									sb_tFileOutputDelimited_6.append(row87.Weight);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.JS != null) {
									sb_tFileOutputDelimited_6.append(row87.JS);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.Month_Differnece != null) {
									sb_tFileOutputDelimited_6.append(row87.Month_Differnece);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.Angle_Of_KPI != null) {
									sb_tFileOutputDelimited_6.append(row87.Angle_Of_KPI);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.Achieved != null) {
									sb_tFileOutputDelimited_6.append(row87.Achieved);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.Distance != null) {
									sb_tFileOutputDelimited_6.append(row87.Distance);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.Weight_Disc != null) {
									sb_tFileOutputDelimited_6.append(row87.Weight_Disc);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.Total_BU != null) {
									sb_tFileOutputDelimited_6.append(row87.Total_BU);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.Title != null) {
									sb_tFileOutputDelimited_6.append(row87.Title);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.Score != null) {
									sb_tFileOutputDelimited_6.append(row87.Score);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.SUB_BU != null) {
									sb_tFileOutputDelimited_6.append(row87.SUB_BU);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.Is_weekly != null) {
									sb_tFileOutputDelimited_6.append(row87.Is_weekly);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.Nxt_WkOfYear != null) {
									sb_tFileOutputDelimited_6.append(row87.Nxt_WkOfYear);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.Nxt_MnthOfYear != null) {
									sb_tFileOutputDelimited_6.append(row87.Nxt_MnthOfYear);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
								if (row87.Nxt_YearOfYear != null) {
									sb_tFileOutputDelimited_6.append(row87.Nxt_YearOfYear);
								}
								sb_tFileOutputDelimited_6.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);

								nb_line_tFileOutputDelimited_6++;
								resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

								outtFileOutputDelimited_6.write(sb_tFileOutputDelimited_6.toString());

								tos_count_tFileOutputDelimited_6++;

								/**
								 * [tFileOutputDelimited_6 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_6 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_6";

								/**
								 * [tFileOutputDelimited_6 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_6 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_6";

								/**
								 * [tFileOutputDelimited_6 process_data_end ] stop
								 */

								/**
								 * [tHashOutput_24 process_data_end ] start
								 */

								currentComponent = "tHashOutput_24";

								/**
								 * [tHashOutput_24 process_data_end ] stop
								 */

							} // End of branch "row88"

							/**
							 * [tFilterRow_6 process_data_end ] start
							 */

							currentComponent = "tFilterRow_6";

							/**
							 * [tFilterRow_6 process_data_end ] stop
							 */

						} // End of branch "out12"

					} // close loop of lookup 'row86' // G_TM_M_043

					/**
					 * [tMap_14 process_data_end ] start
					 */

					currentComponent = "tMap_14";

					/**
					 * [tMap_14 process_data_end ] stop
					 */

					/**
					 * [tHashInput_24 process_data_end ] start
					 */

					currentComponent = "tHashInput_24";

					/**
					 * [tHashInput_24 process_data_end ] stop
					 */

					/**
					 * [tHashInput_24 end ] start
					 */

					currentComponent = "tHashInput_24";

					nb_line_tHashInput_24++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_22");

				globalMap.put("tHashInput_24_NB_LINE", nb_line_tHashInput_24);

				ok_Hash.put("tHashInput_24", true);
				end_Hash.put("tHashInput_24", System.currentTimeMillis());

				/**
				 * [tHashInput_24 end ] stop
				 */

				/**
				 * [tMap_14 end ] start
				 */

				currentComponent = "tMap_14";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row86 != null) {
					tHash_Lookup_row86.endGet();
				}
				globalMap.remove("tHash_Lookup_row86");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row85");
				}

				ok_Hash.put("tMap_14", true);
				end_Hash.put("tMap_14", System.currentTimeMillis());

				/**
				 * [tMap_14 end ] stop
				 */

				/**
				 * [tFilterRow_6 end ] start
				 */

				currentComponent = "tFilterRow_6";

				globalMap.put("tFilterRow_6_NB_LINE", nb_line_tFilterRow_6);
				globalMap.put("tFilterRow_6_NB_LINE_OK", nb_line_ok_tFilterRow_6);
				globalMap.put("tFilterRow_6_NB_LINE_REJECT", nb_line_reject_tFilterRow_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out12");
				}

				ok_Hash.put("tFilterRow_6", true);
				end_Hash.put("tFilterRow_6", System.currentTimeMillis());

				/**
				 * [tFilterRow_6 end ] stop
				 */

				/**
				 * [tHashOutput_24 end ] start
				 */

				currentComponent = "tHashOutput_24";

				globalMap.put("tHashOutput_24_NB_LINE", nb_line_tHashOutput_24);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row88");
				}

				ok_Hash.put("tHashOutput_24", true);
				end_Hash.put("tHashOutput_24", System.currentTimeMillis());

				/**
				 * [tHashOutput_24 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 end ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (outtFileOutputDelimited_6 != null) {
					outtFileOutputDelimited_6.flush();
					outtFileOutputDelimited_6.close();
				}

				globalMap.put("tFileOutputDelimited_6_NB_LINE", nb_line_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);

				resourceMap.put("finish_tFileOutputDelimited_6", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row87");
				}

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_24:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk36", 0, "ok");
			}

			tHashInput_25Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_14"
			globalMap.remove("tHash_Lookup_row86");

			try {

				/**
				 * [tHashInput_24 finally ] start
				 */

				currentComponent = "tHashInput_24";

				/**
				 * [tHashInput_24 finally ] stop
				 */

				/**
				 * [tMap_14 finally ] start
				 */

				currentComponent = "tMap_14";

				/**
				 * [tMap_14 finally ] stop
				 */

				/**
				 * [tFilterRow_6 finally ] start
				 */

				currentComponent = "tFilterRow_6";

				/**
				 * [tFilterRow_6 finally ] stop
				 */

				/**
				 * [tHashOutput_24 finally ] start
				 */

				currentComponent = "tHashOutput_24";

				/**
				 * [tHashOutput_24 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (resourceMap.get("finish_tFileOutputDelimited_6") == null) {

					java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_6");
					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}

				}

				/**
				 * [tFileOutputDelimited_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_24_SUBPROCESS_STATE", 1);
	}

	public static class out15Struct implements routines.system.IPersistableRow<out15Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.Is_weekly = readString(dis);

					this.BU = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Title = readString(dis);

					this.JS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.JS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Title=" + Title);
			sb.append(",JS=" + JS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row68Struct implements routines.system.IPersistableRow<row68Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Nxt_WkOfYear;

		public String getNxt_WkOfYear() {
			return this.Nxt_WkOfYear;
		}

		public String Nxt_MnthOfYear;

		public String getNxt_MnthOfYear() {
			return this.Nxt_MnthOfYear;
		}

		public String Nxt_YearOfYear;

		public String getNxt_YearOfYear() {
			return this.Nxt_YearOfYear;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

					this.Nxt_WkOfYear = readString(dis);

					this.Nxt_MnthOfYear = readString(dis);

					this.Nxt_YearOfYear = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Nxt_WkOfYear, dos);

				// String

				writeString(this.Nxt_MnthOfYear, dos);

				// String

				writeString(this.Nxt_YearOfYear, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Nxt_WkOfYear=" + Nxt_WkOfYear);
			sb.append(",Nxt_MnthOfYear=" + Nxt_MnthOfYear);
			sb.append(",Nxt_YearOfYear=" + Nxt_YearOfYear);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row68Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_25_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row68Struct row68 = new row68Struct();
				out15Struct out15 = new out15Struct();

				/**
				 * [tHashOutput_25 begin ] start
				 */

				ok_Hash.put("tHashOutput_25", false);
				start_Hash.put("tHashOutput_25", System.currentTimeMillis());

				currentComponent = "tHashOutput_25";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out15");
				}

				int tos_count_tHashOutput_25 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_25 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out15Struct> tHashFile_tHashOutput_25 = null;
				String hashKey_tHashOutput_25 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_25";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_25)) {
					if (mf_tHashOutput_25.getResourceMap().get(hashKey_tHashOutput_25) == null) {
						mf_tHashOutput_25.getResourceMap().put(hashKey_tHashOutput_25,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out15Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_25 = mf_tHashOutput_25.getResourceMap().get(hashKey_tHashOutput_25);
					} else {
						tHashFile_tHashOutput_25 = mf_tHashOutput_25.getResourceMap().get(hashKey_tHashOutput_25);
					}
				}
				int nb_line_tHashOutput_25 = 0;

				/**
				 * [tHashOutput_25 begin ] stop
				 */

				/**
				 * [tMap_28 begin ] start
				 */

				ok_Hash.put("tMap_28", false);
				start_Hash.put("tMap_28", System.currentTimeMillis());

				currentComponent = "tMap_28";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row68");
				}

				int tos_count_tMap_28 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_28__Struct {
				}
				Var__tMap_28__Struct Var__tMap_28 = new Var__tMap_28__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out15Struct out15_tmp = new out15Struct();
// ###############################

				/**
				 * [tMap_28 begin ] stop
				 */

				/**
				 * [tHashInput_25 begin ] start
				 */

				ok_Hash.put("tHashInput_25", false);
				start_Hash.put("tHashInput_25", System.currentTimeMillis());

				currentComponent = "tHashInput_25";

				int tos_count_tHashInput_25 = 0;

				int nb_line_tHashInput_25 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_25 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row88Struct> tHashFile_tHashInput_25 = mf_tHashInput_25
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_24");
				if (tHashFile_tHashInput_25 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row88Struct> iterator_tHashInput_25 = tHashFile_tHashInput_25.iterator();
				while (iterator_tHashInput_25.hasNext()) {
					row88Struct next_tHashInput_25 = iterator_tHashInput_25.next();

					row68.YEAR_NUM = next_tHashInput_25.YEAR_NUM;
					row68.MONTH_OF_YEAR = next_tHashInput_25.MONTH_OF_YEAR;
					row68.BU = next_tHashInput_25.BU;
					row68.KPI_ID = next_tHashInput_25.KPI_ID;
					row68.FREQUENCY = next_tHashInput_25.FREQUENCY;
					row68.WEEK_OF_YEAR = next_tHashInput_25.WEEK_OF_YEAR;
					row68.KPI_DESC = next_tHashInput_25.KPI_DESC;
					row68.Weight = next_tHashInput_25.Weight;
					row68.JS = next_tHashInput_25.JS;
					row68.Month_Differnece = next_tHashInput_25.Month_Differnece;
					row68.Angle_Of_KPI = next_tHashInput_25.Angle_Of_KPI;
					row68.Achieved = next_tHashInput_25.Achieved;
					row68.Distance = next_tHashInput_25.Distance;
					row68.Weight_Disc = next_tHashInput_25.Weight_Disc;
					row68.Total_BU = next_tHashInput_25.Total_BU;
					row68.Title = next_tHashInput_25.Title;
					row68.Score = next_tHashInput_25.Score;
					row68.SUB_BU = next_tHashInput_25.SUB_BU;
					row68.Is_weekly = next_tHashInput_25.Is_weekly;
					row68.Nxt_WkOfYear = next_tHashInput_25.Nxt_WkOfYear;
					row68.Nxt_MnthOfYear = next_tHashInput_25.Nxt_MnthOfYear;
					row68.Nxt_YearOfYear = next_tHashInput_25.Nxt_YearOfYear;

					/**
					 * [tHashInput_25 begin ] stop
					 */

					/**
					 * [tHashInput_25 main ] start
					 */

					currentComponent = "tHashInput_25";

					tos_count_tHashInput_25++;

					/**
					 * [tHashInput_25 main ] stop
					 */

					/**
					 * [tHashInput_25 process_data_begin ] start
					 */

					currentComponent = "tHashInput_25";

					/**
					 * [tHashInput_25 process_data_begin ] stop
					 */

					/**
					 * [tMap_28 main ] start
					 */

					currentComponent = "tMap_28";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row68");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_28 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_28 = false;
					boolean mainRowRejected_tMap_28 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_28__Struct Var = Var__tMap_28;// ###############################
						// ###############################
						// # Output tables

						out15 = null;

// # Output table : 'out15'
						out15_tmp.YEAR_NUM = row68.Nxt_YearOfYear;
						out15_tmp.MONTH_OF_YEAR = row68.Nxt_MnthOfYear;
						out15_tmp.KPI_ID = row68.KPI_ID;
						out15_tmp.FREQUENCY = row68.FREQUENCY;
						out15_tmp.WEEK_OF_YEAR = row68.Nxt_WkOfYear;
						out15_tmp.Is_weekly = row68.Is_weekly;
						out15_tmp.BU = row68.BU;
						out15_tmp.KPI_DESC = row68.KPI_DESC;
						out15_tmp.Weight = row68.Weight;
						out15_tmp.Month_Differnece = row68.Month_Differnece;
						out15_tmp.Angle_Of_KPI = row68.Angle_Of_KPI;
						out15_tmp.Achieved = row68.Achieved;
						out15_tmp.Distance = row68.Distance;
						out15_tmp.Weight_Disc = row68.Weight_Disc;
						out15_tmp.Total_BU = row68.Total_BU;
						out15_tmp.Score = row68.Score;
						out15_tmp.Cluster_ID = -1;
						out15_tmp.SUB_BU = row68.SUB_BU;
						out15_tmp.Title = row68.Title;
						out15_tmp.JS = row68.JS;
						out15 = out15_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_28 = false;

					tos_count_tMap_28++;

					/**
					 * [tMap_28 main ] stop
					 */

					/**
					 * [tMap_28 process_data_begin ] start
					 */

					currentComponent = "tMap_28";

					/**
					 * [tMap_28 process_data_begin ] stop
					 */
// Start of branch "out15"
					if (out15 != null) {

						/**
						 * [tHashOutput_25 main ] start
						 */

						currentComponent = "tHashOutput_25";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "out15");
						}

						out15Struct oneRow_tHashOutput_25 = new out15Struct();

						oneRow_tHashOutput_25.YEAR_NUM = out15.YEAR_NUM;
						oneRow_tHashOutput_25.MONTH_OF_YEAR = out15.MONTH_OF_YEAR;
						oneRow_tHashOutput_25.KPI_ID = out15.KPI_ID;
						oneRow_tHashOutput_25.FREQUENCY = out15.FREQUENCY;
						oneRow_tHashOutput_25.WEEK_OF_YEAR = out15.WEEK_OF_YEAR;
						oneRow_tHashOutput_25.Is_weekly = out15.Is_weekly;
						oneRow_tHashOutput_25.BU = out15.BU;
						oneRow_tHashOutput_25.KPI_DESC = out15.KPI_DESC;
						oneRow_tHashOutput_25.Weight = out15.Weight;
						oneRow_tHashOutput_25.Month_Differnece = out15.Month_Differnece;
						oneRow_tHashOutput_25.Angle_Of_KPI = out15.Angle_Of_KPI;
						oneRow_tHashOutput_25.Achieved = out15.Achieved;
						oneRow_tHashOutput_25.Distance = out15.Distance;
						oneRow_tHashOutput_25.Weight_Disc = out15.Weight_Disc;
						oneRow_tHashOutput_25.Total_BU = out15.Total_BU;
						oneRow_tHashOutput_25.Score = out15.Score;
						oneRow_tHashOutput_25.Cluster_ID = out15.Cluster_ID;
						oneRow_tHashOutput_25.SUB_BU = out15.SUB_BU;
						oneRow_tHashOutput_25.Title = out15.Title;
						oneRow_tHashOutput_25.JS = out15.JS;

						tHashFile_tHashOutput_25.put(oneRow_tHashOutput_25);
						nb_line_tHashOutput_25++;

						tos_count_tHashOutput_25++;

						/**
						 * [tHashOutput_25 main ] stop
						 */

						/**
						 * [tHashOutput_25 process_data_begin ] start
						 */

						currentComponent = "tHashOutput_25";

						/**
						 * [tHashOutput_25 process_data_begin ] stop
						 */

						/**
						 * [tHashOutput_25 process_data_end ] start
						 */

						currentComponent = "tHashOutput_25";

						/**
						 * [tHashOutput_25 process_data_end ] stop
						 */

					} // End of branch "out15"

					/**
					 * [tMap_28 process_data_end ] start
					 */

					currentComponent = "tMap_28";

					/**
					 * [tMap_28 process_data_end ] stop
					 */

					/**
					 * [tHashInput_25 process_data_end ] start
					 */

					currentComponent = "tHashInput_25";

					/**
					 * [tHashInput_25 process_data_end ] stop
					 */

					/**
					 * [tHashInput_25 end ] start
					 */

					currentComponent = "tHashInput_25";

					nb_line_tHashInput_25++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_24");

				globalMap.put("tHashInput_25_NB_LINE", nb_line_tHashInput_25);

				ok_Hash.put("tHashInput_25", true);
				end_Hash.put("tHashInput_25", System.currentTimeMillis());

				/**
				 * [tHashInput_25 end ] stop
				 */

				/**
				 * [tMap_28 end ] start
				 */

				currentComponent = "tMap_28";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row68");
				}

				ok_Hash.put("tMap_28", true);
				end_Hash.put("tMap_28", System.currentTimeMillis());

				/**
				 * [tMap_28 end ] stop
				 */

				/**
				 * [tHashOutput_25 end ] start
				 */

				currentComponent = "tHashOutput_25";

				globalMap.put("tHashOutput_25_NB_LINE", nb_line_tHashOutput_25);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out15");
				}

				ok_Hash.put("tHashOutput_25", true);
				end_Hash.put("tHashOutput_25", System.currentTimeMillis());

				/**
				 * [tHashOutput_25 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_25:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk23", 0, "ok");
			}

			tHashInput_32Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_25 finally ] start
				 */

				currentComponent = "tHashInput_25";

				/**
				 * [tHashInput_25 finally ] stop
				 */

				/**
				 * [tMap_28 finally ] start
				 */

				currentComponent = "tMap_28";

				/**
				 * [tMap_28 finally ] stop
				 */

				/**
				 * [tHashOutput_25 finally ] start
				 */

				currentComponent = "tHashOutput_25";

				/**
				 * [tHashOutput_25 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_25_SUBPROCESS_STATE", 1);
	}

	public static class row95Struct implements routines.system.IPersistableRow<row95Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.Is_weekly = readString(dis);

					this.BU = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Title = readString(dis);

					this.JS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.JS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Title=" + Title);
			sb.append(",JS=" + JS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row95Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row93Struct implements routines.system.IPersistableRow<row93Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.Is_weekly = readString(dis);

					this.BU = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Title = readString(dis);

					this.JS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.JS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Title=" + Title);
			sb.append(",JS=" + JS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row93Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row77Struct implements routines.system.IPersistableRow<row77Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.Is_weekly = readString(dis);

					this.BU = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Title = readString(dis);

					this.JS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.JS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Title=" + Title);
			sb.append(",JS=" + JS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row77Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row78Struct implements routines.system.IPersistableRow<row78Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.Is_weekly = readString(dis);

					this.BU = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Title = readString(dis);

					this.JS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.JS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Title=" + Title);
			sb.append(",JS=" + JS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row78Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_32Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_32_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row77Struct row77 = new row77Struct();

				row78Struct row78 = new row78Struct();

				row93Struct row93 = new row93Struct();
				row93Struct row95 = row93;

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row95");
				}

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						context.ceo_path + "output/weekly/Weekly_PrevMonth_Data.csv")).getAbsolutePath().replace("\\",
								"/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
							fileName_tFileOutputDelimited_5.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);
				int nb_line_tFileOutputDelimited_5 = 0;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
																		 * Start field
																		 * tFileOutputDelimited_5:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_5 = null;

				java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				if (fileToDelete_tFileOutputDelimited_5.exists()) {
					fileToDelete_tFileOutputDelimited_5.delete();
				}
				outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_5.length() == 0) {
					outtFileOutputDelimited_5.write("YEAR_NUM");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("MONTH_OF_YEAR");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("KPI_ID");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("FREQUENCY");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("WEEK_OF_YEAR");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Is_weekly");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("BU");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("KPI_DESC");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Weight");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Month_Differnece");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Angle_Of_KPI");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Achieved");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Distance");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Weight_Disc");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Total_BU");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Score");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Cluster_ID");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("SUB_BU");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Title");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("JS");
					outtFileOutputDelimited_5.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
				resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tHashOutput_26 begin ] start
				 */

				ok_Hash.put("tHashOutput_26", false);
				start_Hash.put("tHashOutput_26", System.currentTimeMillis());

				currentComponent = "tHashOutput_26";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row93");
				}

				int tos_count_tHashOutput_26 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_26 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row93Struct> tHashFile_tHashOutput_26 = null;
				String hashKey_tHashOutput_26 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_26";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_26)) {
					if (mf_tHashOutput_26.getResourceMap().get(hashKey_tHashOutput_26) == null) {
						mf_tHashOutput_26.getResourceMap().put(hashKey_tHashOutput_26,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row93Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_26 = mf_tHashOutput_26.getResourceMap().get(hashKey_tHashOutput_26);
					} else {
						tHashFile_tHashOutput_26 = mf_tHashOutput_26.getResourceMap().get(hashKey_tHashOutput_26);
					}
				}
				int nb_line_tHashOutput_26 = 0;

				/**
				 * [tHashOutput_26 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row77", "row78");
				}

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tHashInput_32 begin ] start
				 */

				ok_Hash.put("tHashInput_32", false);
				start_Hash.put("tHashInput_32", System.currentTimeMillis());

				currentComponent = "tHashInput_32";

				int tos_count_tHashInput_32 = 0;

				int nb_line_tHashInput_32 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_32 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out11Struct> tHashFile_tHashInput_32 = mf_tHashInput_32
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_19");
				if (tHashFile_tHashInput_32 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<out11Struct> iterator_tHashInput_32 = tHashFile_tHashInput_32.iterator();
				while (iterator_tHashInput_32.hasNext()) {
					out11Struct next_tHashInput_32 = iterator_tHashInput_32.next();

					row77.YEAR_NUM = next_tHashInput_32.YEAR_NUM;
					row77.MONTH_OF_YEAR = next_tHashInput_32.MONTH_OF_YEAR;
					row77.KPI_ID = next_tHashInput_32.KPI_ID;
					row77.FREQUENCY = next_tHashInput_32.FREQUENCY;
					row77.WEEK_OF_YEAR = next_tHashInput_32.WEEK_OF_YEAR;
					row77.Is_weekly = next_tHashInput_32.Is_weekly;
					row77.BU = next_tHashInput_32.BU;
					row77.KPI_DESC = next_tHashInput_32.KPI_DESC;
					row77.Weight = next_tHashInput_32.Weight;
					row77.Month_Differnece = next_tHashInput_32.Month_Differnece;
					row77.Angle_Of_KPI = next_tHashInput_32.Angle_Of_KPI;
					row77.Achieved = next_tHashInput_32.Achieved;
					row77.Distance = next_tHashInput_32.Distance;
					row77.Weight_Disc = next_tHashInput_32.Weight_Disc;
					row77.Total_BU = next_tHashInput_32.Total_BU;
					row77.Score = next_tHashInput_32.Score;
					row77.Cluster_ID = next_tHashInput_32.Cluster_ID;
					row77.SUB_BU = next_tHashInput_32.SUB_BU;
					row77.Title = next_tHashInput_32.Title;
					row77.JS = next_tHashInput_32.JS;

					/**
					 * [tHashInput_32 begin ] stop
					 */

					/**
					 * [tHashInput_32 main ] start
					 */

					currentComponent = "tHashInput_32";

					tos_count_tHashInput_32++;

					/**
					 * [tHashInput_32 main ] stop
					 */

					/**
					 * [tHashInput_32 process_data_begin ] start
					 */

					currentComponent = "tHashInput_32";

					/**
					 * [tHashInput_32 process_data_begin ] stop
					 */

					/**
					 * [tUnite_1 main ] start
					 */

					currentComponent = "tUnite_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row77");
					}

//////////

// for output
					row93 = new row93Struct();

					row93.YEAR_NUM = row77.YEAR_NUM;
					row93.MONTH_OF_YEAR = row77.MONTH_OF_YEAR;
					row93.KPI_ID = row77.KPI_ID;
					row93.FREQUENCY = row77.FREQUENCY;
					row93.WEEK_OF_YEAR = row77.WEEK_OF_YEAR;
					row93.Is_weekly = row77.Is_weekly;
					row93.BU = row77.BU;
					row93.KPI_DESC = row77.KPI_DESC;
					row93.Weight = row77.Weight;
					row93.Month_Differnece = row77.Month_Differnece;
					row93.Angle_Of_KPI = row77.Angle_Of_KPI;
					row93.Achieved = row77.Achieved;
					row93.Distance = row77.Distance;
					row93.Weight_Disc = row77.Weight_Disc;
					row93.Total_BU = row77.Total_BU;
					row93.Score = row77.Score;
					row93.Cluster_ID = row77.Cluster_ID;
					row93.SUB_BU = row77.SUB_BU;
					row93.Title = row77.Title;
					row93.JS = row77.JS;

					nb_line_tUnite_1++;

//////////

					tos_count_tUnite_1++;

					/**
					 * [tUnite_1 main ] stop
					 */

					/**
					 * [tUnite_1 process_data_begin ] start
					 */

					currentComponent = "tUnite_1";

					/**
					 * [tUnite_1 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_26 main ] start
					 */

					currentComponent = "tHashOutput_26";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row93");
					}

					row93Struct oneRow_tHashOutput_26 = new row93Struct();

					oneRow_tHashOutput_26.YEAR_NUM = row93.YEAR_NUM;
					oneRow_tHashOutput_26.MONTH_OF_YEAR = row93.MONTH_OF_YEAR;
					oneRow_tHashOutput_26.KPI_ID = row93.KPI_ID;
					oneRow_tHashOutput_26.FREQUENCY = row93.FREQUENCY;
					oneRow_tHashOutput_26.WEEK_OF_YEAR = row93.WEEK_OF_YEAR;
					oneRow_tHashOutput_26.Is_weekly = row93.Is_weekly;
					oneRow_tHashOutput_26.BU = row93.BU;
					oneRow_tHashOutput_26.KPI_DESC = row93.KPI_DESC;
					oneRow_tHashOutput_26.Weight = row93.Weight;
					oneRow_tHashOutput_26.Month_Differnece = row93.Month_Differnece;
					oneRow_tHashOutput_26.Angle_Of_KPI = row93.Angle_Of_KPI;
					oneRow_tHashOutput_26.Achieved = row93.Achieved;
					oneRow_tHashOutput_26.Distance = row93.Distance;
					oneRow_tHashOutput_26.Weight_Disc = row93.Weight_Disc;
					oneRow_tHashOutput_26.Total_BU = row93.Total_BU;
					oneRow_tHashOutput_26.Score = row93.Score;
					oneRow_tHashOutput_26.Cluster_ID = row93.Cluster_ID;
					oneRow_tHashOutput_26.SUB_BU = row93.SUB_BU;
					oneRow_tHashOutput_26.Title = row93.Title;
					oneRow_tHashOutput_26.JS = row93.JS;

					tHashFile_tHashOutput_26.put(oneRow_tHashOutput_26);
					nb_line_tHashOutput_26++;

					row95 = row93;

					tos_count_tHashOutput_26++;

					/**
					 * [tHashOutput_26 main ] stop
					 */

					/**
					 * [tHashOutput_26 process_data_begin ] start
					 */

					currentComponent = "tHashOutput_26";

					/**
					 * [tHashOutput_26 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 main ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row95");
					}

					StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
					if (row95.YEAR_NUM != null) {
						sb_tFileOutputDelimited_5.append(row95.YEAR_NUM);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.MONTH_OF_YEAR != null) {
						sb_tFileOutputDelimited_5.append(row95.MONTH_OF_YEAR);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.KPI_ID != null) {
						sb_tFileOutputDelimited_5.append(row95.KPI_ID);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.FREQUENCY != null) {
						sb_tFileOutputDelimited_5.append(row95.FREQUENCY);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.WEEK_OF_YEAR != null) {
						sb_tFileOutputDelimited_5.append(row95.WEEK_OF_YEAR);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Is_weekly != null) {
						sb_tFileOutputDelimited_5.append(row95.Is_weekly);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.BU != null) {
						sb_tFileOutputDelimited_5.append(row95.BU);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.KPI_DESC != null) {
						sb_tFileOutputDelimited_5.append(row95.KPI_DESC);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Weight != null) {
						sb_tFileOutputDelimited_5.append(row95.Weight);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Month_Differnece != null) {
						sb_tFileOutputDelimited_5.append(row95.Month_Differnece);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Angle_Of_KPI != null) {
						sb_tFileOutputDelimited_5.append(row95.Angle_Of_KPI);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Achieved != null) {
						sb_tFileOutputDelimited_5.append(row95.Achieved);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Distance != null) {
						sb_tFileOutputDelimited_5.append(row95.Distance);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Weight_Disc != null) {
						sb_tFileOutputDelimited_5.append(row95.Weight_Disc);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Total_BU != null) {
						sb_tFileOutputDelimited_5.append(row95.Total_BU);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Score != null) {
						sb_tFileOutputDelimited_5.append(row95.Score);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Cluster_ID != null) {
						sb_tFileOutputDelimited_5.append(row95.Cluster_ID);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.SUB_BU != null) {
						sb_tFileOutputDelimited_5.append(row95.SUB_BU);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Title != null) {
						sb_tFileOutputDelimited_5.append(row95.Title);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.JS != null) {
						sb_tFileOutputDelimited_5.append(row95.JS);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

					nb_line_tFileOutputDelimited_5++;
					resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

					outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());

					tos_count_tFileOutputDelimited_5++;

					/**
					 * [tFileOutputDelimited_5 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

					/**
					 * [tFileOutputDelimited_5 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

					/**
					 * [tFileOutputDelimited_5 process_data_end ] stop
					 */

					/**
					 * [tHashOutput_26 process_data_end ] start
					 */

					currentComponent = "tHashOutput_26";

					/**
					 * [tHashOutput_26 process_data_end ] stop
					 */

					/**
					 * [tUnite_1 process_data_end ] start
					 */

					currentComponent = "tUnite_1";

					/**
					 * [tUnite_1 process_data_end ] stop
					 */

					/**
					 * [tHashInput_32 process_data_end ] start
					 */

					currentComponent = "tHashInput_32";

					/**
					 * [tHashInput_32 process_data_end ] stop
					 */

					/**
					 * [tHashInput_32 end ] start
					 */

					currentComponent = "tHashInput_32";

					nb_line_tHashInput_32++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_19");

				globalMap.put("tHashInput_32_NB_LINE", nb_line_tHashInput_32);

				ok_Hash.put("tHashInput_32", true);
				end_Hash.put("tHashInput_32", System.currentTimeMillis());

				/**
				 * [tHashInput_32 end ] stop
				 */

				/**
				 * [tHashInput_33 begin ] start
				 */

				ok_Hash.put("tHashInput_33", false);
				start_Hash.put("tHashInput_33", System.currentTimeMillis());

				currentComponent = "tHashInput_33";

				int tos_count_tHashInput_33 = 0;

				int nb_line_tHashInput_33 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_33 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out15Struct> tHashFile_tHashInput_33 = mf_tHashInput_33
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_25");
				if (tHashFile_tHashInput_33 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<out15Struct> iterator_tHashInput_33 = tHashFile_tHashInput_33.iterator();
				while (iterator_tHashInput_33.hasNext()) {
					out15Struct next_tHashInput_33 = iterator_tHashInput_33.next();

					row78.YEAR_NUM = next_tHashInput_33.YEAR_NUM;
					row78.MONTH_OF_YEAR = next_tHashInput_33.MONTH_OF_YEAR;
					row78.KPI_ID = next_tHashInput_33.KPI_ID;
					row78.FREQUENCY = next_tHashInput_33.FREQUENCY;
					row78.WEEK_OF_YEAR = next_tHashInput_33.WEEK_OF_YEAR;
					row78.Is_weekly = next_tHashInput_33.Is_weekly;
					row78.BU = next_tHashInput_33.BU;
					row78.KPI_DESC = next_tHashInput_33.KPI_DESC;
					row78.Weight = next_tHashInput_33.Weight;
					row78.Month_Differnece = next_tHashInput_33.Month_Differnece;
					row78.Angle_Of_KPI = next_tHashInput_33.Angle_Of_KPI;
					row78.Achieved = next_tHashInput_33.Achieved;
					row78.Distance = next_tHashInput_33.Distance;
					row78.Weight_Disc = next_tHashInput_33.Weight_Disc;
					row78.Total_BU = next_tHashInput_33.Total_BU;
					row78.Score = next_tHashInput_33.Score;
					row78.Cluster_ID = next_tHashInput_33.Cluster_ID;
					row78.SUB_BU = next_tHashInput_33.SUB_BU;
					row78.Title = next_tHashInput_33.Title;
					row78.JS = next_tHashInput_33.JS;

					/**
					 * [tHashInput_33 begin ] stop
					 */

					/**
					 * [tHashInput_33 main ] start
					 */

					currentComponent = "tHashInput_33";

					tos_count_tHashInput_33++;

					/**
					 * [tHashInput_33 main ] stop
					 */

					/**
					 * [tHashInput_33 process_data_begin ] start
					 */

					currentComponent = "tHashInput_33";

					/**
					 * [tHashInput_33 process_data_begin ] stop
					 */

					/**
					 * [tUnite_1 main ] start
					 */

					currentComponent = "tUnite_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row78");
					}

//////////

// for output
					row93 = new row93Struct();

					row93.YEAR_NUM = row78.YEAR_NUM;
					row93.MONTH_OF_YEAR = row78.MONTH_OF_YEAR;
					row93.KPI_ID = row78.KPI_ID;
					row93.FREQUENCY = row78.FREQUENCY;
					row93.WEEK_OF_YEAR = row78.WEEK_OF_YEAR;
					row93.Is_weekly = row78.Is_weekly;
					row93.BU = row78.BU;
					row93.KPI_DESC = row78.KPI_DESC;
					row93.Weight = row78.Weight;
					row93.Month_Differnece = row78.Month_Differnece;
					row93.Angle_Of_KPI = row78.Angle_Of_KPI;
					row93.Achieved = row78.Achieved;
					row93.Distance = row78.Distance;
					row93.Weight_Disc = row78.Weight_Disc;
					row93.Total_BU = row78.Total_BU;
					row93.Score = row78.Score;
					row93.Cluster_ID = row78.Cluster_ID;
					row93.SUB_BU = row78.SUB_BU;
					row93.Title = row78.Title;
					row93.JS = row78.JS;

					nb_line_tUnite_1++;

//////////

					tos_count_tUnite_1++;

					/**
					 * [tUnite_1 main ] stop
					 */

					/**
					 * [tUnite_1 process_data_begin ] start
					 */

					currentComponent = "tUnite_1";

					/**
					 * [tUnite_1 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_26 main ] start
					 */

					currentComponent = "tHashOutput_26";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row93");
					}

					row93Struct oneRow_tHashOutput_26 = new row93Struct();

					oneRow_tHashOutput_26.YEAR_NUM = row93.YEAR_NUM;
					oneRow_tHashOutput_26.MONTH_OF_YEAR = row93.MONTH_OF_YEAR;
					oneRow_tHashOutput_26.KPI_ID = row93.KPI_ID;
					oneRow_tHashOutput_26.FREQUENCY = row93.FREQUENCY;
					oneRow_tHashOutput_26.WEEK_OF_YEAR = row93.WEEK_OF_YEAR;
					oneRow_tHashOutput_26.Is_weekly = row93.Is_weekly;
					oneRow_tHashOutput_26.BU = row93.BU;
					oneRow_tHashOutput_26.KPI_DESC = row93.KPI_DESC;
					oneRow_tHashOutput_26.Weight = row93.Weight;
					oneRow_tHashOutput_26.Month_Differnece = row93.Month_Differnece;
					oneRow_tHashOutput_26.Angle_Of_KPI = row93.Angle_Of_KPI;
					oneRow_tHashOutput_26.Achieved = row93.Achieved;
					oneRow_tHashOutput_26.Distance = row93.Distance;
					oneRow_tHashOutput_26.Weight_Disc = row93.Weight_Disc;
					oneRow_tHashOutput_26.Total_BU = row93.Total_BU;
					oneRow_tHashOutput_26.Score = row93.Score;
					oneRow_tHashOutput_26.Cluster_ID = row93.Cluster_ID;
					oneRow_tHashOutput_26.SUB_BU = row93.SUB_BU;
					oneRow_tHashOutput_26.Title = row93.Title;
					oneRow_tHashOutput_26.JS = row93.JS;

					tHashFile_tHashOutput_26.put(oneRow_tHashOutput_26);
					nb_line_tHashOutput_26++;

					row95 = row93;

					tos_count_tHashOutput_26++;

					/**
					 * [tHashOutput_26 main ] stop
					 */

					/**
					 * [tHashOutput_26 process_data_begin ] start
					 */

					currentComponent = "tHashOutput_26";

					/**
					 * [tHashOutput_26 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 main ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row95");
					}

					StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
					if (row95.YEAR_NUM != null) {
						sb_tFileOutputDelimited_5.append(row95.YEAR_NUM);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.MONTH_OF_YEAR != null) {
						sb_tFileOutputDelimited_5.append(row95.MONTH_OF_YEAR);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.KPI_ID != null) {
						sb_tFileOutputDelimited_5.append(row95.KPI_ID);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.FREQUENCY != null) {
						sb_tFileOutputDelimited_5.append(row95.FREQUENCY);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.WEEK_OF_YEAR != null) {
						sb_tFileOutputDelimited_5.append(row95.WEEK_OF_YEAR);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Is_weekly != null) {
						sb_tFileOutputDelimited_5.append(row95.Is_weekly);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.BU != null) {
						sb_tFileOutputDelimited_5.append(row95.BU);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.KPI_DESC != null) {
						sb_tFileOutputDelimited_5.append(row95.KPI_DESC);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Weight != null) {
						sb_tFileOutputDelimited_5.append(row95.Weight);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Month_Differnece != null) {
						sb_tFileOutputDelimited_5.append(row95.Month_Differnece);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Angle_Of_KPI != null) {
						sb_tFileOutputDelimited_5.append(row95.Angle_Of_KPI);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Achieved != null) {
						sb_tFileOutputDelimited_5.append(row95.Achieved);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Distance != null) {
						sb_tFileOutputDelimited_5.append(row95.Distance);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Weight_Disc != null) {
						sb_tFileOutputDelimited_5.append(row95.Weight_Disc);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Total_BU != null) {
						sb_tFileOutputDelimited_5.append(row95.Total_BU);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Score != null) {
						sb_tFileOutputDelimited_5.append(row95.Score);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Cluster_ID != null) {
						sb_tFileOutputDelimited_5.append(row95.Cluster_ID);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.SUB_BU != null) {
						sb_tFileOutputDelimited_5.append(row95.SUB_BU);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.Title != null) {
						sb_tFileOutputDelimited_5.append(row95.Title);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					if (row95.JS != null) {
						sb_tFileOutputDelimited_5.append(row95.JS);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

					nb_line_tFileOutputDelimited_5++;
					resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

					outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());

					tos_count_tFileOutputDelimited_5++;

					/**
					 * [tFileOutputDelimited_5 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

					/**
					 * [tFileOutputDelimited_5 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

					/**
					 * [tFileOutputDelimited_5 process_data_end ] stop
					 */

					/**
					 * [tHashOutput_26 process_data_end ] start
					 */

					currentComponent = "tHashOutput_26";

					/**
					 * [tHashOutput_26 process_data_end ] stop
					 */

					/**
					 * [tUnite_1 process_data_end ] start
					 */

					currentComponent = "tUnite_1";

					/**
					 * [tUnite_1 process_data_end ] stop
					 */

					/**
					 * [tHashInput_33 process_data_end ] start
					 */

					currentComponent = "tHashInput_33";

					/**
					 * [tHashInput_33 process_data_end ] stop
					 */

					/**
					 * [tHashInput_33 end ] start
					 */

					currentComponent = "tHashInput_33";

					nb_line_tHashInput_33++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_25");

				globalMap.put("tHashInput_33_NB_LINE", nb_line_tHashInput_33);

				ok_Hash.put("tHashInput_33", true);
				end_Hash.put("tHashInput_33", System.currentTimeMillis());

				/**
				 * [tHashInput_33 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row77", "row78");
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tHashOutput_26 end ] start
				 */

				currentComponent = "tHashOutput_26";

				globalMap.put("tHashOutput_26_NB_LINE", nb_line_tHashOutput_26);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row93");
				}

				ok_Hash.put("tHashOutput_26", true);
				end_Hash.put("tHashOutput_26", System.currentTimeMillis());

				/**
				 * [tHashOutput_26 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (outtFileOutputDelimited_5 != null) {
					outtFileOutputDelimited_5.flush();
					outtFileOutputDelimited_5.close();
				}

				globalMap.put("tFileOutputDelimited_5_NB_LINE", nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row95");
				}

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_32:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk29", 0, "ok");
			}

			tHashInput_20Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_32 finally ] start
				 */

				currentComponent = "tHashInput_32";

				/**
				 * [tHashInput_32 finally ] stop
				 */

				/**
				 * [tHashInput_33 finally ] start
				 */

				currentComponent = "tHashInput_33";

				/**
				 * [tHashInput_33 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tHashOutput_26 finally ] start
				 */

				currentComponent = "tHashOutput_26";

				/**
				 * [tHashOutput_26 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_5");
					if (outtFileOutputDelimited_5 != null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_32_SUBPROCESS_STATE", 1);
	}

	public static class row100Struct implements routines.system.IPersistableRow<row100Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row100Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row99Struct implements routines.system.IPersistableRow<row99Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String Score;

		public String getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.Score = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.Score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + Score);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row99Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_16
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_16> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String Score;

		public String getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.Score = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.Score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + Score);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_16 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out30Struct implements routines.system.IPersistableRow<out30Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String Score;

		public String getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.Score = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.Score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + Score);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row98Struct implements routines.system.IPersistableRow<row98Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row98Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tMap_29_MainStruct implements routines.system.IPersistableRow<tMap_29_MainStruct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tMap_29_MainStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row97Struct implements routines.system.IPersistableRow<row97Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row97Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_11
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_11> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_11 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row96Struct implements routines.system.IPersistableRow<row96Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row96Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row49Struct implements routines.system.IPersistableRow<row49Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row49Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String Score;

		public String getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.Score = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.Score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + Score);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row48Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_9
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_9> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String Score;

		public String getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.Score = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.Score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + Score);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_9 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out14Struct implements routines.system.IPersistableRow<out14Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String Score;

		public String getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.Score = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.Score, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + Score);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row50Struct implements routines.system.IPersistableRow<row50Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row50Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tMap_20_MainStruct implements routines.system.IPersistableRow<tMap_20_MainStruct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tMap_20_MainStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row43Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_8
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_8> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_8 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class MonthlyStruct implements routines.system.IPersistableRow<MonthlyStruct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MonthlyStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class WeeklyStruct implements routines.system.IPersistableRow<WeeklyStruct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(WeeklyStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out13Struct implements routines.system.IPersistableRow<out13Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row41Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_6
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_6> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_6 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.Is_weekly = readString(dis);

					this.BU = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Title = readString(dis);

					this.JS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.JS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Title=" + Title);
			sb.append(",JS=" + JS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row45Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.Is_weekly = readString(dis);

					this.BU = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Title = readString(dis);

					this.JS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.JS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Title=" + Title);
			sb.append(",JS=" + JS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row28Struct row28 = new row28Struct();
				row45Struct row45 = new row45Struct();
				row41Struct row41 = new row41Struct();
				out13Struct out13 = new out13Struct();
				MonthlyStruct Monthly = new MonthlyStruct();
				row43Struct row43 = new row43Struct();
				tMap_20_MainStruct tMap_20_Main = new tMap_20_MainStruct();
				tMap_20_MainStruct row50 = tMap_20_Main;
				out14Struct out14 = new out14Struct();
				row48Struct row48 = new row48Struct();
				row49Struct row49 = new row49Struct();
				WeeklyStruct Weekly = new WeeklyStruct();
				row96Struct row96 = new row96Struct();
				row97Struct row97 = new row97Struct();
				tMap_29_MainStruct tMap_29_Main = new tMap_29_MainStruct();
				tMap_29_MainStruct row98 = tMap_29_Main;
				out30Struct out30 = new out30Struct();
				row99Struct row99 = new row99Struct();
				row100Struct row100 = new row100Struct();

				/**
				 * [tAggregateRow_6_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_6_AGGOUT", false);
				start_Hash.put("tAggregateRow_6_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_6";

				currentComponent = "tAggregateRow_6_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row45");
				}

				int tos_count_tAggregateRow_6_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_6 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_6 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_6 utilClass_tAggregateRow_6 = new UtilClass_tAggregateRow_6();

				class AggOperationStruct_tAggregateRow_6 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String YEAR_NUM;
					String MONTH_OF_YEAR;
					String WEEK_OF_YEAR;
					String Is_weekly;
					String BU;
					String SUB_BU;
					BigDecimal Score_sum;
					int count = 0;
					int Weight_clmCount = 0;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

							result = prime * result
									+ ((this.MONTH_OF_YEAR == null) ? 0 : this.MONTH_OF_YEAR.hashCode());

							result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

							result = prime * result + ((this.Is_weekly == null) ? 0 : this.Is_weekly.hashCode());

							result = prime * result + ((this.BU == null) ? 0 : this.BU.hashCode());

							result = prime * result + ((this.SUB_BU == null) ? 0 : this.SUB_BU.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_6 other = (AggOperationStruct_tAggregateRow_6) obj;

						if (this.YEAR_NUM == null) {
							if (other.YEAR_NUM != null)
								return false;
						} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))
							return false;

						if (this.MONTH_OF_YEAR == null) {
							if (other.MONTH_OF_YEAR != null)
								return false;
						} else if (!this.MONTH_OF_YEAR.equals(other.MONTH_OF_YEAR))
							return false;

						if (this.WEEK_OF_YEAR == null) {
							if (other.WEEK_OF_YEAR != null)
								return false;
						} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))
							return false;

						if (this.Is_weekly == null) {
							if (other.Is_weekly != null)
								return false;
						} else if (!this.Is_weekly.equals(other.Is_weekly))
							return false;

						if (this.BU == null) {
							if (other.BU != null)
								return false;
						} else if (!this.BU.equals(other.BU))
							return false;

						if (this.SUB_BU == null) {
							if (other.SUB_BU != null)
								return false;
						} else if (!this.SUB_BU.equals(other.SUB_BU))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_6 operation_result_tAggregateRow_6 = null;
				AggOperationStruct_tAggregateRow_6 operation_finder_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();
				java.util.Map<AggOperationStruct_tAggregateRow_6, AggOperationStruct_tAggregateRow_6> hash_tAggregateRow_6 = new java.util.HashMap<AggOperationStruct_tAggregateRow_6, AggOperationStruct_tAggregateRow_6>();

				/**
				 * [tAggregateRow_6_AGGOUT begin ] stop
				 */

				/**
				 * [tFilterRow_3 begin ] start
				 */

				ok_Hash.put("tFilterRow_3", false);
				start_Hash.put("tFilterRow_3", System.currentTimeMillis());

				currentComponent = "tFilterRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row28");
				}

				int tos_count_tFilterRow_3 = 0;

				int nb_line_tFilterRow_3 = 0;
				int nb_line_ok_tFilterRow_3 = 0;
				int nb_line_reject_tFilterRow_3 = 0;

				class Operator_tFilterRow_3 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_3(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_3 begin ] stop
				 */

				/**
				 * [tHashInput_20 begin ] start
				 */

				ok_Hash.put("tHashInput_20", false);
				start_Hash.put("tHashInput_20", System.currentTimeMillis());

				currentComponent = "tHashInput_20";

				int tos_count_tHashInput_20 = 0;

				int nb_line_tHashInput_20 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_20 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row93Struct> tHashFile_tHashInput_20 = mf_tHashInput_20
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_26");
				if (tHashFile_tHashInput_20 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row93Struct> iterator_tHashInput_20 = tHashFile_tHashInput_20.iterator();
				while (iterator_tHashInput_20.hasNext()) {
					row93Struct next_tHashInput_20 = iterator_tHashInput_20.next();

					row28.YEAR_NUM = next_tHashInput_20.YEAR_NUM;
					row28.MONTH_OF_YEAR = next_tHashInput_20.MONTH_OF_YEAR;
					row28.KPI_ID = next_tHashInput_20.KPI_ID;
					row28.FREQUENCY = next_tHashInput_20.FREQUENCY;
					row28.WEEK_OF_YEAR = next_tHashInput_20.WEEK_OF_YEAR;
					row28.Is_weekly = next_tHashInput_20.Is_weekly;
					row28.BU = next_tHashInput_20.BU;
					row28.KPI_DESC = next_tHashInput_20.KPI_DESC;
					row28.Weight = next_tHashInput_20.Weight;
					row28.Month_Differnece = next_tHashInput_20.Month_Differnece;
					row28.Angle_Of_KPI = next_tHashInput_20.Angle_Of_KPI;
					row28.Achieved = next_tHashInput_20.Achieved;
					row28.Distance = next_tHashInput_20.Distance;
					row28.Weight_Disc = next_tHashInput_20.Weight_Disc;
					row28.Total_BU = next_tHashInput_20.Total_BU;
					row28.Score = next_tHashInput_20.Score;
					row28.Cluster_ID = next_tHashInput_20.Cluster_ID;
					row28.SUB_BU = next_tHashInput_20.SUB_BU;
					row28.Title = next_tHashInput_20.Title;
					row28.JS = next_tHashInput_20.JS;

					/**
					 * [tHashInput_20 begin ] stop
					 */

					/**
					 * [tHashInput_20 main ] start
					 */

					currentComponent = "tHashInput_20";

					tos_count_tHashInput_20++;

					/**
					 * [tHashInput_20 main ] stop
					 */

					/**
					 * [tHashInput_20 process_data_begin ] start
					 */

					currentComponent = "tHashInput_20";

					/**
					 * [tHashInput_20 process_data_begin ] stop
					 */

					/**
					 * [tFilterRow_3 main ] start
					 */

					currentComponent = "tFilterRow_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row28");
					}

					row45 = null;
					Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
					ope_tFilterRow_3.matches((row28.BU == null ? false : row28.BU.matches("STC") != true),
							" BU.matches(\"STC\") != true failed");

					if (ope_tFilterRow_3.getMatchFlag()) {
						if (row45 == null) {
							row45 = new row45Struct();
						}
						row45.YEAR_NUM = row28.YEAR_NUM;
						row45.MONTH_OF_YEAR = row28.MONTH_OF_YEAR;
						row45.KPI_ID = row28.KPI_ID;
						row45.FREQUENCY = row28.FREQUENCY;
						row45.WEEK_OF_YEAR = row28.WEEK_OF_YEAR;
						row45.Is_weekly = row28.Is_weekly;
						row45.BU = row28.BU;
						row45.KPI_DESC = row28.KPI_DESC;
						row45.Weight = row28.Weight;
						row45.Month_Differnece = row28.Month_Differnece;
						row45.Angle_Of_KPI = row28.Angle_Of_KPI;
						row45.Achieved = row28.Achieved;
						row45.Distance = row28.Distance;
						row45.Weight_Disc = row28.Weight_Disc;
						row45.Total_BU = row28.Total_BU;
						row45.Score = row28.Score;
						row45.Cluster_ID = row28.Cluster_ID;
						row45.SUB_BU = row28.SUB_BU;
						row45.Title = row28.Title;
						row45.JS = row28.JS;
						nb_line_ok_tFilterRow_3++;
					} else {
						nb_line_reject_tFilterRow_3++;
					}

					nb_line_tFilterRow_3++;

					tos_count_tFilterRow_3++;

					/**
					 * [tFilterRow_3 main ] stop
					 */

					/**
					 * [tFilterRow_3 process_data_begin ] start
					 */

					currentComponent = "tFilterRow_3";

					/**
					 * [tFilterRow_3 process_data_begin ] stop
					 */
// Start of branch "row45"
					if (row45 != null) {

						/**
						 * [tAggregateRow_6_AGGOUT main ] start
						 */

						currentVirtualComponent = "tAggregateRow_6";

						currentComponent = "tAggregateRow_6_AGGOUT";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row45");
						}

						operation_finder_tAggregateRow_6.YEAR_NUM = row45.YEAR_NUM;
						operation_finder_tAggregateRow_6.MONTH_OF_YEAR = row45.MONTH_OF_YEAR;
						operation_finder_tAggregateRow_6.WEEK_OF_YEAR = row45.WEEK_OF_YEAR;
						operation_finder_tAggregateRow_6.Is_weekly = row45.Is_weekly;
						operation_finder_tAggregateRow_6.BU = row45.BU;
						operation_finder_tAggregateRow_6.SUB_BU = row45.SUB_BU;

						operation_finder_tAggregateRow_6.hashCodeDirty = true;

						operation_result_tAggregateRow_6 = hash_tAggregateRow_6.get(operation_finder_tAggregateRow_6);

						if (operation_result_tAggregateRow_6 == null) { // G_OutMain_AggR_001

							operation_result_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();

							operation_result_tAggregateRow_6.YEAR_NUM = operation_finder_tAggregateRow_6.YEAR_NUM;
							operation_result_tAggregateRow_6.MONTH_OF_YEAR = operation_finder_tAggregateRow_6.MONTH_OF_YEAR;
							operation_result_tAggregateRow_6.WEEK_OF_YEAR = operation_finder_tAggregateRow_6.WEEK_OF_YEAR;
							operation_result_tAggregateRow_6.Is_weekly = operation_finder_tAggregateRow_6.Is_weekly;
							operation_result_tAggregateRow_6.BU = operation_finder_tAggregateRow_6.BU;
							operation_result_tAggregateRow_6.SUB_BU = operation_finder_tAggregateRow_6.SUB_BU;

							hash_tAggregateRow_6.put(operation_result_tAggregateRow_6,
									operation_result_tAggregateRow_6);

						} // G_OutMain_AggR_001

						if (row45.Score != null) { // G_OutMain_AggR_546

							if (operation_result_tAggregateRow_6.Score_sum == null) {
								operation_result_tAggregateRow_6.Score_sum = new BigDecimal(0);
							}
							operation_result_tAggregateRow_6.Score_sum = operation_result_tAggregateRow_6.Score_sum
									.add(new BigDecimal(String.valueOf(row45.Score)));

						} // G_OutMain_AggR_546

						if (row45.Weight != null) { // G_OutMain_AggR_546

							operation_result_tAggregateRow_6.Weight_clmCount++;
							operation_result_tAggregateRow_6.count++;

						} // G_OutMain_AggR_546

						tos_count_tAggregateRow_6_AGGOUT++;

						/**
						 * [tAggregateRow_6_AGGOUT main ] stop
						 */

						/**
						 * [tAggregateRow_6_AGGOUT process_data_begin ] start
						 */

						currentVirtualComponent = "tAggregateRow_6";

						currentComponent = "tAggregateRow_6_AGGOUT";

						/**
						 * [tAggregateRow_6_AGGOUT process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_6_AGGOUT process_data_end ] start
						 */

						currentVirtualComponent = "tAggregateRow_6";

						currentComponent = "tAggregateRow_6_AGGOUT";

						/**
						 * [tAggregateRow_6_AGGOUT process_data_end ] stop
						 */

					} // End of branch "row45"

					/**
					 * [tFilterRow_3 process_data_end ] start
					 */

					currentComponent = "tFilterRow_3";

					/**
					 * [tFilterRow_3 process_data_end ] stop
					 */

					/**
					 * [tHashInput_20 process_data_end ] start
					 */

					currentComponent = "tHashInput_20";

					/**
					 * [tHashInput_20 process_data_end ] stop
					 */

					/**
					 * [tHashInput_20 end ] start
					 */

					currentComponent = "tHashInput_20";

					nb_line_tHashInput_20++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_26");

				globalMap.put("tHashInput_20_NB_LINE", nb_line_tHashInput_20);

				ok_Hash.put("tHashInput_20", true);
				end_Hash.put("tHashInput_20", System.currentTimeMillis());

				/**
				 * [tHashInput_20 end ] stop
				 */

				/**
				 * [tFilterRow_3 end ] start
				 */

				currentComponent = "tFilterRow_3";

				globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row28");
				}

				ok_Hash.put("tFilterRow_3", true);
				end_Hash.put("tFilterRow_3", System.currentTimeMillis());

				/**
				 * [tFilterRow_3 end ] stop
				 */

				/**
				 * [tAggregateRow_6_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_6";

				currentComponent = "tAggregateRow_6_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row45");
				}

				ok_Hash.put("tAggregateRow_6_AGGOUT", true);
				end_Hash.put("tAggregateRow_6_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_6_AGGOUT end ] stop
				 */

				/**
				 * [tAggregateRow_8_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_8_AGGOUT", false);
				start_Hash.put("tAggregateRow_8_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_8";

				currentComponent = "tAggregateRow_8_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Monthly");
				}

				int tos_count_tAggregateRow_8_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_8 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_8 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_8 utilClass_tAggregateRow_8 = new UtilClass_tAggregateRow_8();

				class AggOperationStruct_tAggregateRow_8 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String YEAR_NUM;
					String MONTH_OF_YEAR;
					String BU;
					String WEEK_OF_YEAR;
					BigDecimal Score_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

							result = prime * result
									+ ((this.MONTH_OF_YEAR == null) ? 0 : this.MONTH_OF_YEAR.hashCode());

							result = prime * result + ((this.BU == null) ? 0 : this.BU.hashCode());

							result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_8 other = (AggOperationStruct_tAggregateRow_8) obj;

						if (this.YEAR_NUM == null) {
							if (other.YEAR_NUM != null)
								return false;
						} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))
							return false;

						if (this.MONTH_OF_YEAR == null) {
							if (other.MONTH_OF_YEAR != null)
								return false;
						} else if (!this.MONTH_OF_YEAR.equals(other.MONTH_OF_YEAR))
							return false;

						if (this.BU == null) {
							if (other.BU != null)
								return false;
						} else if (!this.BU.equals(other.BU))
							return false;

						if (this.WEEK_OF_YEAR == null) {
							if (other.WEEK_OF_YEAR != null)
								return false;
						} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_8 operation_result_tAggregateRow_8 = null;
				AggOperationStruct_tAggregateRow_8 operation_finder_tAggregateRow_8 = new AggOperationStruct_tAggregateRow_8();
				java.util.Map<AggOperationStruct_tAggregateRow_8, AggOperationStruct_tAggregateRow_8> hash_tAggregateRow_8 = new java.util.HashMap<AggOperationStruct_tAggregateRow_8, AggOperationStruct_tAggregateRow_8>();

				/**
				 * [tAggregateRow_8_AGGOUT begin ] stop
				 */

				/**
				 * [tAggregateRow_11_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_11_AGGOUT", false);
				start_Hash.put("tAggregateRow_11_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_11";

				currentComponent = "tAggregateRow_11_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row96");
				}

				int tos_count_tAggregateRow_11_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_11 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_11 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_11 utilClass_tAggregateRow_11 = new UtilClass_tAggregateRow_11();

				class AggOperationStruct_tAggregateRow_11 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String YEAR_NUM;
					String MONTH_OF_YEAR;
					String BU;
					String WEEK_OF_YEAR;
					BigDecimal Score_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

							result = prime * result
									+ ((this.MONTH_OF_YEAR == null) ? 0 : this.MONTH_OF_YEAR.hashCode());

							result = prime * result + ((this.BU == null) ? 0 : this.BU.hashCode());

							result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_11 other = (AggOperationStruct_tAggregateRow_11) obj;

						if (this.YEAR_NUM == null) {
							if (other.YEAR_NUM != null)
								return false;
						} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))
							return false;

						if (this.MONTH_OF_YEAR == null) {
							if (other.MONTH_OF_YEAR != null)
								return false;
						} else if (!this.MONTH_OF_YEAR.equals(other.MONTH_OF_YEAR))
							return false;

						if (this.BU == null) {
							if (other.BU != null)
								return false;
						} else if (!this.BU.equals(other.BU))
							return false;

						if (this.WEEK_OF_YEAR == null) {
							if (other.WEEK_OF_YEAR != null)
								return false;
						} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_11 operation_result_tAggregateRow_11 = null;
				AggOperationStruct_tAggregateRow_11 operation_finder_tAggregateRow_11 = new AggOperationStruct_tAggregateRow_11();
				java.util.Map<AggOperationStruct_tAggregateRow_11, AggOperationStruct_tAggregateRow_11> hash_tAggregateRow_11 = new java.util.HashMap<AggOperationStruct_tAggregateRow_11, AggOperationStruct_tAggregateRow_11>();

				/**
				 * [tAggregateRow_11_AGGOUT begin ] stop
				 */

				/**
				 * [tFilterRow_7 begin ] start
				 */

				ok_Hash.put("tFilterRow_7", false);
				start_Hash.put("tFilterRow_7", System.currentTimeMillis());

				currentComponent = "tFilterRow_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Weekly");
				}

				int tos_count_tFilterRow_7 = 0;

				int nb_line_tFilterRow_7 = 0;
				int nb_line_ok_tFilterRow_7 = 0;
				int nb_line_reject_tFilterRow_7 = 0;

				class Operator_tFilterRow_7 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_7(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_7 begin ] stop
				 */

				/**
				 * [tReplicate_2 begin ] start
				 */

				ok_Hash.put("tReplicate_2", false);
				start_Hash.put("tReplicate_2", System.currentTimeMillis());

				currentComponent = "tReplicate_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out13");
				}

				int tos_count_tReplicate_2 = 0;

				/**
				 * [tReplicate_2 begin ] stop
				 */

				/**
				 * [tMap_15 begin ] start
				 */

				ok_Hash.put("tMap_15", false);
				start_Hash.put("tMap_15", System.currentTimeMillis());

				currentComponent = "tMap_15";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row41");
				}

				int tos_count_tMap_15 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_15__Struct {
				}
				Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out13Struct out13_tmp = new out13Struct();
// ###############################

				/**
				 * [tMap_15 begin ] stop
				 */

				/**
				 * [tAggregateRow_6_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_6_AGGIN", false);
				start_Hash.put("tAggregateRow_6_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_6";

				currentComponent = "tAggregateRow_6_AGGIN";

				int tos_count_tAggregateRow_6_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_6> values_tAggregateRow_6 = hash_tAggregateRow_6
						.values();

				globalMap.put("tAggregateRow_6_NB_LINE", values_tAggregateRow_6.size());

				for (AggOperationStruct_tAggregateRow_6 aggregated_row_tAggregateRow_6 : values_tAggregateRow_6) { // G_AggR_600

					/**
					 * [tAggregateRow_6_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_6_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_6";

					currentComponent = "tAggregateRow_6_AGGIN";

					row41.YEAR_NUM = aggregated_row_tAggregateRow_6.YEAR_NUM;

					row41.MONTH_OF_YEAR = aggregated_row_tAggregateRow_6.MONTH_OF_YEAR;

					row41.BU = aggregated_row_tAggregateRow_6.BU;

					row41.WEEK_OF_YEAR = aggregated_row_tAggregateRow_6.WEEK_OF_YEAR;
					row41.Weight = (double) aggregated_row_tAggregateRow_6.count;
					row41.Weight = (double) aggregated_row_tAggregateRow_6.Weight_clmCount;

					if (aggregated_row_tAggregateRow_6.Score_sum != null) {
						row41.Score = aggregated_row_tAggregateRow_6.Score_sum.doubleValue();

					} else {

						row41.Score = null;

					}

					row41.SUB_BU = aggregated_row_tAggregateRow_6.SUB_BU;

					row41.Is_weekly = aggregated_row_tAggregateRow_6.Is_weekly;

					tos_count_tAggregateRow_6_AGGIN++;

					/**
					 * [tAggregateRow_6_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_6_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_6";

					currentComponent = "tAggregateRow_6_AGGIN";

					/**
					 * [tAggregateRow_6_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tMap_15 main ] start
					 */

					currentComponent = "tMap_15";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row41");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_15 = false;
					boolean mainRowRejected_tMap_15 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
						// ###############################
						// # Output tables

						out13 = null;

// # Output table : 'out13'
						out13_tmp.YEAR_NUM = row41.YEAR_NUM;
						out13_tmp.MONTH_OF_YEAR = row41.MONTH_OF_YEAR;
						out13_tmp.BU = row41.BU;
						out13_tmp.KPI_ID = row41.KPI_ID;
						out13_tmp.FREQUENCY = row41.FREQUENCY;
						out13_tmp.WEEK_OF_YEAR = row41.WEEK_OF_YEAR;
						out13_tmp.KPI_DESC = row41.KPI_DESC;
						out13_tmp.Weight = row41.Weight;
						out13_tmp.JS = row41.JS;
						out13_tmp.Month_Differnece = row41.Month_Differnece;
						out13_tmp.Angle_Of_KPI = row41.Angle_Of_KPI;
						out13_tmp.Achieved = row41.Achieved;
						out13_tmp.Distance = row41.Distance;
						out13_tmp.Weight_Disc = row41.Weight_Disc;
						out13_tmp.Total_BU = row41.Total_BU;
						out13_tmp.Title = row41.Title;
						out13_tmp.Score = row41.SUB_BU.equals("Gov") ? row41.Score * 0.59
								: row41.SUB_BU.equals("Non-Gov") ? row41.Score * 0.41 : row41.Score;
						out13_tmp.Cluster_ID = row41.Cluster_ID;
						out13_tmp.SUB_BU = row41.SUB_BU;
						out13_tmp.Is_weekly = row41.Is_weekly;
						out13 = out13_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_15 = false;

					tos_count_tMap_15++;

					/**
					 * [tMap_15 main ] stop
					 */

					/**
					 * [tMap_15 process_data_begin ] start
					 */

					currentComponent = "tMap_15";

					/**
					 * [tMap_15 process_data_begin ] stop
					 */
// Start of branch "out13"
					if (out13 != null) {

						/**
						 * [tReplicate_2 main ] start
						 */

						currentComponent = "tReplicate_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "out13");
						}

						Monthly = new MonthlyStruct();

						Monthly.YEAR_NUM = out13.YEAR_NUM;
						Monthly.MONTH_OF_YEAR = out13.MONTH_OF_YEAR;
						Monthly.BU = out13.BU;
						Monthly.KPI_ID = out13.KPI_ID;
						Monthly.FREQUENCY = out13.FREQUENCY;
						Monthly.WEEK_OF_YEAR = out13.WEEK_OF_YEAR;
						Monthly.KPI_DESC = out13.KPI_DESC;
						Monthly.Weight = out13.Weight;
						Monthly.JS = out13.JS;
						Monthly.Month_Differnece = out13.Month_Differnece;
						Monthly.Angle_Of_KPI = out13.Angle_Of_KPI;
						Monthly.Achieved = out13.Achieved;
						Monthly.Distance = out13.Distance;
						Monthly.Weight_Disc = out13.Weight_Disc;
						Monthly.Total_BU = out13.Total_BU;
						Monthly.Title = out13.Title;
						Monthly.Score = out13.Score;
						Monthly.Cluster_ID = out13.Cluster_ID;
						Monthly.SUB_BU = out13.SUB_BU;
						Monthly.Is_weekly = out13.Is_weekly;
						Weekly = new WeeklyStruct();

						Weekly.YEAR_NUM = out13.YEAR_NUM;
						Weekly.MONTH_OF_YEAR = out13.MONTH_OF_YEAR;
						Weekly.BU = out13.BU;
						Weekly.KPI_ID = out13.KPI_ID;
						Weekly.FREQUENCY = out13.FREQUENCY;
						Weekly.WEEK_OF_YEAR = out13.WEEK_OF_YEAR;
						Weekly.KPI_DESC = out13.KPI_DESC;
						Weekly.Weight = out13.Weight;
						Weekly.JS = out13.JS;
						Weekly.Month_Differnece = out13.Month_Differnece;
						Weekly.Angle_Of_KPI = out13.Angle_Of_KPI;
						Weekly.Achieved = out13.Achieved;
						Weekly.Distance = out13.Distance;
						Weekly.Weight_Disc = out13.Weight_Disc;
						Weekly.Total_BU = out13.Total_BU;
						Weekly.Title = out13.Title;
						Weekly.Score = out13.Score;
						Weekly.Cluster_ID = out13.Cluster_ID;
						Weekly.SUB_BU = out13.SUB_BU;
						Weekly.Is_weekly = out13.Is_weekly;

						tos_count_tReplicate_2++;

						/**
						 * [tReplicate_2 main ] stop
						 */

						/**
						 * [tReplicate_2 process_data_begin ] start
						 */

						currentComponent = "tReplicate_2";

						/**
						 * [tReplicate_2 process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_8_AGGOUT main ] start
						 */

						currentVirtualComponent = "tAggregateRow_8";

						currentComponent = "tAggregateRow_8_AGGOUT";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "Monthly");
						}

						operation_finder_tAggregateRow_8.YEAR_NUM = Monthly.YEAR_NUM;
						operation_finder_tAggregateRow_8.MONTH_OF_YEAR = Monthly.MONTH_OF_YEAR;
						operation_finder_tAggregateRow_8.BU = Monthly.BU;
						operation_finder_tAggregateRow_8.WEEK_OF_YEAR = Monthly.WEEK_OF_YEAR;

						operation_finder_tAggregateRow_8.hashCodeDirty = true;

						operation_result_tAggregateRow_8 = hash_tAggregateRow_8.get(operation_finder_tAggregateRow_8);

						if (operation_result_tAggregateRow_8 == null) { // G_OutMain_AggR_001

							operation_result_tAggregateRow_8 = new AggOperationStruct_tAggregateRow_8();

							operation_result_tAggregateRow_8.YEAR_NUM = operation_finder_tAggregateRow_8.YEAR_NUM;
							operation_result_tAggregateRow_8.MONTH_OF_YEAR = operation_finder_tAggregateRow_8.MONTH_OF_YEAR;
							operation_result_tAggregateRow_8.BU = operation_finder_tAggregateRow_8.BU;
							operation_result_tAggregateRow_8.WEEK_OF_YEAR = operation_finder_tAggregateRow_8.WEEK_OF_YEAR;

							hash_tAggregateRow_8.put(operation_result_tAggregateRow_8,
									operation_result_tAggregateRow_8);

						} // G_OutMain_AggR_001

						if (operation_result_tAggregateRow_8.Score_sum == null) {
							operation_result_tAggregateRow_8.Score_sum = new BigDecimal(0);
						}
						operation_result_tAggregateRow_8.Score_sum = operation_result_tAggregateRow_8.Score_sum
								.add(new BigDecimal(String.valueOf(Monthly.Score)));

						tos_count_tAggregateRow_8_AGGOUT++;

						/**
						 * [tAggregateRow_8_AGGOUT main ] stop
						 */

						/**
						 * [tAggregateRow_8_AGGOUT process_data_begin ] start
						 */

						currentVirtualComponent = "tAggregateRow_8";

						currentComponent = "tAggregateRow_8_AGGOUT";

						/**
						 * [tAggregateRow_8_AGGOUT process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_8_AGGOUT process_data_end ] start
						 */

						currentVirtualComponent = "tAggregateRow_8";

						currentComponent = "tAggregateRow_8_AGGOUT";

						/**
						 * [tAggregateRow_8_AGGOUT process_data_end ] stop
						 */

						/**
						 * [tFilterRow_7 main ] start
						 */

						currentComponent = "tFilterRow_7";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "Weekly");
						}

						row96 = null;
						Operator_tFilterRow_7 ope_tFilterRow_7 = new Operator_tFilterRow_7("&&");
						ope_tFilterRow_7.matches(
								(Weekly.Is_weekly == null ? false : Weekly.Is_weekly.matches("Yes") == true),
								" Is_weekly.matches(\"Yes\") == true failed");

						if (ope_tFilterRow_7.getMatchFlag()) {
							if (row96 == null) {
								row96 = new row96Struct();
							}
							row96.YEAR_NUM = Weekly.YEAR_NUM;
							row96.MONTH_OF_YEAR = Weekly.MONTH_OF_YEAR;
							row96.BU = Weekly.BU;
							row96.KPI_ID = Weekly.KPI_ID;
							row96.FREQUENCY = Weekly.FREQUENCY;
							row96.WEEK_OF_YEAR = Weekly.WEEK_OF_YEAR;
							row96.KPI_DESC = Weekly.KPI_DESC;
							row96.Weight = Weekly.Weight;
							row96.JS = Weekly.JS;
							row96.Month_Differnece = Weekly.Month_Differnece;
							row96.Angle_Of_KPI = Weekly.Angle_Of_KPI;
							row96.Achieved = Weekly.Achieved;
							row96.Distance = Weekly.Distance;
							row96.Weight_Disc = Weekly.Weight_Disc;
							row96.Total_BU = Weekly.Total_BU;
							row96.Title = Weekly.Title;
							row96.Score = Weekly.Score;
							row96.Cluster_ID = Weekly.Cluster_ID;
							row96.SUB_BU = Weekly.SUB_BU;
							row96.Is_weekly = Weekly.Is_weekly;
							nb_line_ok_tFilterRow_7++;
						} else {
							nb_line_reject_tFilterRow_7++;
						}

						nb_line_tFilterRow_7++;

						tos_count_tFilterRow_7++;

						/**
						 * [tFilterRow_7 main ] stop
						 */

						/**
						 * [tFilterRow_7 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_7";

						/**
						 * [tFilterRow_7 process_data_begin ] stop
						 */
// Start of branch "row96"
						if (row96 != null) {

							/**
							 * [tAggregateRow_11_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_11";

							currentComponent = "tAggregateRow_11_AGGOUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row96");
							}

							operation_finder_tAggregateRow_11.YEAR_NUM = row96.YEAR_NUM;
							operation_finder_tAggregateRow_11.MONTH_OF_YEAR = row96.MONTH_OF_YEAR;
							operation_finder_tAggregateRow_11.BU = row96.BU;
							operation_finder_tAggregateRow_11.WEEK_OF_YEAR = row96.WEEK_OF_YEAR;

							operation_finder_tAggregateRow_11.hashCodeDirty = true;

							operation_result_tAggregateRow_11 = hash_tAggregateRow_11
									.get(operation_finder_tAggregateRow_11);

							if (operation_result_tAggregateRow_11 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_11 = new AggOperationStruct_tAggregateRow_11();

								operation_result_tAggregateRow_11.YEAR_NUM = operation_finder_tAggregateRow_11.YEAR_NUM;
								operation_result_tAggregateRow_11.MONTH_OF_YEAR = operation_finder_tAggregateRow_11.MONTH_OF_YEAR;
								operation_result_tAggregateRow_11.BU = operation_finder_tAggregateRow_11.BU;
								operation_result_tAggregateRow_11.WEEK_OF_YEAR = operation_finder_tAggregateRow_11.WEEK_OF_YEAR;

								hash_tAggregateRow_11.put(operation_result_tAggregateRow_11,
										operation_result_tAggregateRow_11);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_11.Score_sum == null) {
								operation_result_tAggregateRow_11.Score_sum = new BigDecimal(0);
							}
							operation_result_tAggregateRow_11.Score_sum = operation_result_tAggregateRow_11.Score_sum
									.add(new BigDecimal(String.valueOf(row96.Score)));

							tos_count_tAggregateRow_11_AGGOUT++;

							/**
							 * [tAggregateRow_11_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_11_AGGOUT process_data_begin ] start
							 */

							currentVirtualComponent = "tAggregateRow_11";

							currentComponent = "tAggregateRow_11_AGGOUT";

							/**
							 * [tAggregateRow_11_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_11_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_11";

							currentComponent = "tAggregateRow_11_AGGOUT";

							/**
							 * [tAggregateRow_11_AGGOUT process_data_end ] stop
							 */

						} // End of branch "row96"

						/**
						 * [tFilterRow_7 process_data_end ] start
						 */

						currentComponent = "tFilterRow_7";

						/**
						 * [tFilterRow_7 process_data_end ] stop
						 */

						/**
						 * [tReplicate_2 process_data_end ] start
						 */

						currentComponent = "tReplicate_2";

						/**
						 * [tReplicate_2 process_data_end ] stop
						 */

					} // End of branch "out13"

					/**
					 * [tMap_15 process_data_end ] start
					 */

					currentComponent = "tMap_15";

					/**
					 * [tMap_15 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_6_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_6";

					currentComponent = "tAggregateRow_6_AGGIN";

					/**
					 * [tAggregateRow_6_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_6_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_6";

					currentComponent = "tAggregateRow_6_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_6_AGGIN", true);
				end_Hash.put("tAggregateRow_6_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_6_AGGIN end ] stop
				 */

				/**
				 * [tMap_15 end ] start
				 */

				currentComponent = "tMap_15";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row41");
				}

				ok_Hash.put("tMap_15", true);
				end_Hash.put("tMap_15", System.currentTimeMillis());

				/**
				 * [tMap_15 end ] stop
				 */

				/**
				 * [tReplicate_2 end ] start
				 */

				currentComponent = "tReplicate_2";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out13");
				}

				ok_Hash.put("tReplicate_2", true);
				end_Hash.put("tReplicate_2", System.currentTimeMillis());

				/**
				 * [tReplicate_2 end ] stop
				 */

				/**
				 * [tAggregateRow_8_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_8";

				currentComponent = "tAggregateRow_8_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Monthly");
				}

				ok_Hash.put("tAggregateRow_8_AGGOUT", true);
				end_Hash.put("tAggregateRow_8_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_8_AGGOUT end ] stop
				 */

				/**
				 * [tAggregateRow_9_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_9_AGGOUT", false);
				start_Hash.put("tAggregateRow_9_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_9";

				currentComponent = "tAggregateRow_9_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out14");
				}

				int tos_count_tAggregateRow_9_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_9 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_9 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_9 utilClass_tAggregateRow_9 = new UtilClass_tAggregateRow_9();

				class AggOperationStruct_tAggregateRow_9 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String YEAR_NUM;
					String MONTH_OF_YEAR;
					String WEEK_OF_YEAR;
					StringBuilder Score_list = new StringBuilder();
					boolean Score_list_firstEmpty = false;
					StringBuilder BU_list = new StringBuilder();
					boolean BU_list_firstEmpty = false;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

							result = prime * result
									+ ((this.MONTH_OF_YEAR == null) ? 0 : this.MONTH_OF_YEAR.hashCode());

							result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_9 other = (AggOperationStruct_tAggregateRow_9) obj;

						if (this.YEAR_NUM == null) {
							if (other.YEAR_NUM != null)
								return false;
						} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))
							return false;

						if (this.MONTH_OF_YEAR == null) {
							if (other.MONTH_OF_YEAR != null)
								return false;
						} else if (!this.MONTH_OF_YEAR.equals(other.MONTH_OF_YEAR))
							return false;

						if (this.WEEK_OF_YEAR == null) {
							if (other.WEEK_OF_YEAR != null)
								return false;
						} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_9 operation_result_tAggregateRow_9 = null;
				AggOperationStruct_tAggregateRow_9 operation_finder_tAggregateRow_9 = new AggOperationStruct_tAggregateRow_9();
				java.util.Map<AggOperationStruct_tAggregateRow_9, AggOperationStruct_tAggregateRow_9> hash_tAggregateRow_9 = new java.util.HashMap<AggOperationStruct_tAggregateRow_9, AggOperationStruct_tAggregateRow_9>();

				String delimiter_tAggregateRow_9 = ",";

				/**
				 * [tAggregateRow_9_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_16 begin ] start
				 */

				ok_Hash.put("tMap_16", false);
				start_Hash.put("tMap_16", System.currentTimeMillis());

				currentComponent = "tMap_16";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row50");
				}

				int tos_count_tMap_16 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_16__Struct {
				}
				Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out14Struct out14_tmp = new out14Struct();
// ###############################

				/**
				 * [tMap_16 begin ] stop
				 */

				/**
				 * [tHashOutput_21 begin ] start
				 */

				ok_Hash.put("tHashOutput_21", false);
				start_Hash.put("tHashOutput_21", System.currentTimeMillis());

				currentComponent = "tHashOutput_21";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "tMap_20_Main");
				}

				int tos_count_tHashOutput_21 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_21 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tMap_20_MainStruct> tHashFile_tHashOutput_21 = null;
				String hashKey_tHashOutput_21 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_21";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_21)) {
					if (mf_tHashOutput_21.getResourceMap().get(hashKey_tHashOutput_21) == null) {
						mf_tHashOutput_21.getResourceMap().put(hashKey_tHashOutput_21,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tMap_20_MainStruct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_21 = mf_tHashOutput_21.getResourceMap().get(hashKey_tHashOutput_21);
					} else {
						tHashFile_tHashOutput_21 = mf_tHashOutput_21.getResourceMap().get(hashKey_tHashOutput_21);
					}
				}
				int nb_line_tHashOutput_21 = 0;

				/**
				 * [tHashOutput_21 begin ] stop
				 */

				/**
				 * [tMap_20 begin ] start
				 */

				ok_Hash.put("tMap_20", false);
				start_Hash.put("tMap_20", System.currentTimeMillis());

				currentComponent = "tMap_20";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row43");
				}

				int tos_count_tMap_20 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_20__Struct {
				}
				Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
// ###############################

// ###############################
// # Outputs initialization
				tMap_20_MainStruct tMap_20_Main_tmp = new tMap_20_MainStruct();
// ###############################

				/**
				 * [tMap_20 begin ] stop
				 */

				/**
				 * [tAggregateRow_8_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_8_AGGIN", false);
				start_Hash.put("tAggregateRow_8_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_8";

				currentComponent = "tAggregateRow_8_AGGIN";

				int tos_count_tAggregateRow_8_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_8> values_tAggregateRow_8 = hash_tAggregateRow_8
						.values();

				globalMap.put("tAggregateRow_8_NB_LINE", values_tAggregateRow_8.size());

				for (AggOperationStruct_tAggregateRow_8 aggregated_row_tAggregateRow_8 : values_tAggregateRow_8) { // G_AggR_600

					/**
					 * [tAggregateRow_8_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_8_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_8";

					currentComponent = "tAggregateRow_8_AGGIN";

					row43.YEAR_NUM = aggregated_row_tAggregateRow_8.YEAR_NUM;

					row43.MONTH_OF_YEAR = aggregated_row_tAggregateRow_8.MONTH_OF_YEAR;

					row43.WEEK_OF_YEAR = aggregated_row_tAggregateRow_8.WEEK_OF_YEAR;

					row43.BU = aggregated_row_tAggregateRow_8.BU;

					if (aggregated_row_tAggregateRow_8.Score_sum != null) {
						row43.Score = aggregated_row_tAggregateRow_8.Score_sum.doubleValue();

					} else {

						row43.Score = null;

					}

					tos_count_tAggregateRow_8_AGGIN++;

					/**
					 * [tAggregateRow_8_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_8_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_8";

					currentComponent = "tAggregateRow_8_AGGIN";

					/**
					 * [tAggregateRow_8_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tMap_20 main ] start
					 */

					currentComponent = "tMap_20";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row43");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_20 = false;
					boolean mainRowRejected_tMap_20 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
						// ###############################
						// # Output tables

						tMap_20_Main = null;

// # Output table : 'tMap_20_Main'
						tMap_20_Main_tmp.YEAR_NUM = row43.YEAR_NUM;
						tMap_20_Main_tmp.MONTH_OF_YEAR = row43.MONTH_OF_YEAR;
						tMap_20_Main_tmp.WEEK_OF_YEAR = row43.WEEK_OF_YEAR;
						tMap_20_Main_tmp.BU = row43.BU;
						tMap_20_Main_tmp.Score = (double) (Math.round(row43.Score * 100.00 * 100) / 100.00);
						tMap_20_Main = tMap_20_Main_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_20 = false;

					tos_count_tMap_20++;

					/**
					 * [tMap_20 main ] stop
					 */

					/**
					 * [tMap_20 process_data_begin ] start
					 */

					currentComponent = "tMap_20";

					/**
					 * [tMap_20 process_data_begin ] stop
					 */
// Start of branch "tMap_20_Main"
					if (tMap_20_Main != null) {

						/**
						 * [tHashOutput_21 main ] start
						 */

						currentComponent = "tHashOutput_21";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "tMap_20_Main");
						}

						tMap_20_MainStruct oneRow_tHashOutput_21 = new tMap_20_MainStruct();

						oneRow_tHashOutput_21.YEAR_NUM = tMap_20_Main.YEAR_NUM;
						oneRow_tHashOutput_21.MONTH_OF_YEAR = tMap_20_Main.MONTH_OF_YEAR;
						oneRow_tHashOutput_21.WEEK_OF_YEAR = tMap_20_Main.WEEK_OF_YEAR;
						oneRow_tHashOutput_21.BU = tMap_20_Main.BU;
						oneRow_tHashOutput_21.Score = tMap_20_Main.Score;

						tHashFile_tHashOutput_21.put(oneRow_tHashOutput_21);
						nb_line_tHashOutput_21++;

						row50 = tMap_20_Main;

						tos_count_tHashOutput_21++;

						/**
						 * [tHashOutput_21 main ] stop
						 */

						/**
						 * [tHashOutput_21 process_data_begin ] start
						 */

						currentComponent = "tHashOutput_21";

						/**
						 * [tHashOutput_21 process_data_begin ] stop
						 */

						/**
						 * [tMap_16 main ] start
						 */

						currentComponent = "tMap_16";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row50");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_16 = false;
						boolean mainRowRejected_tMap_16 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
							// ###############################
							// # Output tables

							out14 = null;

// # Output table : 'out14'
							out14_tmp.YEAR_NUM = row50.YEAR_NUM;
							out14_tmp.MONTH_OF_YEAR = row50.MONTH_OF_YEAR;
							out14_tmp.WEEK_OF_YEAR = row50.WEEK_OF_YEAR;
							out14_tmp.BU = row50.BU;
							out14_tmp.Score = row50.Score + "";
							out14 = out14_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_16 = false;

						tos_count_tMap_16++;

						/**
						 * [tMap_16 main ] stop
						 */

						/**
						 * [tMap_16 process_data_begin ] start
						 */

						currentComponent = "tMap_16";

						/**
						 * [tMap_16 process_data_begin ] stop
						 */
// Start of branch "out14"
						if (out14 != null) {

							/**
							 * [tAggregateRow_9_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_9";

							currentComponent = "tAggregateRow_9_AGGOUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out14");
							}

							operation_finder_tAggregateRow_9.YEAR_NUM = out14.YEAR_NUM;
							operation_finder_tAggregateRow_9.MONTH_OF_YEAR = out14.MONTH_OF_YEAR;
							operation_finder_tAggregateRow_9.WEEK_OF_YEAR = out14.WEEK_OF_YEAR;

							operation_finder_tAggregateRow_9.hashCodeDirty = true;

							operation_result_tAggregateRow_9 = hash_tAggregateRow_9
									.get(operation_finder_tAggregateRow_9);

							if (operation_result_tAggregateRow_9 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_9 = new AggOperationStruct_tAggregateRow_9();

								operation_result_tAggregateRow_9.YEAR_NUM = operation_finder_tAggregateRow_9.YEAR_NUM;
								operation_result_tAggregateRow_9.MONTH_OF_YEAR = operation_finder_tAggregateRow_9.MONTH_OF_YEAR;
								operation_result_tAggregateRow_9.WEEK_OF_YEAR = operation_finder_tAggregateRow_9.WEEK_OF_YEAR;

								hash_tAggregateRow_9.put(operation_result_tAggregateRow_9,
										operation_result_tAggregateRow_9);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_9.Score_list.length() > 0) {
								operation_result_tAggregateRow_9.Score_list.append(",");
							} else if (operation_result_tAggregateRow_9.Score_list_firstEmpty) {
								operation_result_tAggregateRow_9.Score_list.append(",");
							}
							if (operation_result_tAggregateRow_9.Score_list != null) {
								if (operation_result_tAggregateRow_9.Score_list_firstEmpty == false
										&& ("").equals(String.valueOf(out14.Score))) {
									operation_result_tAggregateRow_9.Score_list_firstEmpty = true;
								}
								operation_result_tAggregateRow_9.Score_list = operation_result_tAggregateRow_9.Score_list
										.append(String.valueOf(out14.Score));
							}

							if (operation_result_tAggregateRow_9.BU_list.length() > 0) {
								operation_result_tAggregateRow_9.BU_list.append(",");
							} else if (operation_result_tAggregateRow_9.BU_list_firstEmpty) {
								operation_result_tAggregateRow_9.BU_list.append(",");
							}
							if (operation_result_tAggregateRow_9.BU_list != null) {
								if (operation_result_tAggregateRow_9.BU_list_firstEmpty == false
										&& ("").equals(String.valueOf(out14.BU))) {
									operation_result_tAggregateRow_9.BU_list_firstEmpty = true;
								}
								operation_result_tAggregateRow_9.BU_list = operation_result_tAggregateRow_9.BU_list
										.append(String.valueOf(out14.BU));
							}

							tos_count_tAggregateRow_9_AGGOUT++;

							/**
							 * [tAggregateRow_9_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_9_AGGOUT process_data_begin ] start
							 */

							currentVirtualComponent = "tAggregateRow_9";

							currentComponent = "tAggregateRow_9_AGGOUT";

							/**
							 * [tAggregateRow_9_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_9_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_9";

							currentComponent = "tAggregateRow_9_AGGOUT";

							/**
							 * [tAggregateRow_9_AGGOUT process_data_end ] stop
							 */

						} // End of branch "out14"

						/**
						 * [tMap_16 process_data_end ] start
						 */

						currentComponent = "tMap_16";

						/**
						 * [tMap_16 process_data_end ] stop
						 */

						/**
						 * [tHashOutput_21 process_data_end ] start
						 */

						currentComponent = "tHashOutput_21";

						/**
						 * [tHashOutput_21 process_data_end ] stop
						 */

					} // End of branch "tMap_20_Main"

					/**
					 * [tMap_20 process_data_end ] start
					 */

					currentComponent = "tMap_20";

					/**
					 * [tMap_20 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_8_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_8";

					currentComponent = "tAggregateRow_8_AGGIN";

					/**
					 * [tAggregateRow_8_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_8_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_8";

					currentComponent = "tAggregateRow_8_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_8_AGGIN", true);
				end_Hash.put("tAggregateRow_8_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_8_AGGIN end ] stop
				 */

				/**
				 * [tMap_20 end ] start
				 */

				currentComponent = "tMap_20";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row43");
				}

				ok_Hash.put("tMap_20", true);
				end_Hash.put("tMap_20", System.currentTimeMillis());

				/**
				 * [tMap_20 end ] stop
				 */

				/**
				 * [tHashOutput_21 end ] start
				 */

				currentComponent = "tHashOutput_21";

				globalMap.put("tHashOutput_21_NB_LINE", nb_line_tHashOutput_21);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "tMap_20_Main");
				}

				ok_Hash.put("tHashOutput_21", true);
				end_Hash.put("tHashOutput_21", System.currentTimeMillis());

				/**
				 * [tHashOutput_21 end ] stop
				 */

				/**
				 * [tMap_16 end ] start
				 */

				currentComponent = "tMap_16";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row50");
				}

				ok_Hash.put("tMap_16", true);
				end_Hash.put("tMap_16", System.currentTimeMillis());

				/**
				 * [tMap_16 end ] stop
				 */

				/**
				 * [tAggregateRow_9_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_9";

				currentComponent = "tAggregateRow_9_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out14");
				}

				ok_Hash.put("tAggregateRow_9_AGGOUT", true);
				end_Hash.put("tAggregateRow_9_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_9_AGGOUT end ] stop
				 */

				/**
				 * [tHashOutput_20 begin ] start
				 */

				ok_Hash.put("tHashOutput_20", false);
				start_Hash.put("tHashOutput_20", System.currentTimeMillis());

				currentComponent = "tHashOutput_20";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row49");
				}

				int tos_count_tHashOutput_20 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_20 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tMap_20_MainStruct> tHashFile_tHashOutput_20 = null;
				// use this map to keep the present key and the previous key of
				// AdvancedMemoryHashFile
				mf_tHashOutput_20.getKeyMap().put("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_20",
						"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_21");
				int nb_line_tHashOutput_20 = 0;

				/**
				 * [tHashOutput_20 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row48");
				}

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tAggregateRow_9_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_9_AGGIN", false);
				start_Hash.put("tAggregateRow_9_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_9";

				currentComponent = "tAggregateRow_9_AGGIN";

				int tos_count_tAggregateRow_9_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_9> values_tAggregateRow_9 = hash_tAggregateRow_9
						.values();

				globalMap.put("tAggregateRow_9_NB_LINE", values_tAggregateRow_9.size());

				for (AggOperationStruct_tAggregateRow_9 aggregated_row_tAggregateRow_9 : values_tAggregateRow_9) { // G_AggR_600

					/**
					 * [tAggregateRow_9_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_9_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_9";

					currentComponent = "tAggregateRow_9_AGGIN";

					row48.YEAR_NUM = aggregated_row_tAggregateRow_9.YEAR_NUM;

					row48.MONTH_OF_YEAR = aggregated_row_tAggregateRow_9.MONTH_OF_YEAR;

					row48.WEEK_OF_YEAR = aggregated_row_tAggregateRow_9.WEEK_OF_YEAR;

					row48.BU = aggregated_row_tAggregateRow_9.BU_list.toString();

					row48.Score = aggregated_row_tAggregateRow_9.Score_list.toString();

					tos_count_tAggregateRow_9_AGGIN++;

					/**
					 * [tAggregateRow_9_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_9_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_9";

					currentComponent = "tAggregateRow_9_AGGIN";

					/**
					 * [tAggregateRow_9_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tJavaRow_2 main ] start
					 */

					currentComponent = "tJavaRow_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row48");
					}

					String[] BUs = row48.BU.split(",");
					String[] Scores = row48.Score.split(",");

					double STC_Score = 0.0 * 100.0 / 100.0;
					for (int i = 0; i < Scores.length; i++) {
						if (BUs[i].equals("B2C")) {
							STC_Score += Double.parseDouble(Scores[i]) * .66;
						}

						else if (BUs[i].equals("B2B")) {
							STC_Score += Double.parseDouble(Scores[i]) * .24;
						} else {
							STC_Score += Double.parseDouble(Scores[i]) * .1;
						}
					}

					row49.BU = "STC";
					row49.Score = STC_Score;
					row49.WEEK_OF_YEAR = row48.WEEK_OF_YEAR;
					row49.MONTH_OF_YEAR = row48.MONTH_OF_YEAR;
					row49.YEAR_NUM = row48.YEAR_NUM;
					nb_line_tJavaRow_2++;

					tos_count_tJavaRow_2++;

					/**
					 * [tJavaRow_2 main ] stop
					 */

					/**
					 * [tJavaRow_2 process_data_begin ] start
					 */

					currentComponent = "tJavaRow_2";

					/**
					 * [tJavaRow_2 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_20 main ] start
					 */

					currentComponent = "tHashOutput_20";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row49");
					}

					if (tHashFile_tHashOutput_20 == null) {
						tHashFile_tHashOutput_20 = mf_tHashOutput_20
								.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_21");
						mf_tHashOutput_20.getResourceMap().put(
								"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_20", tHashFile_tHashOutput_20);
					}
					tMap_20_MainStruct oneRow_tHashOutput_20 = new tMap_20_MainStruct();
					oneRow_tHashOutput_20.YEAR_NUM = row49.YEAR_NUM;
					oneRow_tHashOutput_20.MONTH_OF_YEAR = row49.MONTH_OF_YEAR;
					oneRow_tHashOutput_20.WEEK_OF_YEAR = row49.WEEK_OF_YEAR;
					oneRow_tHashOutput_20.BU = row49.BU;
					oneRow_tHashOutput_20.Score = row49.Score;
					tHashFile_tHashOutput_20.put(oneRow_tHashOutput_20);
					nb_line_tHashOutput_20++;

					tos_count_tHashOutput_20++;

					/**
					 * [tHashOutput_20 main ] stop
					 */

					/**
					 * [tHashOutput_20 process_data_begin ] start
					 */

					currentComponent = "tHashOutput_20";

					/**
					 * [tHashOutput_20 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_20 process_data_end ] start
					 */

					currentComponent = "tHashOutput_20";

					/**
					 * [tHashOutput_20 process_data_end ] stop
					 */

					/**
					 * [tJavaRow_2 process_data_end ] start
					 */

					currentComponent = "tJavaRow_2";

					/**
					 * [tJavaRow_2 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_9_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_9";

					currentComponent = "tAggregateRow_9_AGGIN";

					/**
					 * [tAggregateRow_9_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_9_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_9";

					currentComponent = "tAggregateRow_9_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_9_AGGIN", true);
				end_Hash.put("tAggregateRow_9_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_9_AGGIN end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row48");
				}

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tHashOutput_20 end ] start
				 */

				currentComponent = "tHashOutput_20";

				globalMap.put("tHashOutput_20_NB_LINE", nb_line_tHashOutput_20);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row49");
				}

				ok_Hash.put("tHashOutput_20", true);
				end_Hash.put("tHashOutput_20", System.currentTimeMillis());

				/**
				 * [tHashOutput_20 end ] stop
				 */

				/**
				 * [tFilterRow_7 end ] start
				 */

				currentComponent = "tFilterRow_7";

				globalMap.put("tFilterRow_7_NB_LINE", nb_line_tFilterRow_7);
				globalMap.put("tFilterRow_7_NB_LINE_OK", nb_line_ok_tFilterRow_7);
				globalMap.put("tFilterRow_7_NB_LINE_REJECT", nb_line_reject_tFilterRow_7);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Weekly");
				}

				ok_Hash.put("tFilterRow_7", true);
				end_Hash.put("tFilterRow_7", System.currentTimeMillis());

				/**
				 * [tFilterRow_7 end ] stop
				 */

				/**
				 * [tAggregateRow_11_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_11";

				currentComponent = "tAggregateRow_11_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row96");
				}

				ok_Hash.put("tAggregateRow_11_AGGOUT", true);
				end_Hash.put("tAggregateRow_11_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_11_AGGOUT end ] stop
				 */

				/**
				 * [tAggregateRow_16_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_16_AGGOUT", false);
				start_Hash.put("tAggregateRow_16_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_16";

				currentComponent = "tAggregateRow_16_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out30");
				}

				int tos_count_tAggregateRow_16_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_16 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_16 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_16 utilClass_tAggregateRow_16 = new UtilClass_tAggregateRow_16();

				class AggOperationStruct_tAggregateRow_16 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String YEAR_NUM;
					String MONTH_OF_YEAR;
					String WEEK_OF_YEAR;
					StringBuilder Score_list = new StringBuilder();
					boolean Score_list_firstEmpty = false;
					StringBuilder BU_list = new StringBuilder();
					boolean BU_list_firstEmpty = false;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

							result = prime * result
									+ ((this.MONTH_OF_YEAR == null) ? 0 : this.MONTH_OF_YEAR.hashCode());

							result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_16 other = (AggOperationStruct_tAggregateRow_16) obj;

						if (this.YEAR_NUM == null) {
							if (other.YEAR_NUM != null)
								return false;
						} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))
							return false;

						if (this.MONTH_OF_YEAR == null) {
							if (other.MONTH_OF_YEAR != null)
								return false;
						} else if (!this.MONTH_OF_YEAR.equals(other.MONTH_OF_YEAR))
							return false;

						if (this.WEEK_OF_YEAR == null) {
							if (other.WEEK_OF_YEAR != null)
								return false;
						} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_16 operation_result_tAggregateRow_16 = null;
				AggOperationStruct_tAggregateRow_16 operation_finder_tAggregateRow_16 = new AggOperationStruct_tAggregateRow_16();
				java.util.Map<AggOperationStruct_tAggregateRow_16, AggOperationStruct_tAggregateRow_16> hash_tAggregateRow_16 = new java.util.HashMap<AggOperationStruct_tAggregateRow_16, AggOperationStruct_tAggregateRow_16>();

				String delimiter_tAggregateRow_16 = ",";

				/**
				 * [tAggregateRow_16_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_30 begin ] start
				 */

				ok_Hash.put("tMap_30", false);
				start_Hash.put("tMap_30", System.currentTimeMillis());

				currentComponent = "tMap_30";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row98");
				}

				int tos_count_tMap_30 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_30__Struct {
				}
				Var__tMap_30__Struct Var__tMap_30 = new Var__tMap_30__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out30Struct out30_tmp = new out30Struct();
// ###############################

				/**
				 * [tMap_30 begin ] stop
				 */

				/**
				 * [tHashOutput_27 begin ] start
				 */

				ok_Hash.put("tHashOutput_27", false);
				start_Hash.put("tHashOutput_27", System.currentTimeMillis());

				currentComponent = "tHashOutput_27";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "tMap_29_Main");
				}

				int tos_count_tHashOutput_27 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_27 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tMap_29_MainStruct> tHashFile_tHashOutput_27 = null;
				String hashKey_tHashOutput_27 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_27";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_27)) {
					if (mf_tHashOutput_27.getResourceMap().get(hashKey_tHashOutput_27) == null) {
						mf_tHashOutput_27.getResourceMap().put(hashKey_tHashOutput_27,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tMap_29_MainStruct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_27 = mf_tHashOutput_27.getResourceMap().get(hashKey_tHashOutput_27);
					} else {
						tHashFile_tHashOutput_27 = mf_tHashOutput_27.getResourceMap().get(hashKey_tHashOutput_27);
					}
				}
				int nb_line_tHashOutput_27 = 0;

				/**
				 * [tHashOutput_27 begin ] stop
				 */

				/**
				 * [tMap_29 begin ] start
				 */

				ok_Hash.put("tMap_29", false);
				start_Hash.put("tMap_29", System.currentTimeMillis());

				currentComponent = "tMap_29";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row97");
				}

				int tos_count_tMap_29 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_29__Struct {
				}
				Var__tMap_29__Struct Var__tMap_29 = new Var__tMap_29__Struct();
// ###############################

// ###############################
// # Outputs initialization
				tMap_29_MainStruct tMap_29_Main_tmp = new tMap_29_MainStruct();
// ###############################

				/**
				 * [tMap_29 begin ] stop
				 */

				/**
				 * [tAggregateRow_11_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_11_AGGIN", false);
				start_Hash.put("tAggregateRow_11_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_11";

				currentComponent = "tAggregateRow_11_AGGIN";

				int tos_count_tAggregateRow_11_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_11> values_tAggregateRow_11 = hash_tAggregateRow_11
						.values();

				globalMap.put("tAggregateRow_11_NB_LINE", values_tAggregateRow_11.size());

				for (AggOperationStruct_tAggregateRow_11 aggregated_row_tAggregateRow_11 : values_tAggregateRow_11) { // G_AggR_600

					/**
					 * [tAggregateRow_11_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_11_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_11";

					currentComponent = "tAggregateRow_11_AGGIN";

					row97.YEAR_NUM = aggregated_row_tAggregateRow_11.YEAR_NUM;

					row97.MONTH_OF_YEAR = aggregated_row_tAggregateRow_11.MONTH_OF_YEAR;

					row97.WEEK_OF_YEAR = aggregated_row_tAggregateRow_11.WEEK_OF_YEAR;

					row97.BU = aggregated_row_tAggregateRow_11.BU;

					if (aggregated_row_tAggregateRow_11.Score_sum != null) {
						row97.Score = aggregated_row_tAggregateRow_11.Score_sum.doubleValue();

					} else {

						row97.Score = null;

					}

					tos_count_tAggregateRow_11_AGGIN++;

					/**
					 * [tAggregateRow_11_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_11_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_11";

					currentComponent = "tAggregateRow_11_AGGIN";

					/**
					 * [tAggregateRow_11_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tMap_29 main ] start
					 */

					currentComponent = "tMap_29";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row97");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_29 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_29 = false;
					boolean mainRowRejected_tMap_29 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_29__Struct Var = Var__tMap_29;// ###############################
						// ###############################
						// # Output tables

						tMap_29_Main = null;

// # Output table : 'tMap_29_Main'
						tMap_29_Main_tmp.YEAR_NUM = row97.YEAR_NUM;
						tMap_29_Main_tmp.MONTH_OF_YEAR = row97.MONTH_OF_YEAR;
						tMap_29_Main_tmp.WEEK_OF_YEAR = row97.WEEK_OF_YEAR;
						tMap_29_Main_tmp.BU = row97.BU;
						tMap_29_Main_tmp.Score = (double) (Math.round(row97.Score * 100.00 * 100) / 100.00);
						tMap_29_Main = tMap_29_Main_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_29 = false;

					tos_count_tMap_29++;

					/**
					 * [tMap_29 main ] stop
					 */

					/**
					 * [tMap_29 process_data_begin ] start
					 */

					currentComponent = "tMap_29";

					/**
					 * [tMap_29 process_data_begin ] stop
					 */
// Start of branch "tMap_29_Main"
					if (tMap_29_Main != null) {

						/**
						 * [tHashOutput_27 main ] start
						 */

						currentComponent = "tHashOutput_27";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "tMap_29_Main");
						}

						tMap_29_MainStruct oneRow_tHashOutput_27 = new tMap_29_MainStruct();

						oneRow_tHashOutput_27.YEAR_NUM = tMap_29_Main.YEAR_NUM;
						oneRow_tHashOutput_27.MONTH_OF_YEAR = tMap_29_Main.MONTH_OF_YEAR;
						oneRow_tHashOutput_27.WEEK_OF_YEAR = tMap_29_Main.WEEK_OF_YEAR;
						oneRow_tHashOutput_27.BU = tMap_29_Main.BU;
						oneRow_tHashOutput_27.Score = tMap_29_Main.Score;

						tHashFile_tHashOutput_27.put(oneRow_tHashOutput_27);
						nb_line_tHashOutput_27++;

						row98 = tMap_29_Main;

						tos_count_tHashOutput_27++;

						/**
						 * [tHashOutput_27 main ] stop
						 */

						/**
						 * [tHashOutput_27 process_data_begin ] start
						 */

						currentComponent = "tHashOutput_27";

						/**
						 * [tHashOutput_27 process_data_begin ] stop
						 */

						/**
						 * [tMap_30 main ] start
						 */

						currentComponent = "tMap_30";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row98");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_30 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_30 = false;
						boolean mainRowRejected_tMap_30 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_30__Struct Var = Var__tMap_30;// ###############################
							// ###############################
							// # Output tables

							out30 = null;

// # Output table : 'out30'
							out30_tmp.YEAR_NUM = row98.YEAR_NUM;
							out30_tmp.MONTH_OF_YEAR = row98.MONTH_OF_YEAR;
							out30_tmp.WEEK_OF_YEAR = row98.WEEK_OF_YEAR;
							out30_tmp.BU = row98.BU;
							out30_tmp.Score = row98.Score + "";
							out30 = out30_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_30 = false;

						tos_count_tMap_30++;

						/**
						 * [tMap_30 main ] stop
						 */

						/**
						 * [tMap_30 process_data_begin ] start
						 */

						currentComponent = "tMap_30";

						/**
						 * [tMap_30 process_data_begin ] stop
						 */
// Start of branch "out30"
						if (out30 != null) {

							/**
							 * [tAggregateRow_16_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_16";

							currentComponent = "tAggregateRow_16_AGGOUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out30");
							}

							operation_finder_tAggregateRow_16.YEAR_NUM = out30.YEAR_NUM;
							operation_finder_tAggregateRow_16.MONTH_OF_YEAR = out30.MONTH_OF_YEAR;
							operation_finder_tAggregateRow_16.WEEK_OF_YEAR = out30.WEEK_OF_YEAR;

							operation_finder_tAggregateRow_16.hashCodeDirty = true;

							operation_result_tAggregateRow_16 = hash_tAggregateRow_16
									.get(operation_finder_tAggregateRow_16);

							if (operation_result_tAggregateRow_16 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_16 = new AggOperationStruct_tAggregateRow_16();

								operation_result_tAggregateRow_16.YEAR_NUM = operation_finder_tAggregateRow_16.YEAR_NUM;
								operation_result_tAggregateRow_16.MONTH_OF_YEAR = operation_finder_tAggregateRow_16.MONTH_OF_YEAR;
								operation_result_tAggregateRow_16.WEEK_OF_YEAR = operation_finder_tAggregateRow_16.WEEK_OF_YEAR;

								hash_tAggregateRow_16.put(operation_result_tAggregateRow_16,
										operation_result_tAggregateRow_16);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_16.Score_list.length() > 0) {
								operation_result_tAggregateRow_16.Score_list.append(",");
							} else if (operation_result_tAggregateRow_16.Score_list_firstEmpty) {
								operation_result_tAggregateRow_16.Score_list.append(",");
							}
							if (operation_result_tAggregateRow_16.Score_list != null) {
								if (operation_result_tAggregateRow_16.Score_list_firstEmpty == false
										&& ("").equals(String.valueOf(out30.Score))) {
									operation_result_tAggregateRow_16.Score_list_firstEmpty = true;
								}
								operation_result_tAggregateRow_16.Score_list = operation_result_tAggregateRow_16.Score_list
										.append(String.valueOf(out30.Score));
							}

							if (operation_result_tAggregateRow_16.BU_list.length() > 0) {
								operation_result_tAggregateRow_16.BU_list.append(",");
							} else if (operation_result_tAggregateRow_16.BU_list_firstEmpty) {
								operation_result_tAggregateRow_16.BU_list.append(",");
							}
							if (operation_result_tAggregateRow_16.BU_list != null) {
								if (operation_result_tAggregateRow_16.BU_list_firstEmpty == false
										&& ("").equals(String.valueOf(out30.BU))) {
									operation_result_tAggregateRow_16.BU_list_firstEmpty = true;
								}
								operation_result_tAggregateRow_16.BU_list = operation_result_tAggregateRow_16.BU_list
										.append(String.valueOf(out30.BU));
							}

							tos_count_tAggregateRow_16_AGGOUT++;

							/**
							 * [tAggregateRow_16_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_16_AGGOUT process_data_begin ] start
							 */

							currentVirtualComponent = "tAggregateRow_16";

							currentComponent = "tAggregateRow_16_AGGOUT";

							/**
							 * [tAggregateRow_16_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_16_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_16";

							currentComponent = "tAggregateRow_16_AGGOUT";

							/**
							 * [tAggregateRow_16_AGGOUT process_data_end ] stop
							 */

						} // End of branch "out30"

						/**
						 * [tMap_30 process_data_end ] start
						 */

						currentComponent = "tMap_30";

						/**
						 * [tMap_30 process_data_end ] stop
						 */

						/**
						 * [tHashOutput_27 process_data_end ] start
						 */

						currentComponent = "tHashOutput_27";

						/**
						 * [tHashOutput_27 process_data_end ] stop
						 */

					} // End of branch "tMap_29_Main"

					/**
					 * [tMap_29 process_data_end ] start
					 */

					currentComponent = "tMap_29";

					/**
					 * [tMap_29 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_11_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_11";

					currentComponent = "tAggregateRow_11_AGGIN";

					/**
					 * [tAggregateRow_11_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_11_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_11";

					currentComponent = "tAggregateRow_11_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_11_AGGIN", true);
				end_Hash.put("tAggregateRow_11_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_11_AGGIN end ] stop
				 */

				/**
				 * [tMap_29 end ] start
				 */

				currentComponent = "tMap_29";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row97");
				}

				ok_Hash.put("tMap_29", true);
				end_Hash.put("tMap_29", System.currentTimeMillis());

				/**
				 * [tMap_29 end ] stop
				 */

				/**
				 * [tHashOutput_27 end ] start
				 */

				currentComponent = "tHashOutput_27";

				globalMap.put("tHashOutput_27_NB_LINE", nb_line_tHashOutput_27);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "tMap_29_Main");
				}

				ok_Hash.put("tHashOutput_27", true);
				end_Hash.put("tHashOutput_27", System.currentTimeMillis());

				/**
				 * [tHashOutput_27 end ] stop
				 */

				/**
				 * [tMap_30 end ] start
				 */

				currentComponent = "tMap_30";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row98");
				}

				ok_Hash.put("tMap_30", true);
				end_Hash.put("tMap_30", System.currentTimeMillis());

				/**
				 * [tMap_30 end ] stop
				 */

				/**
				 * [tAggregateRow_16_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_16";

				currentComponent = "tAggregateRow_16_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out30");
				}

				ok_Hash.put("tAggregateRow_16_AGGOUT", true);
				end_Hash.put("tAggregateRow_16_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_16_AGGOUT end ] stop
				 */

				/**
				 * [tHashOutput_28 begin ] start
				 */

				ok_Hash.put("tHashOutput_28", false);
				start_Hash.put("tHashOutput_28", System.currentTimeMillis());

				currentComponent = "tHashOutput_28";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row100");
				}

				int tos_count_tHashOutput_28 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_28 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tMap_29_MainStruct> tHashFile_tHashOutput_28 = null;
				// use this map to keep the present key and the previous key of
				// AdvancedMemoryHashFile
				mf_tHashOutput_28.getKeyMap().put("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_28",
						"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_27");
				int nb_line_tHashOutput_28 = 0;

				/**
				 * [tHashOutput_28 begin ] stop
				 */

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());

				currentComponent = "tJavaRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row99");
				}

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tAggregateRow_16_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_16_AGGIN", false);
				start_Hash.put("tAggregateRow_16_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_16";

				currentComponent = "tAggregateRow_16_AGGIN";

				int tos_count_tAggregateRow_16_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_16> values_tAggregateRow_16 = hash_tAggregateRow_16
						.values();

				globalMap.put("tAggregateRow_16_NB_LINE", values_tAggregateRow_16.size());

				for (AggOperationStruct_tAggregateRow_16 aggregated_row_tAggregateRow_16 : values_tAggregateRow_16) { // G_AggR_600

					/**
					 * [tAggregateRow_16_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_16_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_16";

					currentComponent = "tAggregateRow_16_AGGIN";

					row99.YEAR_NUM = aggregated_row_tAggregateRow_16.YEAR_NUM;

					row99.MONTH_OF_YEAR = aggregated_row_tAggregateRow_16.MONTH_OF_YEAR;

					row99.WEEK_OF_YEAR = aggregated_row_tAggregateRow_16.WEEK_OF_YEAR;

					row99.BU = aggregated_row_tAggregateRow_16.BU_list.toString();

					row99.Score = aggregated_row_tAggregateRow_16.Score_list.toString();

					tos_count_tAggregateRow_16_AGGIN++;

					/**
					 * [tAggregateRow_16_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_16_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_16";

					currentComponent = "tAggregateRow_16_AGGIN";

					/**
					 * [tAggregateRow_16_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tJavaRow_5 main ] start
					 */

					currentComponent = "tJavaRow_5";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row99");
					}

					String[] BUs = row99.BU.split(",");
					String[] Scores = row99.Score.split(",");

					double STC_Score = 0.0 * 100.0 / 100.0;
					for (int i = 0; i < Scores.length; i++) {
						if (BUs[i].equals("B2C")) {
							STC_Score += Double.parseDouble(Scores[i]) * .66;
						}

						else if (BUs[i].equals("B2B")) {
							STC_Score += Double.parseDouble(Scores[i]) * .24;
						} else {
							STC_Score += Double.parseDouble(Scores[i]) * .1;
						}
					}

					row100.BU = "STC";
					row100.Score = STC_Score;
					row100.WEEK_OF_YEAR = row99.WEEK_OF_YEAR;
					row100.MONTH_OF_YEAR = row99.MONTH_OF_YEAR;
					row100.YEAR_NUM = row99.YEAR_NUM;
					nb_line_tJavaRow_5++;

					tos_count_tJavaRow_5++;

					/**
					 * [tJavaRow_5 main ] stop
					 */

					/**
					 * [tJavaRow_5 process_data_begin ] start
					 */

					currentComponent = "tJavaRow_5";

					/**
					 * [tJavaRow_5 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_28 main ] start
					 */

					currentComponent = "tHashOutput_28";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row100");
					}

					if (tHashFile_tHashOutput_28 == null) {
						tHashFile_tHashOutput_28 = mf_tHashOutput_28
								.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_27");
						mf_tHashOutput_28.getResourceMap().put(
								"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_28", tHashFile_tHashOutput_28);
					}
					tMap_29_MainStruct oneRow_tHashOutput_28 = new tMap_29_MainStruct();
					oneRow_tHashOutput_28.YEAR_NUM = row100.YEAR_NUM;
					oneRow_tHashOutput_28.MONTH_OF_YEAR = row100.MONTH_OF_YEAR;
					oneRow_tHashOutput_28.WEEK_OF_YEAR = row100.WEEK_OF_YEAR;
					oneRow_tHashOutput_28.BU = row100.BU;
					oneRow_tHashOutput_28.Score = row100.Score;
					tHashFile_tHashOutput_28.put(oneRow_tHashOutput_28);
					nb_line_tHashOutput_28++;

					tos_count_tHashOutput_28++;

					/**
					 * [tHashOutput_28 main ] stop
					 */

					/**
					 * [tHashOutput_28 process_data_begin ] start
					 */

					currentComponent = "tHashOutput_28";

					/**
					 * [tHashOutput_28 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_28 process_data_end ] start
					 */

					currentComponent = "tHashOutput_28";

					/**
					 * [tHashOutput_28 process_data_end ] stop
					 */

					/**
					 * [tJavaRow_5 process_data_end ] start
					 */

					currentComponent = "tJavaRow_5";

					/**
					 * [tJavaRow_5 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_16_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_16";

					currentComponent = "tAggregateRow_16_AGGIN";

					/**
					 * [tAggregateRow_16_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_16_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_16";

					currentComponent = "tAggregateRow_16_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_16_AGGIN", true);
				end_Hash.put("tAggregateRow_16_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_16_AGGIN end ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row99");
				}

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				/**
				 * [tJavaRow_5 end ] stop
				 */

				/**
				 * [tHashOutput_28 end ] start
				 */

				currentComponent = "tHashOutput_28";

				globalMap.put("tHashOutput_28_NB_LINE", nb_line_tHashOutput_28);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row100");
				}

				ok_Hash.put("tHashOutput_28", true);
				end_Hash.put("tHashOutput_28", System.currentTimeMillis());

				/**
				 * [tHashOutput_28 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_20:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk33", 0, "ok");
			}

			tHashInput_35Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_16_AGGIN"
			globalMap.remove("tAggregateRow_16");

			// free memory for "tAggregateRow_11_AGGIN"
			globalMap.remove("tAggregateRow_11");

			// free memory for "tAggregateRow_9_AGGIN"
			globalMap.remove("tAggregateRow_9");

			// free memory for "tAggregateRow_8_AGGIN"
			globalMap.remove("tAggregateRow_8");

			// free memory for "tAggregateRow_6_AGGIN"
			globalMap.remove("tAggregateRow_6");

			try {

				/**
				 * [tHashInput_20 finally ] start
				 */

				currentComponent = "tHashInput_20";

				/**
				 * [tHashInput_20 finally ] stop
				 */

				/**
				 * [tFilterRow_3 finally ] start
				 */

				currentComponent = "tFilterRow_3";

				/**
				 * [tFilterRow_3 finally ] stop
				 */

				/**
				 * [tAggregateRow_6_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_6";

				currentComponent = "tAggregateRow_6_AGGOUT";

				/**
				 * [tAggregateRow_6_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_6_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_6";

				currentComponent = "tAggregateRow_6_AGGIN";

				/**
				 * [tAggregateRow_6_AGGIN finally ] stop
				 */

				/**
				 * [tMap_15 finally ] start
				 */

				currentComponent = "tMap_15";

				/**
				 * [tMap_15 finally ] stop
				 */

				/**
				 * [tReplicate_2 finally ] start
				 */

				currentComponent = "tReplicate_2";

				/**
				 * [tReplicate_2 finally ] stop
				 */

				/**
				 * [tAggregateRow_8_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_8";

				currentComponent = "tAggregateRow_8_AGGOUT";

				/**
				 * [tAggregateRow_8_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_8_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_8";

				currentComponent = "tAggregateRow_8_AGGIN";

				/**
				 * [tAggregateRow_8_AGGIN finally ] stop
				 */

				/**
				 * [tMap_20 finally ] start
				 */

				currentComponent = "tMap_20";

				/**
				 * [tMap_20 finally ] stop
				 */

				/**
				 * [tHashOutput_21 finally ] start
				 */

				currentComponent = "tHashOutput_21";

				/**
				 * [tHashOutput_21 finally ] stop
				 */

				/**
				 * [tMap_16 finally ] start
				 */

				currentComponent = "tMap_16";

				/**
				 * [tMap_16 finally ] stop
				 */

				/**
				 * [tAggregateRow_9_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_9";

				currentComponent = "tAggregateRow_9_AGGOUT";

				/**
				 * [tAggregateRow_9_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_9_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_9";

				currentComponent = "tAggregateRow_9_AGGIN";

				/**
				 * [tAggregateRow_9_AGGIN finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tHashOutput_20 finally ] start
				 */

				currentComponent = "tHashOutput_20";

				/**
				 * [tHashOutput_20 finally ] stop
				 */

				/**
				 * [tFilterRow_7 finally ] start
				 */

				currentComponent = "tFilterRow_7";

				/**
				 * [tFilterRow_7 finally ] stop
				 */

				/**
				 * [tAggregateRow_11_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_11";

				currentComponent = "tAggregateRow_11_AGGOUT";

				/**
				 * [tAggregateRow_11_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_11_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_11";

				currentComponent = "tAggregateRow_11_AGGIN";

				/**
				 * [tAggregateRow_11_AGGIN finally ] stop
				 */

				/**
				 * [tMap_29 finally ] start
				 */

				currentComponent = "tMap_29";

				/**
				 * [tMap_29 finally ] stop
				 */

				/**
				 * [tHashOutput_27 finally ] start
				 */

				currentComponent = "tHashOutput_27";

				/**
				 * [tHashOutput_27 finally ] stop
				 */

				/**
				 * [tMap_30 finally ] start
				 */

				currentComponent = "tMap_30";

				/**
				 * [tMap_30 finally ] stop
				 */

				/**
				 * [tAggregateRow_16_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_16";

				currentComponent = "tAggregateRow_16_AGGOUT";

				/**
				 * [tAggregateRow_16_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_16_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_16";

				currentComponent = "tAggregateRow_16_AGGIN";

				/**
				 * [tAggregateRow_16_AGGIN finally ] stop
				 */

				/**
				 * [tJavaRow_5 finally ] start
				 */

				currentComponent = "tJavaRow_5";

				/**
				 * [tJavaRow_5 finally ] stop
				 */

				/**
				 * [tHashOutput_28 finally ] start
				 */

				currentComponent = "tHashOutput_28";

				/**
				 * [tHashOutput_28 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_20_SUBPROCESS_STATE", 1);
	}

	public static class out18Struct implements routines.system.IPersistableRow<out18Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Mnth_Wk_Score;

		public Double getMnth_Wk_Score() {
			return this.Mnth_Wk_Score;
		}

		public Double Wk_Score;

		public Double getWk_Score() {
			return this.Wk_Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Mnth_Wk_Score = null;
					} else {
						this.Mnth_Wk_Score = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Wk_Score = null;
					} else {
						this.Wk_Score = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Mnth_Wk_Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Mnth_Wk_Score);
				}

				// Double

				if (this.Wk_Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Wk_Score);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Mnth_Wk_Score=" + String.valueOf(Mnth_Wk_Score));
			sb.append(",Wk_Score=" + String.valueOf(Wk_Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row101Struct implements routines.system.IPersistableRow<row101Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row101Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tHashInput_35Struct
			implements routines.system.IPersistableRow<after_tHashInput_35Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tHashInput_35Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_35Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_35_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tHashInput_36Process(globalMap);

				row101Struct row101 = new row101Struct();
				out18Struct out18 = new out18Struct();

				/**
				 * [tHashOutput_29 begin ] start
				 */

				ok_Hash.put("tHashOutput_29", false);
				start_Hash.put("tHashOutput_29", System.currentTimeMillis());

				currentComponent = "tHashOutput_29";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out18");
				}

				int tos_count_tHashOutput_29 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_29 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out18Struct> tHashFile_tHashOutput_29 = null;
				String hashKey_tHashOutput_29 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_29";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_29)) {
					if (mf_tHashOutput_29.getResourceMap().get(hashKey_tHashOutput_29) == null) {
						mf_tHashOutput_29.getResourceMap().put(hashKey_tHashOutput_29,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out18Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_29 = mf_tHashOutput_29.getResourceMap().get(hashKey_tHashOutput_29);
					} else {
						tHashFile_tHashOutput_29 = mf_tHashOutput_29.getResourceMap().get(hashKey_tHashOutput_29);
					}
				}
				int nb_line_tHashOutput_29 = 0;

				/**
				 * [tHashOutput_29 begin ] stop
				 */

				/**
				 * [tMap_31 begin ] start
				 */

				ok_Hash.put("tMap_31", false);
				start_Hash.put("tMap_31", System.currentTimeMillis());

				currentComponent = "tMap_31";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row101");
				}

				int tos_count_tMap_31 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row102Struct> tHash_Lookup_row102 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row102Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row102Struct>) globalMap
						.get("tHash_Lookup_row102"));

				row102Struct row102HashKey = new row102Struct();
				row102Struct row102Default = new row102Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_31__Struct {
				}
				Var__tMap_31__Struct Var__tMap_31 = new Var__tMap_31__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out18Struct out18_tmp = new out18Struct();
// ###############################

				/**
				 * [tMap_31 begin ] stop
				 */

				/**
				 * [tHashInput_35 begin ] start
				 */

				ok_Hash.put("tHashInput_35", false);
				start_Hash.put("tHashInput_35", System.currentTimeMillis());

				currentComponent = "tHashInput_35";

				int tos_count_tHashInput_35 = 0;

				int nb_line_tHashInput_35 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_35 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tMap_20_MainStruct> tHashFile_tHashInput_35 = mf_tHashInput_35
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_21");
				if (tHashFile_tHashInput_35 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tMap_20_MainStruct> iterator_tHashInput_35 = tHashFile_tHashInput_35.iterator();
				while (iterator_tHashInput_35.hasNext()) {
					tMap_20_MainStruct next_tHashInput_35 = iterator_tHashInput_35.next();

					row101.YEAR_NUM = next_tHashInput_35.YEAR_NUM;
					row101.MONTH_OF_YEAR = next_tHashInput_35.MONTH_OF_YEAR;
					row101.WEEK_OF_YEAR = next_tHashInput_35.WEEK_OF_YEAR;
					row101.BU = next_tHashInput_35.BU;
					row101.Score = next_tHashInput_35.Score;

					/**
					 * [tHashInput_35 begin ] stop
					 */

					/**
					 * [tHashInput_35 main ] start
					 */

					currentComponent = "tHashInput_35";

					tos_count_tHashInput_35++;

					/**
					 * [tHashInput_35 main ] stop
					 */

					/**
					 * [tHashInput_35 process_data_begin ] start
					 */

					currentComponent = "tHashInput_35";

					/**
					 * [tHashInput_35 process_data_begin ] stop
					 */

					/**
					 * [tMap_31 main ] start
					 */

					currentComponent = "tMap_31";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row101");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_31 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_31 = false;
					boolean mainRowRejected_tMap_31 = false;

					///////////////////////////////////////////////
					// Starting Lookup Table "row102"
					///////////////////////////////////////////////

					boolean forceLooprow102 = false;

					row102Struct row102ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_31) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_31 = false;

						row102HashKey.YEAR_NUM = row101.YEAR_NUM;

						row102HashKey.MONTH_OF_YEAR = row101.MONTH_OF_YEAR;

						row102HashKey.WEEK_OF_YEAR = row101.WEEK_OF_YEAR;

						row102HashKey.BU = row101.BU;

						row102HashKey.hashCodeDirty = true;

						tHash_Lookup_row102.lookup(row102HashKey);

					} // G_TM_M_020

					if (tHash_Lookup_row102 != null && tHash_Lookup_row102.getCount(row102HashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
						// 'row102' and it contains more one result from keys : row102.YEAR_NUM = '" +
						// row102HashKey.YEAR_NUM + "', row102.MONTH_OF_YEAR = '" +
						// row102HashKey.MONTH_OF_YEAR + "', row102.WEEK_OF_YEAR = '" +
						// row102HashKey.WEEK_OF_YEAR + "', row102.BU = '" + row102HashKey.BU + "'");
					} // G 071

					row102Struct row102 = null;

					row102Struct fromLookup_row102 = null;
					row102 = row102Default;

					if (tHash_Lookup_row102 != null && tHash_Lookup_row102.hasNext()) { // G 099

						fromLookup_row102 = tHash_Lookup_row102.next();

					} // G 099

					if (fromLookup_row102 != null) {
						row102 = fromLookup_row102;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_31__Struct Var = Var__tMap_31;// ###############################
						// ###############################
						// # Output tables

						out18 = null;

// # Output table : 'out18'
						out18_tmp.YEAR_NUM = row101.YEAR_NUM;
						out18_tmp.MONTH_OF_YEAR = row101.MONTH_OF_YEAR;
						out18_tmp.WEEK_OF_YEAR = row101.WEEK_OF_YEAR;
						out18_tmp.BU = row101.BU;
						out18_tmp.Mnth_Wk_Score = row101.Score;
						out18_tmp.Wk_Score = row102.Score;
						out18 = out18_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_31 = false;

					tos_count_tMap_31++;

					/**
					 * [tMap_31 main ] stop
					 */

					/**
					 * [tMap_31 process_data_begin ] start
					 */

					currentComponent = "tMap_31";

					/**
					 * [tMap_31 process_data_begin ] stop
					 */
// Start of branch "out18"
					if (out18 != null) {

						/**
						 * [tHashOutput_29 main ] start
						 */

						currentComponent = "tHashOutput_29";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "out18");
						}

						out18Struct oneRow_tHashOutput_29 = new out18Struct();

						oneRow_tHashOutput_29.YEAR_NUM = out18.YEAR_NUM;
						oneRow_tHashOutput_29.MONTH_OF_YEAR = out18.MONTH_OF_YEAR;
						oneRow_tHashOutput_29.WEEK_OF_YEAR = out18.WEEK_OF_YEAR;
						oneRow_tHashOutput_29.BU = out18.BU;
						oneRow_tHashOutput_29.Mnth_Wk_Score = out18.Mnth_Wk_Score;
						oneRow_tHashOutput_29.Wk_Score = out18.Wk_Score;

						tHashFile_tHashOutput_29.put(oneRow_tHashOutput_29);
						nb_line_tHashOutput_29++;

						tos_count_tHashOutput_29++;

						/**
						 * [tHashOutput_29 main ] stop
						 */

						/**
						 * [tHashOutput_29 process_data_begin ] start
						 */

						currentComponent = "tHashOutput_29";

						/**
						 * [tHashOutput_29 process_data_begin ] stop
						 */

						/**
						 * [tHashOutput_29 process_data_end ] start
						 */

						currentComponent = "tHashOutput_29";

						/**
						 * [tHashOutput_29 process_data_end ] stop
						 */

					} // End of branch "out18"

					/**
					 * [tMap_31 process_data_end ] start
					 */

					currentComponent = "tMap_31";

					/**
					 * [tMap_31 process_data_end ] stop
					 */

					/**
					 * [tHashInput_35 process_data_end ] start
					 */

					currentComponent = "tHashInput_35";

					/**
					 * [tHashInput_35 process_data_end ] stop
					 */

					/**
					 * [tHashInput_35 end ] start
					 */

					currentComponent = "tHashInput_35";

					nb_line_tHashInput_35++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_21");

				globalMap.put("tHashInput_35_NB_LINE", nb_line_tHashInput_35);

				ok_Hash.put("tHashInput_35", true);
				end_Hash.put("tHashInput_35", System.currentTimeMillis());

				/**
				 * [tHashInput_35 end ] stop
				 */

				/**
				 * [tMap_31 end ] start
				 */

				currentComponent = "tMap_31";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row102 != null) {
					tHash_Lookup_row102.endGet();
				}
				globalMap.remove("tHash_Lookup_row102");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row101");
				}

				ok_Hash.put("tMap_31", true);
				end_Hash.put("tMap_31", System.currentTimeMillis());

				/**
				 * [tMap_31 end ] stop
				 */

				/**
				 * [tHashOutput_29 end ] start
				 */

				currentComponent = "tHashOutput_29";

				globalMap.put("tHashOutput_29_NB_LINE", nb_line_tHashOutput_29);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out18");
				}

				ok_Hash.put("tHashOutput_29", true);
				end_Hash.put("tHashOutput_29", System.currentTimeMillis());

				/**
				 * [tHashOutput_29 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_35:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk26", 0, "ok");
			}

			tHashInput_29Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_31"
			globalMap.remove("tHash_Lookup_row102");

			try {

				/**
				 * [tHashInput_35 finally ] start
				 */

				currentComponent = "tHashInput_35";

				/**
				 * [tHashInput_35 finally ] stop
				 */

				/**
				 * [tMap_31 finally ] start
				 */

				currentComponent = "tMap_31";

				/**
				 * [tMap_31 finally ] stop
				 */

				/**
				 * [tHashOutput_29 finally ] start
				 */

				currentComponent = "tHashOutput_29";

				/**
				 * [tHashOutput_29 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_35_SUBPROCESS_STATE", 1);
	}

	public static class row70Struct implements routines.system.IPersistableRow<row70Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String CEI_JSON_String;

		public String getCEI_JSON_String() {
			return this.CEI_JSON_String;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.CEI_JSON_String = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CEI_JSON_String, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CEI_JSON_String=" + CEI_JSON_String);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row70Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row82Struct implements routines.system.IPersistableRow<row82Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String CEI_JSON_String;

		public String getCEI_JSON_String() {
			return this.CEI_JSON_String;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.CEI_JSON_String = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CEI_JSON_String, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CEI_JSON_String=" + CEI_JSON_String);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row82Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row83Struct implements routines.system.IPersistableRow<row83Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String CEI_JSON_String;

		public String getCEI_JSON_String() {
			return this.CEI_JSON_String;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.CEI_JSON_String = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CEI_JSON_String, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CEI_JSON_String=" + CEI_JSON_String);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row83Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_15
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_15> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String CEI_JSON_String;

		public String getCEI_JSON_String() {
			return this.CEI_JSON_String;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.CEI_JSON_String = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CEI_JSON_String, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CEI_JSON_String=" + CEI_JSON_String);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_15 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row81Struct implements routines.system.IPersistableRow<row81Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String CEI_JSON_String;

		public String getCEI_JSON_String() {
			return this.CEI_JSON_String;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.CEI_JSON_String = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CEI_JSON_String, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CEI_JSON_String=" + CEI_JSON_String);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row81Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row80Struct implements routines.system.IPersistableRow<row80Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String Mnth_Wk_Score;

		public String getMnth_Wk_Score() {
			return this.Mnth_Wk_Score;
		}

		public String Wk_Score;

		public String getWk_Score() {
			return this.Wk_Score;
		}

		public String CEI_Target;

		public String getCEI_Target() {
			return this.CEI_Target;
		}

		public String CEI_Weekly_Target;

		public String getCEI_Weekly_Target() {
			return this.CEI_Weekly_Target;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.Mnth_Wk_Score = readString(dis);

					this.Wk_Score = readString(dis);

					this.CEI_Target = readString(dis);

					this.CEI_Weekly_Target = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.Mnth_Wk_Score, dos);

				// String

				writeString(this.Wk_Score, dos);

				// String

				writeString(this.CEI_Target, dos);

				// String

				writeString(this.CEI_Weekly_Target, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Mnth_Wk_Score=" + Mnth_Wk_Score);
			sb.append(",Wk_Score=" + Wk_Score);
			sb.append(",CEI_Target=" + CEI_Target);
			sb.append(",CEI_Weekly_Target=" + CEI_Weekly_Target);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row80Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_14
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_14> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String Mnth_Wk_Score;

		public String getMnth_Wk_Score() {
			return this.Mnth_Wk_Score;
		}

		public String Wk_Score;

		public String getWk_Score() {
			return this.Wk_Score;
		}

		public String CEI_Target;

		public String getCEI_Target() {
			return this.CEI_Target;
		}

		public String CEI_Weekly_Target;

		public String getCEI_Weekly_Target() {
			return this.CEI_Weekly_Target;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.Mnth_Wk_Score = readString(dis);

					this.Wk_Score = readString(dis);

					this.CEI_Target = readString(dis);

					this.CEI_Weekly_Target = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.Mnth_Wk_Score, dos);

				// String

				writeString(this.Wk_Score, dos);

				// String

				writeString(this.CEI_Target, dos);

				// String

				writeString(this.CEI_Weekly_Target, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Mnth_Wk_Score=" + Mnth_Wk_Score);
			sb.append(",Wk_Score=" + Wk_Score);
			sb.append(",CEI_Target=" + CEI_Target);
			sb.append(",CEI_Weekly_Target=" + CEI_Weekly_Target);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_14 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class CEI_OutStruct implements routines.system.IPersistableRow<CEI_OutStruct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String Mnth_Wk_Score;

		public String getMnth_Wk_Score() {
			return this.Mnth_Wk_Score;
		}

		public String Wk_Score;

		public String getWk_Score() {
			return this.Wk_Score;
		}

		public String CEI_Target;

		public String getCEI_Target() {
			return this.CEI_Target;
		}

		public String CEI_Weekly_Contribution_Trgt;

		public String getCEI_Weekly_Contribution_Trgt() {
			return this.CEI_Weekly_Contribution_Trgt;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.Mnth_Wk_Score = readString(dis);

					this.Wk_Score = readString(dis);

					this.CEI_Target = readString(dis);

					this.CEI_Weekly_Contribution_Trgt = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.Mnth_Wk_Score, dos);

				// String

				writeString(this.Wk_Score, dos);

				// String

				writeString(this.CEI_Target, dos);

				// String

				writeString(this.CEI_Weekly_Contribution_Trgt, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Mnth_Wk_Score=" + Mnth_Wk_Score);
			sb.append(",Wk_Score=" + Wk_Score);
			sb.append(",CEI_Target=" + CEI_Target);
			sb.append(",CEI_Weekly_Contribution_Trgt=" + CEI_Weekly_Contribution_Trgt);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(CEI_OutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row79Struct implements routines.system.IPersistableRow<row79Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Mnth_Wk_Score;

		public Double getMnth_Wk_Score() {
			return this.Mnth_Wk_Score;
		}

		public Double Wk_Score;

		public Double getWk_Score() {
			return this.Wk_Score;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Mnth_Wk_Score = null;
					} else {
						this.Mnth_Wk_Score = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Wk_Score = null;
					} else {
						this.Wk_Score = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Mnth_Wk_Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Mnth_Wk_Score);
				}

				// Double

				if (this.Wk_Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Wk_Score);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Mnth_Wk_Score=" + String.valueOf(Mnth_Wk_Score));
			sb.append(",Wk_Score=" + String.valueOf(Wk_Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row79Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_29_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row79Struct row79 = new row79Struct();
				CEI_OutStruct CEI_Out = new CEI_OutStruct();
				row80Struct row80 = new row80Struct();
				row81Struct row81 = new row81Struct();
				row83Struct row83 = new row83Struct();
				row82Struct row82 = new row82Struct();
				row82Struct row70 = row82;

				/**
				 * [tAggregateRow_14_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_14_AGGOUT", false);
				start_Hash.put("tAggregateRow_14_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_14";

				currentComponent = "tAggregateRow_14_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "CEI_Out");
				}

				int tos_count_tAggregateRow_14_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_14 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_14 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_14 utilClass_tAggregateRow_14 = new UtilClass_tAggregateRow_14();

				class AggOperationStruct_tAggregateRow_14 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String YEAR_NUM;
					String MONTH_OF_YEAR;
					String WEEK_OF_YEAR;
					StringBuilder BU_list = new StringBuilder();
					boolean BU_list_firstEmpty = false;
					StringBuilder Wk_Score_list = new StringBuilder();
					boolean Wk_Score_list_firstEmpty = false;
					StringBuilder Mnth_Wk_Score_list = new StringBuilder();
					boolean Mnth_Wk_Score_list_firstEmpty = false;
					StringBuilder CEI_Target_list = new StringBuilder();
					boolean CEI_Target_list_firstEmpty = false;
					StringBuilder CEI_Weekly_Target_list = new StringBuilder();
					boolean CEI_Weekly_Target_list_firstEmpty = false;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

							result = prime * result
									+ ((this.MONTH_OF_YEAR == null) ? 0 : this.MONTH_OF_YEAR.hashCode());

							result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_14 other = (AggOperationStruct_tAggregateRow_14) obj;

						if (this.YEAR_NUM == null) {
							if (other.YEAR_NUM != null)
								return false;
						} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))
							return false;

						if (this.MONTH_OF_YEAR == null) {
							if (other.MONTH_OF_YEAR != null)
								return false;
						} else if (!this.MONTH_OF_YEAR.equals(other.MONTH_OF_YEAR))
							return false;

						if (this.WEEK_OF_YEAR == null) {
							if (other.WEEK_OF_YEAR != null)
								return false;
						} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_14 operation_result_tAggregateRow_14 = null;
				AggOperationStruct_tAggregateRow_14 operation_finder_tAggregateRow_14 = new AggOperationStruct_tAggregateRow_14();
				java.util.Map<AggOperationStruct_tAggregateRow_14, AggOperationStruct_tAggregateRow_14> hash_tAggregateRow_14 = new java.util.HashMap<AggOperationStruct_tAggregateRow_14, AggOperationStruct_tAggregateRow_14>();

				String delimiter_tAggregateRow_14 = ",";

				/**
				 * [tAggregateRow_14_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_24 begin ] start
				 */

				ok_Hash.put("tMap_24", false);
				start_Hash.put("tMap_24", System.currentTimeMillis());

				currentComponent = "tMap_24";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row79");
				}

				int tos_count_tMap_24 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_24__Struct {
				}
				Var__tMap_24__Struct Var__tMap_24 = new Var__tMap_24__Struct();
// ###############################

// ###############################
// # Outputs initialization
				CEI_OutStruct CEI_Out_tmp = new CEI_OutStruct();
// ###############################

				/**
				 * [tMap_24 begin ] stop
				 */

				/**
				 * [tHashInput_29 begin ] start
				 */

				ok_Hash.put("tHashInput_29", false);
				start_Hash.put("tHashInput_29", System.currentTimeMillis());

				currentComponent = "tHashInput_29";

				int tos_count_tHashInput_29 = 0;

				int nb_line_tHashInput_29 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_29 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out18Struct> tHashFile_tHashInput_29 = mf_tHashInput_29
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_29");
				if (tHashFile_tHashInput_29 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<out18Struct> iterator_tHashInput_29 = tHashFile_tHashInput_29.iterator();
				while (iterator_tHashInput_29.hasNext()) {
					out18Struct next_tHashInput_29 = iterator_tHashInput_29.next();

					row79.YEAR_NUM = next_tHashInput_29.YEAR_NUM;
					row79.MONTH_OF_YEAR = next_tHashInput_29.MONTH_OF_YEAR;
					row79.WEEK_OF_YEAR = next_tHashInput_29.WEEK_OF_YEAR;
					row79.BU = next_tHashInput_29.BU;
					row79.Mnth_Wk_Score = next_tHashInput_29.Mnth_Wk_Score;
					row79.Wk_Score = next_tHashInput_29.Wk_Score;

					/**
					 * [tHashInput_29 begin ] stop
					 */

					/**
					 * [tHashInput_29 main ] start
					 */

					currentComponent = "tHashInput_29";

					tos_count_tHashInput_29++;

					/**
					 * [tHashInput_29 main ] stop
					 */

					/**
					 * [tHashInput_29 process_data_begin ] start
					 */

					currentComponent = "tHashInput_29";

					/**
					 * [tHashInput_29 process_data_begin ] stop
					 */

					/**
					 * [tMap_24 main ] start
					 */

					currentComponent = "tMap_24";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row79");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_24 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_24 = false;
					boolean mainRowRejected_tMap_24 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_24__Struct Var = Var__tMap_24;// ###############################
						// ###############################
						// # Output tables

						CEI_Out = null;

// # Output table : 'CEI_Out'
						CEI_Out_tmp.YEAR_NUM = row79.YEAR_NUM;
						CEI_Out_tmp.MONTH_OF_YEAR = row79.MONTH_OF_YEAR;
						CEI_Out_tmp.WEEK_OF_YEAR = row79.WEEK_OF_YEAR.substring(1, row79.WEEK_OF_YEAR.length());
						CEI_Out_tmp.BU = row79.BU.equals("B2C") ? "cbu"
								: row79.BU.equals("B2B") ? "ebu" : row79.BU.equals("WBU") ? "wbu" : "stc";
						CEI_Out_tmp.Mnth_Wk_Score = Math.round(row79.Mnth_Wk_Score * 100.0) / 100.0 + "";
						CEI_Out_tmp.Wk_Score = Math.round(row79.Wk_Score * 100.0) / 100.0 + "";
						CEI_Out_tmp.CEI_Target = row79.BU.equals("B2C") ? "81.27"
								: row79.BU.equals("B2B") ? "82.43" : row79.BU.equals("WBU") ? "81.48" : "81.57";
						CEI_Out_tmp.CEI_Weekly_Contribution_Trgt = row79.BU.equals("B2C") ? "16.81"
								: row79.BU.equals("B2B") ? "20.02" : row79.BU.equals("WBU") ? "0.76" : "15.98";
						CEI_Out = CEI_Out_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_24 = false;

					tos_count_tMap_24++;

					/**
					 * [tMap_24 main ] stop
					 */

					/**
					 * [tMap_24 process_data_begin ] start
					 */

					currentComponent = "tMap_24";

					/**
					 * [tMap_24 process_data_begin ] stop
					 */
// Start of branch "CEI_Out"
					if (CEI_Out != null) {

						/**
						 * [tAggregateRow_14_AGGOUT main ] start
						 */

						currentVirtualComponent = "tAggregateRow_14";

						currentComponent = "tAggregateRow_14_AGGOUT";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "CEI_Out");
						}

						operation_finder_tAggregateRow_14.YEAR_NUM = CEI_Out.YEAR_NUM;
						operation_finder_tAggregateRow_14.MONTH_OF_YEAR = CEI_Out.MONTH_OF_YEAR;
						operation_finder_tAggregateRow_14.WEEK_OF_YEAR = CEI_Out.WEEK_OF_YEAR;

						operation_finder_tAggregateRow_14.hashCodeDirty = true;

						operation_result_tAggregateRow_14 = hash_tAggregateRow_14
								.get(operation_finder_tAggregateRow_14);

						if (operation_result_tAggregateRow_14 == null) { // G_OutMain_AggR_001

							operation_result_tAggregateRow_14 = new AggOperationStruct_tAggregateRow_14();

							operation_result_tAggregateRow_14.YEAR_NUM = operation_finder_tAggregateRow_14.YEAR_NUM;
							operation_result_tAggregateRow_14.MONTH_OF_YEAR = operation_finder_tAggregateRow_14.MONTH_OF_YEAR;
							operation_result_tAggregateRow_14.WEEK_OF_YEAR = operation_finder_tAggregateRow_14.WEEK_OF_YEAR;

							hash_tAggregateRow_14.put(operation_result_tAggregateRow_14,
									operation_result_tAggregateRow_14);

						} // G_OutMain_AggR_001

						if (operation_result_tAggregateRow_14.BU_list.length() > 0) {
							operation_result_tAggregateRow_14.BU_list.append(",");
						} else if (operation_result_tAggregateRow_14.BU_list_firstEmpty) {
							operation_result_tAggregateRow_14.BU_list.append(",");
						}
						if (operation_result_tAggregateRow_14.BU_list != null) {
							if (operation_result_tAggregateRow_14.BU_list_firstEmpty == false
									&& ("").equals(String.valueOf(CEI_Out.BU))) {
								operation_result_tAggregateRow_14.BU_list_firstEmpty = true;
							}
							operation_result_tAggregateRow_14.BU_list = operation_result_tAggregateRow_14.BU_list
									.append(String.valueOf(CEI_Out.BU));
						}

						if (operation_result_tAggregateRow_14.Wk_Score_list.length() > 0) {
							operation_result_tAggregateRow_14.Wk_Score_list.append(",");
						} else if (operation_result_tAggregateRow_14.Wk_Score_list_firstEmpty) {
							operation_result_tAggregateRow_14.Wk_Score_list.append(",");
						}
						if (operation_result_tAggregateRow_14.Wk_Score_list != null) {
							if (operation_result_tAggregateRow_14.Wk_Score_list_firstEmpty == false
									&& ("").equals(String.valueOf(CEI_Out.Wk_Score))) {
								operation_result_tAggregateRow_14.Wk_Score_list_firstEmpty = true;
							}
							operation_result_tAggregateRow_14.Wk_Score_list = operation_result_tAggregateRow_14.Wk_Score_list
									.append(String.valueOf(CEI_Out.Wk_Score));
						}

						if (operation_result_tAggregateRow_14.Mnth_Wk_Score_list.length() > 0) {
							operation_result_tAggregateRow_14.Mnth_Wk_Score_list.append(",");
						} else if (operation_result_tAggregateRow_14.Mnth_Wk_Score_list_firstEmpty) {
							operation_result_tAggregateRow_14.Mnth_Wk_Score_list.append(",");
						}
						if (operation_result_tAggregateRow_14.Mnth_Wk_Score_list != null) {
							if (operation_result_tAggregateRow_14.Mnth_Wk_Score_list_firstEmpty == false
									&& ("").equals(String.valueOf(CEI_Out.Mnth_Wk_Score))) {
								operation_result_tAggregateRow_14.Mnth_Wk_Score_list_firstEmpty = true;
							}
							operation_result_tAggregateRow_14.Mnth_Wk_Score_list = operation_result_tAggregateRow_14.Mnth_Wk_Score_list
									.append(String.valueOf(CEI_Out.Mnth_Wk_Score));
						}

						if (operation_result_tAggregateRow_14.CEI_Target_list.length() > 0) {
							operation_result_tAggregateRow_14.CEI_Target_list.append(",");
						} else if (operation_result_tAggregateRow_14.CEI_Target_list_firstEmpty) {
							operation_result_tAggregateRow_14.CEI_Target_list.append(",");
						}
						if (operation_result_tAggregateRow_14.CEI_Target_list != null) {
							if (operation_result_tAggregateRow_14.CEI_Target_list_firstEmpty == false
									&& ("").equals(String.valueOf(CEI_Out.CEI_Target))) {
								operation_result_tAggregateRow_14.CEI_Target_list_firstEmpty = true;
							}
							operation_result_tAggregateRow_14.CEI_Target_list = operation_result_tAggregateRow_14.CEI_Target_list
									.append(String.valueOf(CEI_Out.CEI_Target));
						}

						if (operation_result_tAggregateRow_14.CEI_Weekly_Target_list.length() > 0) {
							operation_result_tAggregateRow_14.CEI_Weekly_Target_list.append(",");
						} else if (operation_result_tAggregateRow_14.CEI_Weekly_Target_list_firstEmpty) {
							operation_result_tAggregateRow_14.CEI_Weekly_Target_list.append(",");
						}
						if (operation_result_tAggregateRow_14.CEI_Weekly_Target_list != null) {
							if (operation_result_tAggregateRow_14.CEI_Weekly_Target_list_firstEmpty == false
									&& ("").equals(String.valueOf(CEI_Out.CEI_Weekly_Contribution_Trgt))) {
								operation_result_tAggregateRow_14.CEI_Weekly_Target_list_firstEmpty = true;
							}
							operation_result_tAggregateRow_14.CEI_Weekly_Target_list = operation_result_tAggregateRow_14.CEI_Weekly_Target_list
									.append(String.valueOf(CEI_Out.CEI_Weekly_Contribution_Trgt));
						}

						tos_count_tAggregateRow_14_AGGOUT++;

						/**
						 * [tAggregateRow_14_AGGOUT main ] stop
						 */

						/**
						 * [tAggregateRow_14_AGGOUT process_data_begin ] start
						 */

						currentVirtualComponent = "tAggregateRow_14";

						currentComponent = "tAggregateRow_14_AGGOUT";

						/**
						 * [tAggregateRow_14_AGGOUT process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_14_AGGOUT process_data_end ] start
						 */

						currentVirtualComponent = "tAggregateRow_14";

						currentComponent = "tAggregateRow_14_AGGOUT";

						/**
						 * [tAggregateRow_14_AGGOUT process_data_end ] stop
						 */

					} // End of branch "CEI_Out"

					/**
					 * [tMap_24 process_data_end ] start
					 */

					currentComponent = "tMap_24";

					/**
					 * [tMap_24 process_data_end ] stop
					 */

					/**
					 * [tHashInput_29 process_data_end ] start
					 */

					currentComponent = "tHashInput_29";

					/**
					 * [tHashInput_29 process_data_end ] stop
					 */

					/**
					 * [tHashInput_29 end ] start
					 */

					currentComponent = "tHashInput_29";

					nb_line_tHashInput_29++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_29");

				globalMap.put("tHashInput_29_NB_LINE", nb_line_tHashInput_29);

				ok_Hash.put("tHashInput_29", true);
				end_Hash.put("tHashInput_29", System.currentTimeMillis());

				/**
				 * [tHashInput_29 end ] stop
				 */

				/**
				 * [tMap_24 end ] start
				 */

				currentComponent = "tMap_24";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row79");
				}

				ok_Hash.put("tMap_24", true);
				end_Hash.put("tMap_24", System.currentTimeMillis());

				/**
				 * [tMap_24 end ] stop
				 */

				/**
				 * [tAggregateRow_14_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_14";

				currentComponent = "tAggregateRow_14_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "CEI_Out");
				}

				ok_Hash.put("tAggregateRow_14_AGGOUT", true);
				end_Hash.put("tAggregateRow_14_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_14_AGGOUT end ] stop
				 */

				/**
				 * [tAggregateRow_15_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_15_AGGOUT", false);
				start_Hash.put("tAggregateRow_15_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_15";

				currentComponent = "tAggregateRow_15_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row81");
				}

				int tos_count_tAggregateRow_15_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_15 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_15 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_15 utilClass_tAggregateRow_15 = new UtilClass_tAggregateRow_15();

				class AggOperationStruct_tAggregateRow_15 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;
					StringBuilder CEI_JSON_String_list = new StringBuilder();
					boolean CEI_JSON_String_list_firstEmpty = false;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_15 other = (AggOperationStruct_tAggregateRow_15) obj;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_15 operation_result_tAggregateRow_15 = null;
				AggOperationStruct_tAggregateRow_15 operation_finder_tAggregateRow_15 = new AggOperationStruct_tAggregateRow_15();
				java.util.Map<AggOperationStruct_tAggregateRow_15, AggOperationStruct_tAggregateRow_15> hash_tAggregateRow_15 = new java.util.HashMap<AggOperationStruct_tAggregateRow_15, AggOperationStruct_tAggregateRow_15>();

				String delimiter_tAggregateRow_15 = ",";

				/**
				 * [tAggregateRow_15_AGGOUT begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row80");
				}

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tAggregateRow_14_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_14_AGGIN", false);
				start_Hash.put("tAggregateRow_14_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_14";

				currentComponent = "tAggregateRow_14_AGGIN";

				int tos_count_tAggregateRow_14_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_14> values_tAggregateRow_14 = hash_tAggregateRow_14
						.values();

				globalMap.put("tAggregateRow_14_NB_LINE", values_tAggregateRow_14.size());

				for (AggOperationStruct_tAggregateRow_14 aggregated_row_tAggregateRow_14 : values_tAggregateRow_14) { // G_AggR_600

					/**
					 * [tAggregateRow_14_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_14_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_14";

					currentComponent = "tAggregateRow_14_AGGIN";

					row80.YEAR_NUM = aggregated_row_tAggregateRow_14.YEAR_NUM;

					row80.MONTH_OF_YEAR = aggregated_row_tAggregateRow_14.MONTH_OF_YEAR;

					row80.WEEK_OF_YEAR = aggregated_row_tAggregateRow_14.WEEK_OF_YEAR;

					row80.BU = aggregated_row_tAggregateRow_14.BU_list.toString();

					row80.Mnth_Wk_Score = aggregated_row_tAggregateRow_14.Mnth_Wk_Score_list.toString();

					row80.Wk_Score = aggregated_row_tAggregateRow_14.Wk_Score_list.toString();

					row80.CEI_Target = aggregated_row_tAggregateRow_14.CEI_Target_list.toString();

					row80.CEI_Weekly_Target = aggregated_row_tAggregateRow_14.CEI_Weekly_Target_list.toString();

					tos_count_tAggregateRow_14_AGGIN++;

					/**
					 * [tAggregateRow_14_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_14_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_14";

					currentComponent = "tAggregateRow_14_AGGIN";

					/**
					 * [tAggregateRow_14_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tJavaRow_3 main ] start
					 */

					currentComponent = "tJavaRow_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row80");
					}

					String[] BUs = row80.BU.split(",");
					String[] Mnth_Scores = row80.Mnth_Wk_Score.split(",");
					String[] Wk_Scores = row80.Wk_Score.split(",");
					String[] Mnth_Targets = row80.CEI_Target.split(",");
					String[] Wk_Targets = row80.CEI_Weekly_Target.split(",");

					String Output_Str = "{\"title\": \"cei_weekly_kpi\",\"year\": " + row80.YEAR_NUM
							+ ",\"frequentNo\": " + row80.WEEK_OF_YEAR
							+ ",\"frequentType\":\"weekly\",\"caption\": \"CEI Weekly KPI\",\"createdBy\": \"mortada\",\"keepAudit\": false,\"category\": {\"id\": 1},\"items\":  {";

					for (int i = 0; i < BUs.length; i++) {
						Output_Str += "\"" + BUs[i] + "_trend\": {\"title\": \"" + BUs[i] + "_trend\",\"caption\": \""
								+ BUs[i].toUpperCase() + " Trend\",\"value\": " + Mnth_Scores[i] + ",\"threshold\": "
								+ Mnth_Targets[i] + "}, \"" + BUs[i] + "_contribution\": {\"title\": \"" + BUs[i]
								+ "_contribution\", \"caption\": \"" + BUs[i].toUpperCase()
								+ " Contribution\", \"value\": " + Wk_Scores[i] + ", \"threshold\": " + Wk_Targets[i]
								+ " }";

						if (i != BUs.length - 1) {
							Output_Str += ",";
						}
					}
					Output_Str += "}}";
					row81.CEI_JSON_String = Output_Str;

					nb_line_tJavaRow_3++;

					tos_count_tJavaRow_3++;

					/**
					 * [tJavaRow_3 main ] stop
					 */

					/**
					 * [tJavaRow_3 process_data_begin ] start
					 */

					currentComponent = "tJavaRow_3";

					/**
					 * [tJavaRow_3 process_data_begin ] stop
					 */

					/**
					 * [tAggregateRow_15_AGGOUT main ] start
					 */

					currentVirtualComponent = "tAggregateRow_15";

					currentComponent = "tAggregateRow_15_AGGOUT";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row81");
					}

					operation_finder_tAggregateRow_15.hashCodeDirty = true;

					operation_result_tAggregateRow_15 = hash_tAggregateRow_15.get(operation_finder_tAggregateRow_15);

					if (operation_result_tAggregateRow_15 == null) { // G_OutMain_AggR_001

						operation_result_tAggregateRow_15 = new AggOperationStruct_tAggregateRow_15();

						hash_tAggregateRow_15.put(operation_result_tAggregateRow_15, operation_result_tAggregateRow_15);

					} // G_OutMain_AggR_001

					if (operation_result_tAggregateRow_15.CEI_JSON_String_list.length() > 0) {
						operation_result_tAggregateRow_15.CEI_JSON_String_list.append(",");
					} else if (operation_result_tAggregateRow_15.CEI_JSON_String_list_firstEmpty) {
						operation_result_tAggregateRow_15.CEI_JSON_String_list.append(",");
					}
					if (operation_result_tAggregateRow_15.CEI_JSON_String_list != null) {
						if (operation_result_tAggregateRow_15.CEI_JSON_String_list_firstEmpty == false
								&& ("").equals(String.valueOf(row81.CEI_JSON_String))) {
							operation_result_tAggregateRow_15.CEI_JSON_String_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_15.CEI_JSON_String_list = operation_result_tAggregateRow_15.CEI_JSON_String_list
								.append(String.valueOf(row81.CEI_JSON_String));
					}

					tos_count_tAggregateRow_15_AGGOUT++;

					/**
					 * [tAggregateRow_15_AGGOUT main ] stop
					 */

					/**
					 * [tAggregateRow_15_AGGOUT process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_15";

					currentComponent = "tAggregateRow_15_AGGOUT";

					/**
					 * [tAggregateRow_15_AGGOUT process_data_begin ] stop
					 */

					/**
					 * [tAggregateRow_15_AGGOUT process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_15";

					currentComponent = "tAggregateRow_15_AGGOUT";

					/**
					 * [tAggregateRow_15_AGGOUT process_data_end ] stop
					 */

					/**
					 * [tJavaRow_3 process_data_end ] start
					 */

					currentComponent = "tJavaRow_3";

					/**
					 * [tJavaRow_3 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_14_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_14";

					currentComponent = "tAggregateRow_14_AGGIN";

					/**
					 * [tAggregateRow_14_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_14_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_14";

					currentComponent = "tAggregateRow_14_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_14_AGGIN", true);
				end_Hash.put("tAggregateRow_14_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_14_AGGIN end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row80");
				}

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tAggregateRow_15_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_15";

				currentComponent = "tAggregateRow_15_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row81");
				}

				ok_Hash.put("tAggregateRow_15_AGGOUT", true);
				end_Hash.put("tAggregateRow_15_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_15_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputRaw_1 begin ] start
				 */

				ok_Hash.put("tFileOutputRaw_1", false);
				start_Hash.put("tFileOutputRaw_1", System.currentTimeMillis());

				currentComponent = "tFileOutputRaw_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row70");
				}

				int tos_count_tFileOutputRaw_1 = 0;

				String fileName_tFileOutputRaw_1 = context.ceo_path + "output/weekly/CEI_Weekly_Results.txt";

				/**
				 * [tFileOutputRaw_1 begin ] stop
				 */

				/**
				 * [tLogRow_16 begin ] start
				 */

				ok_Hash.put("tLogRow_16", false);
				start_Hash.put("tLogRow_16", System.currentTimeMillis());

				currentComponent = "tLogRow_16";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row82");
				}

				int tos_count_tLogRow_16 = 0;

				///////////////////////

				class Util_tLogRow_16 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[1];

					public void addRow(String[] row) {

						for (int i = 0; i < 1; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 0 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);

						// last column
						for (int i = 0; i < colLengths[0] - fillChars[0].length() - fillChars[1].length() + 2; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_16 util_tLogRow_16 = new Util_tLogRow_16();
				util_tLogRow_16.setTableName("tLogRow_16");
				util_tLogRow_16.addRow(new String[] { "CEI_JSON_String", });
				StringBuilder strBuffer_tLogRow_16 = null;
				int nb_line_tLogRow_16 = 0;
///////////////////////    			

				/**
				 * [tLogRow_16 begin ] stop
				 */

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row83");
				}

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tAggregateRow_15_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_15_AGGIN", false);
				start_Hash.put("tAggregateRow_15_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_15";

				currentComponent = "tAggregateRow_15_AGGIN";

				int tos_count_tAggregateRow_15_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_15> values_tAggregateRow_15 = hash_tAggregateRow_15
						.values();

				globalMap.put("tAggregateRow_15_NB_LINE", values_tAggregateRow_15.size());

				for (AggOperationStruct_tAggregateRow_15 aggregated_row_tAggregateRow_15 : values_tAggregateRow_15) { // G_AggR_600

					/**
					 * [tAggregateRow_15_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_15_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_15";

					currentComponent = "tAggregateRow_15_AGGIN";

					row83.CEI_JSON_String = aggregated_row_tAggregateRow_15.CEI_JSON_String_list.toString();

					tos_count_tAggregateRow_15_AGGIN++;

					/**
					 * [tAggregateRow_15_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_15_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_15";

					currentComponent = "tAggregateRow_15_AGGIN";

					/**
					 * [tAggregateRow_15_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tJavaRow_4 main ] start
					 */

					currentComponent = "tJavaRow_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row83");
					}

					// Code generated according to input schema and output schema
					row82.CEI_JSON_String = "[" + row83.CEI_JSON_String + "]";

					nb_line_tJavaRow_4++;

					tos_count_tJavaRow_4++;

					/**
					 * [tJavaRow_4 main ] stop
					 */

					/**
					 * [tJavaRow_4 process_data_begin ] start
					 */

					currentComponent = "tJavaRow_4";

					/**
					 * [tJavaRow_4 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_16 main ] start
					 */

					currentComponent = "tLogRow_16";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row82");
					}

///////////////////////		

					String[] row_tLogRow_16 = new String[1];

					if (row82.CEI_JSON_String != null) { //
						row_tLogRow_16[0] = String.valueOf(row82.CEI_JSON_String);

					} //

					util_tLogRow_16.addRow(row_tLogRow_16);
					nb_line_tLogRow_16++;
//////

//////                    

///////////////////////    			

					row70 = row82;

					tos_count_tLogRow_16++;

					/**
					 * [tLogRow_16 main ] stop
					 */

					/**
					 * [tLogRow_16 process_data_begin ] start
					 */

					currentComponent = "tLogRow_16";

					/**
					 * [tLogRow_16 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputRaw_1 main ] start
					 */

					currentComponent = "tFileOutputRaw_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row70");
					}

					try {
						Object content_tFileOutputRaw_1 = row70.CEI_JSON_String;

						if (content_tFileOutputRaw_1 != null) {
							java.io.File file_tFileOutputRaw_1 = new java.io.File(fileName_tFileOutputRaw_1);
							java.io.File parentFile_tFileOutputRaw_1 = file_tFileOutputRaw_1.getParentFile();
							if (parentFile_tFileOutputRaw_1 != null && !parentFile_tFileOutputRaw_1.exists()) {
								parentFile_tFileOutputRaw_1.mkdirs();
							}
							if (content_tFileOutputRaw_1 instanceof String) {
								org.apache.commons.io.FileUtils.writeStringToFile(file_tFileOutputRaw_1,
										content_tFileOutputRaw_1.toString(), "UTF-8");
							} else if (content_tFileOutputRaw_1 instanceof byte[]) {
								org.apache.commons.io.FileUtils.writeByteArrayToFile(file_tFileOutputRaw_1,
										(byte[]) content_tFileOutputRaw_1);
							} else if (content_tFileOutputRaw_1 instanceof java.io.InputStream) {
								java.io.InputStream fis_tFileOutputRaw_1 = (java.io.InputStream) content_tFileOutputRaw_1;
								java.io.FileOutputStream fos_tFileOutputRaw_1 = new java.io.FileOutputStream(
										file_tFileOutputRaw_1);
								byte[] buffer_tFileOutputRaw_1 = new byte[65536];
								int nb_tFileOutputRaw_1 = 0;
								while (true) {
									nb_tFileOutputRaw_1 = fis_tFileOutputRaw_1.read(buffer_tFileOutputRaw_1);
									if (nb_tFileOutputRaw_1 == -1) {
										break;
									}
									fos_tFileOutputRaw_1.write(buffer_tFileOutputRaw_1, 0, nb_tFileOutputRaw_1);
								}
								fis_tFileOutputRaw_1.close();
								fos_tFileOutputRaw_1.close();
							} else {
								org.apache.commons.io.FileUtils.writeStringToFile(file_tFileOutputRaw_1,
										content_tFileOutputRaw_1.toString(), "UTF-8");
							}
						}
					} catch (java.lang.Exception e_tFileOutputRaw_1) {
						System.err.println(e_tFileOutputRaw_1);
					}

					tos_count_tFileOutputRaw_1++;

					/**
					 * [tFileOutputRaw_1 main ] stop
					 */

					/**
					 * [tFileOutputRaw_1 process_data_begin ] start
					 */

					currentComponent = "tFileOutputRaw_1";

					/**
					 * [tFileOutputRaw_1 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputRaw_1 process_data_end ] start
					 */

					currentComponent = "tFileOutputRaw_1";

					/**
					 * [tFileOutputRaw_1 process_data_end ] stop
					 */

					/**
					 * [tLogRow_16 process_data_end ] start
					 */

					currentComponent = "tLogRow_16";

					/**
					 * [tLogRow_16 process_data_end ] stop
					 */

					/**
					 * [tJavaRow_4 process_data_end ] start
					 */

					currentComponent = "tJavaRow_4";

					/**
					 * [tJavaRow_4 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_15_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_15";

					currentComponent = "tAggregateRow_15_AGGIN";

					/**
					 * [tAggregateRow_15_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_15_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_15";

					currentComponent = "tAggregateRow_15_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_15_AGGIN", true);
				end_Hash.put("tAggregateRow_15_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_15_AGGIN end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row83");
				}

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tLogRow_16 end ] start
				 */

				currentComponent = "tLogRow_16";

//////

				java.io.PrintStream consoleOut_tLogRow_16 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_16 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_16 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_16);
				}

				consoleOut_tLogRow_16.println(util_tLogRow_16.format().toString());
				consoleOut_tLogRow_16.flush();
//////
				globalMap.put("tLogRow_16_NB_LINE", nb_line_tLogRow_16);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row82");
				}

				ok_Hash.put("tLogRow_16", true);
				end_Hash.put("tLogRow_16", System.currentTimeMillis());

				/**
				 * [tLogRow_16 end ] stop
				 */

				/**
				 * [tFileOutputRaw_1 end ] start
				 */

				currentComponent = "tFileOutputRaw_1";

				globalMap.put("tFileOutputRaw_1_FILENAME_PATH", fileName_tFileOutputRaw_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row70");
				}

				ok_Hash.put("tFileOutputRaw_1", true);
				end_Hash.put("tFileOutputRaw_1", System.currentTimeMillis());

				/**
				 * [tFileOutputRaw_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_29:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk35", 0, "ok");
			}

			tHashInput_31Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_15_AGGIN"
			globalMap.remove("tAggregateRow_15");

			// free memory for "tAggregateRow_14_AGGIN"
			globalMap.remove("tAggregateRow_14");

			try {

				/**
				 * [tHashInput_29 finally ] start
				 */

				currentComponent = "tHashInput_29";

				/**
				 * [tHashInput_29 finally ] stop
				 */

				/**
				 * [tMap_24 finally ] start
				 */

				currentComponent = "tMap_24";

				/**
				 * [tMap_24 finally ] stop
				 */

				/**
				 * [tAggregateRow_14_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_14";

				currentComponent = "tAggregateRow_14_AGGOUT";

				/**
				 * [tAggregateRow_14_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_14_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_14";

				currentComponent = "tAggregateRow_14_AGGIN";

				/**
				 * [tAggregateRow_14_AGGIN finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tAggregateRow_15_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_15";

				currentComponent = "tAggregateRow_15_AGGOUT";

				/**
				 * [tAggregateRow_15_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_15_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_15";

				currentComponent = "tAggregateRow_15_AGGIN";

				/**
				 * [tAggregateRow_15_AGGIN finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tLogRow_16 finally ] start
				 */

				currentComponent = "tLogRow_16";

				/**
				 * [tLogRow_16 finally ] stop
				 */

				/**
				 * [tFileOutputRaw_1 finally ] start
				 */

				currentComponent = "tFileOutputRaw_1";

				/**
				 * [tFileOutputRaw_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_29_SUBPROCESS_STATE", 1);
	}

	public static class row71Struct implements routines.system.IPersistableRow<row71Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String JSON_String;

		public String getJSON_String() {
			return this.JSON_String;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.JSON_String = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.JSON_String, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("JSON_String=" + JSON_String);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row71Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row92Struct implements routines.system.IPersistableRow<row92Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String JSON_String;

		public String getJSON_String() {
			return this.JSON_String;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.JSON_String = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.JSON_String, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("JSON_String=" + JSON_String);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row92Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row91Struct implements routines.system.IPersistableRow<row91Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String JSON_String;

		public String getJSON_String() {
			return this.JSON_String;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.JSON_String = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.JSON_String, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("JSON_String=" + JSON_String);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row91Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_17
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_17> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String JSON_String;

		public String getJSON_String() {
			return this.JSON_String;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.JSON_String = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.JSON_String, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("JSON_String=" + JSON_String);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_17 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row90Struct implements routines.system.IPersistableRow<row90Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String JSON_String;

		public String getJSON_String() {
			return this.JSON_String;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.JSON_String = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.JSON_String, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("JSON_String=" + JSON_String);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row90Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row69Struct implements routines.system.IPersistableRow<row69Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public Integer WEEK_OF_YEAR;

		public Integer getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readInteger(dis);

					this.Is_weekly = readString(dis);

					this.BU = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Title = readString(dis);

					this.JS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// Integer

				writeInteger(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.JS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + String.valueOf(WEEK_OF_YEAR));
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Title=" + Title);
			sb.append(",JS=" + JS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row69Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class Out182Struct implements routines.system.IPersistableRow<Out182Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public Integer WEEK_OF_YEAR;

		public Integer getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readInteger(dis);

					this.Is_weekly = readString(dis);

					this.BU = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Title = readString(dis);

					this.JS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// Integer

				writeInteger(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.JS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + String.valueOf(WEEK_OF_YEAR));
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Title=" + Title);
			sb.append(",JS=" + JS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(Out182Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row89Struct implements routines.system.IPersistableRow<row89Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.Is_weekly = readString(dis);

					this.BU = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Title = readString(dis);

					this.JS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.JS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Title=" + Title);
			sb.append(",JS=" + JS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row89Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_31_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row89Struct row89 = new row89Struct();
				Out182Struct Out182 = new Out182Struct();
				row69Struct row69 = new row69Struct();
				row90Struct row90 = new row90Struct();
				row91Struct row91 = new row91Struct();
				row92Struct row92 = new row92Struct();
				row92Struct row71 = row92;

				/**
				 * [tAggregateRow_17_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_17_AGGOUT", false);
				start_Hash.put("tAggregateRow_17_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_17";

				currentComponent = "tAggregateRow_17_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row90");
				}

				int tos_count_tAggregateRow_17_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_17 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_17 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_17 utilClass_tAggregateRow_17 = new UtilClass_tAggregateRow_17();

				class AggOperationStruct_tAggregateRow_17 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;
					StringBuilder JSON_String_list = new StringBuilder();
					boolean JSON_String_list_firstEmpty = false;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_17 other = (AggOperationStruct_tAggregateRow_17) obj;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_17 operation_result_tAggregateRow_17 = null;
				AggOperationStruct_tAggregateRow_17 operation_finder_tAggregateRow_17 = new AggOperationStruct_tAggregateRow_17();
				java.util.Map<AggOperationStruct_tAggregateRow_17, AggOperationStruct_tAggregateRow_17> hash_tAggregateRow_17 = new java.util.HashMap<AggOperationStruct_tAggregateRow_17, AggOperationStruct_tAggregateRow_17>();

				String delimiter_tAggregateRow_17 = ",";

				/**
				 * [tAggregateRow_17_AGGOUT begin ] stop
				 */

				/**
				 * [tJavaRow_7 begin ] start
				 */

				ok_Hash.put("tJavaRow_7", false);
				start_Hash.put("tJavaRow_7", System.currentTimeMillis());

				currentComponent = "tJavaRow_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row69");
				}

				int tos_count_tJavaRow_7 = 0;

				int nb_line_tJavaRow_7 = 0;

				/**
				 * [tJavaRow_7 begin ] stop
				 */

				/**
				 * [tFilterRow_4 begin ] start
				 */

				ok_Hash.put("tFilterRow_4", false);
				start_Hash.put("tFilterRow_4", System.currentTimeMillis());

				currentComponent = "tFilterRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Out182");
				}

				int tos_count_tFilterRow_4 = 0;

				int nb_line_tFilterRow_4 = 0;
				int nb_line_ok_tFilterRow_4 = 0;
				int nb_line_reject_tFilterRow_4 = 0;

				class Operator_tFilterRow_4 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_4(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_4 begin ] stop
				 */

				/**
				 * [tMap_26 begin ] start
				 */

				ok_Hash.put("tMap_26", false);
				start_Hash.put("tMap_26", System.currentTimeMillis());

				currentComponent = "tMap_26";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row89");
				}

				int tos_count_tMap_26 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_26__Struct {
				}
				Var__tMap_26__Struct Var__tMap_26 = new Var__tMap_26__Struct();
// ###############################

// ###############################
// # Outputs initialization
				Out182Struct Out182_tmp = new Out182Struct();
// ###############################

				/**
				 * [tMap_26 begin ] stop
				 */

				/**
				 * [tHashInput_31 begin ] start
				 */

				ok_Hash.put("tHashInput_31", false);
				start_Hash.put("tHashInput_31", System.currentTimeMillis());

				currentComponent = "tHashInput_31";

				int tos_count_tHashInput_31 = 0;

				int nb_line_tHashInput_31 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_31 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out11Struct> tHashFile_tHashInput_31 = mf_tHashInput_31
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_19");
				if (tHashFile_tHashInput_31 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<out11Struct> iterator_tHashInput_31 = tHashFile_tHashInput_31.iterator();
				while (iterator_tHashInput_31.hasNext()) {
					out11Struct next_tHashInput_31 = iterator_tHashInput_31.next();

					row89.YEAR_NUM = next_tHashInput_31.YEAR_NUM;
					row89.MONTH_OF_YEAR = next_tHashInput_31.MONTH_OF_YEAR;
					row89.KPI_ID = next_tHashInput_31.KPI_ID;
					row89.FREQUENCY = next_tHashInput_31.FREQUENCY;
					row89.WEEK_OF_YEAR = next_tHashInput_31.WEEK_OF_YEAR;
					row89.Is_weekly = next_tHashInput_31.Is_weekly;
					row89.BU = next_tHashInput_31.BU;
					row89.KPI_DESC = next_tHashInput_31.KPI_DESC;
					row89.Weight = next_tHashInput_31.Weight;
					row89.Month_Differnece = next_tHashInput_31.Month_Differnece;
					row89.Angle_Of_KPI = next_tHashInput_31.Angle_Of_KPI;
					row89.Achieved = next_tHashInput_31.Achieved;
					row89.Distance = next_tHashInput_31.Distance;
					row89.Weight_Disc = next_tHashInput_31.Weight_Disc;
					row89.Total_BU = next_tHashInput_31.Total_BU;
					row89.Score = next_tHashInput_31.Score;
					row89.Cluster_ID = next_tHashInput_31.Cluster_ID;
					row89.SUB_BU = next_tHashInput_31.SUB_BU;
					row89.Title = next_tHashInput_31.Title;
					row89.JS = next_tHashInput_31.JS;

					/**
					 * [tHashInput_31 begin ] stop
					 */

					/**
					 * [tHashInput_31 main ] start
					 */

					currentComponent = "tHashInput_31";

					tos_count_tHashInput_31++;

					/**
					 * [tHashInput_31 main ] stop
					 */

					/**
					 * [tHashInput_31 process_data_begin ] start
					 */

					currentComponent = "tHashInput_31";

					/**
					 * [tHashInput_31 process_data_begin ] stop
					 */

					/**
					 * [tMap_26 main ] start
					 */

					currentComponent = "tMap_26";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row89");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_26 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_26 = false;
					boolean mainRowRejected_tMap_26 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_26__Struct Var = Var__tMap_26;// ###############################
						// ###############################
						// # Output tables

						Out182 = null;

// # Output table : 'Out182'
						Out182_tmp.YEAR_NUM = row89.YEAR_NUM;
						Out182_tmp.MONTH_OF_YEAR = row89.MONTH_OF_YEAR;
						Out182_tmp.KPI_ID = row89.KPI_ID;
						Out182_tmp.FREQUENCY = row89.FREQUENCY;
						Out182_tmp.WEEK_OF_YEAR = Integer
								.parseInt(row89.WEEK_OF_YEAR.substring(1, row89.WEEK_OF_YEAR.length()));
						Out182_tmp.Is_weekly = row89.Is_weekly;
						Out182_tmp.BU = row89.BU;
						Out182_tmp.KPI_DESC = row89.KPI_DESC;
						Out182_tmp.Weight = row89.Weight;
						Out182_tmp.Month_Differnece = row89.Month_Differnece;
						Out182_tmp.Angle_Of_KPI = (row89.Angle_Of_KPI.isNaN()) ? 0 : row89.Angle_Of_KPI;
						Out182_tmp.Achieved = row89.Achieved;
						Out182_tmp.Distance = (row89.Distance.isNaN()) ? 0 : row89.Distance;
						Out182_tmp.Weight_Disc = row89.Weight_Disc;
						Out182_tmp.Total_BU = row89.Total_BU;
						Out182_tmp.Score = row89.Score;
						Out182_tmp.Cluster_ID = row89.Cluster_ID;
						Out182_tmp.SUB_BU = row89.SUB_BU;
						Out182_tmp.Title = row89.Title;
						Out182_tmp.JS = row89.JS;
						Out182 = Out182_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_26 = false;

					tos_count_tMap_26++;

					/**
					 * [tMap_26 main ] stop
					 */

					/**
					 * [tMap_26 process_data_begin ] start
					 */

					currentComponent = "tMap_26";

					/**
					 * [tMap_26 process_data_begin ] stop
					 */
// Start of branch "Out182"
					if (Out182 != null) {

						/**
						 * [tFilterRow_4 main ] start
						 */

						currentComponent = "tFilterRow_4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "Out182");
						}

						row69 = null;
						Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("&&");
						ope_tFilterRow_4
								.matches(
										(Out182.WEEK_OF_YEAR == null ? false
												: Out182.WEEK_OF_YEAR.compareTo(
														ParserUtils.parseTo_Integer(String.valueOf(23))) >= 0),
										"WEEK_OF_YEAR.compareTo(23) >= 0 failed");

						if (ope_tFilterRow_4.getMatchFlag()) {
							if (row69 == null) {
								row69 = new row69Struct();
							}
							row69.YEAR_NUM = Out182.YEAR_NUM;
							row69.MONTH_OF_YEAR = Out182.MONTH_OF_YEAR;
							row69.KPI_ID = Out182.KPI_ID;
							row69.FREQUENCY = Out182.FREQUENCY;
							row69.WEEK_OF_YEAR = Out182.WEEK_OF_YEAR;
							row69.Is_weekly = Out182.Is_weekly;
							row69.BU = Out182.BU;
							row69.KPI_DESC = Out182.KPI_DESC;
							row69.Weight = Out182.Weight;
							row69.Month_Differnece = Out182.Month_Differnece;
							row69.Angle_Of_KPI = Out182.Angle_Of_KPI;
							row69.Achieved = Out182.Achieved;
							row69.Distance = Out182.Distance;
							row69.Weight_Disc = Out182.Weight_Disc;
							row69.Total_BU = Out182.Total_BU;
							row69.Score = Out182.Score;
							row69.Cluster_ID = Out182.Cluster_ID;
							row69.SUB_BU = Out182.SUB_BU;
							row69.Title = Out182.Title;
							row69.JS = Out182.JS;
							nb_line_ok_tFilterRow_4++;
						} else {
							nb_line_reject_tFilterRow_4++;
						}

						nb_line_tFilterRow_4++;

						tos_count_tFilterRow_4++;

						/**
						 * [tFilterRow_4 main ] stop
						 */

						/**
						 * [tFilterRow_4 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_4";

						/**
						 * [tFilterRow_4 process_data_begin ] stop
						 */
// Start of branch "row69"
						if (row69 != null) {

							/**
							 * [tJavaRow_7 main ] start
							 */

							currentComponent = "tJavaRow_7";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row69");
							}

							// Code generated according to input schema and output schema

							String Output_Str = "";
							Output_Str = "{\"caption\": \"" + row69.KPI_DESC + "\",\"title\": \"" + row69.Title
									+ "\",\"weightDescription\": \"" + row69.Weight_Disc + "\",\"businessUnit\": \""
									+ row69.Total_BU + "\",\"clusterId\": " + row69.Cluster_ID + ",\"weight\": "
									+ row69.Weight + ",\"x\": " + row69.Angle_Of_KPI + ",\"y\": " + row69.Distance
									+ ",\"delta\": " + row69.Month_Differnece + ",\"latestScore\": " + row69.Weight
									+ ", \"frequentType\": \"weekly\",\"frequentNo\": " + row69.WEEK_OF_YEAR
									+ ",\"year\": " + row69.YEAR_NUM
									+ ",\"createdBy\": \"mortada\",\"categoryCaption\": \"Weekly\",\"keepAudit\": false,\"indicatorNumber\": "
									+ row69.Achieved + "}";

							row90.JSON_String = Output_Str;

							nb_line_tJavaRow_7++;

							tos_count_tJavaRow_7++;

							/**
							 * [tJavaRow_7 main ] stop
							 */

							/**
							 * [tJavaRow_7 process_data_begin ] start
							 */

							currentComponent = "tJavaRow_7";

							/**
							 * [tJavaRow_7 process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_17_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_17";

							currentComponent = "tAggregateRow_17_AGGOUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row90");
							}

							operation_finder_tAggregateRow_17.hashCodeDirty = true;

							operation_result_tAggregateRow_17 = hash_tAggregateRow_17
									.get(operation_finder_tAggregateRow_17);

							if (operation_result_tAggregateRow_17 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_17 = new AggOperationStruct_tAggregateRow_17();

								hash_tAggregateRow_17.put(operation_result_tAggregateRow_17,
										operation_result_tAggregateRow_17);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_17.JSON_String_list.length() > 0) {
								operation_result_tAggregateRow_17.JSON_String_list.append(",");
							} else if (operation_result_tAggregateRow_17.JSON_String_list_firstEmpty) {
								operation_result_tAggregateRow_17.JSON_String_list.append(",");
							}
							if (operation_result_tAggregateRow_17.JSON_String_list != null) {
								if (operation_result_tAggregateRow_17.JSON_String_list_firstEmpty == false
										&& ("").equals(String.valueOf(row90.JSON_String))) {
									operation_result_tAggregateRow_17.JSON_String_list_firstEmpty = true;
								}
								operation_result_tAggregateRow_17.JSON_String_list = operation_result_tAggregateRow_17.JSON_String_list
										.append(String.valueOf(row90.JSON_String));
							}

							tos_count_tAggregateRow_17_AGGOUT++;

							/**
							 * [tAggregateRow_17_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_17_AGGOUT process_data_begin ] start
							 */

							currentVirtualComponent = "tAggregateRow_17";

							currentComponent = "tAggregateRow_17_AGGOUT";

							/**
							 * [tAggregateRow_17_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_17_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_17";

							currentComponent = "tAggregateRow_17_AGGOUT";

							/**
							 * [tAggregateRow_17_AGGOUT process_data_end ] stop
							 */

							/**
							 * [tJavaRow_7 process_data_end ] start
							 */

							currentComponent = "tJavaRow_7";

							/**
							 * [tJavaRow_7 process_data_end ] stop
							 */

						} // End of branch "row69"

						/**
						 * [tFilterRow_4 process_data_end ] start
						 */

						currentComponent = "tFilterRow_4";

						/**
						 * [tFilterRow_4 process_data_end ] stop
						 */

					} // End of branch "Out182"

					/**
					 * [tMap_26 process_data_end ] start
					 */

					currentComponent = "tMap_26";

					/**
					 * [tMap_26 process_data_end ] stop
					 */

					/**
					 * [tHashInput_31 process_data_end ] start
					 */

					currentComponent = "tHashInput_31";

					/**
					 * [tHashInput_31 process_data_end ] stop
					 */

					/**
					 * [tHashInput_31 end ] start
					 */

					currentComponent = "tHashInput_31";

					nb_line_tHashInput_31++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_19");

				globalMap.put("tHashInput_31_NB_LINE", nb_line_tHashInput_31);

				ok_Hash.put("tHashInput_31", true);
				end_Hash.put("tHashInput_31", System.currentTimeMillis());

				/**
				 * [tHashInput_31 end ] stop
				 */

				/**
				 * [tMap_26 end ] start
				 */

				currentComponent = "tMap_26";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row89");
				}

				ok_Hash.put("tMap_26", true);
				end_Hash.put("tMap_26", System.currentTimeMillis());

				/**
				 * [tMap_26 end ] stop
				 */

				/**
				 * [tFilterRow_4 end ] start
				 */

				currentComponent = "tFilterRow_4";

				globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Out182");
				}

				ok_Hash.put("tFilterRow_4", true);
				end_Hash.put("tFilterRow_4", System.currentTimeMillis());

				/**
				 * [tFilterRow_4 end ] stop
				 */

				/**
				 * [tJavaRow_7 end ] start
				 */

				currentComponent = "tJavaRow_7";

				globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row69");
				}

				ok_Hash.put("tJavaRow_7", true);
				end_Hash.put("tJavaRow_7", System.currentTimeMillis());

				/**
				 * [tJavaRow_7 end ] stop
				 */

				/**
				 * [tAggregateRow_17_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_17";

				currentComponent = "tAggregateRow_17_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row90");
				}

				ok_Hash.put("tAggregateRow_17_AGGOUT", true);
				end_Hash.put("tAggregateRow_17_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_17_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputRaw_2 begin ] start
				 */

				ok_Hash.put("tFileOutputRaw_2", false);
				start_Hash.put("tFileOutputRaw_2", System.currentTimeMillis());

				currentComponent = "tFileOutputRaw_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row71");
				}

				int tos_count_tFileOutputRaw_2 = 0;

				String fileName_tFileOutputRaw_2 = context.ceo_path + "output/weekly/Assurance_Weekly_Results.txt";

				/**
				 * [tFileOutputRaw_2 begin ] stop
				 */

				/**
				 * [tLogRow_18 begin ] start
				 */

				ok_Hash.put("tLogRow_18", false);
				start_Hash.put("tLogRow_18", System.currentTimeMillis());

				currentComponent = "tLogRow_18";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row92");
				}

				int tos_count_tLogRow_18 = 0;

				///////////////////////

				class Util_tLogRow_18 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[1];

					public void addRow(String[] row) {

						for (int i = 0; i < 1; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 0 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);

						// last column
						for (int i = 0; i < colLengths[0] - fillChars[0].length() - fillChars[1].length() + 2; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_18 util_tLogRow_18 = new Util_tLogRow_18();
				util_tLogRow_18.setTableName("tLogRow_18");
				util_tLogRow_18.addRow(new String[] { "JSON_String", });
				StringBuilder strBuffer_tLogRow_18 = null;
				int nb_line_tLogRow_18 = 0;
///////////////////////    			

				/**
				 * [tLogRow_18 begin ] stop
				 */

				/**
				 * [tJavaRow_8 begin ] start
				 */

				ok_Hash.put("tJavaRow_8", false);
				start_Hash.put("tJavaRow_8", System.currentTimeMillis());

				currentComponent = "tJavaRow_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row91");
				}

				int tos_count_tJavaRow_8 = 0;

				int nb_line_tJavaRow_8 = 0;

				/**
				 * [tJavaRow_8 begin ] stop
				 */

				/**
				 * [tAggregateRow_17_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_17_AGGIN", false);
				start_Hash.put("tAggregateRow_17_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_17";

				currentComponent = "tAggregateRow_17_AGGIN";

				int tos_count_tAggregateRow_17_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_17> values_tAggregateRow_17 = hash_tAggregateRow_17
						.values();

				globalMap.put("tAggregateRow_17_NB_LINE", values_tAggregateRow_17.size());

				for (AggOperationStruct_tAggregateRow_17 aggregated_row_tAggregateRow_17 : values_tAggregateRow_17) { // G_AggR_600

					/**
					 * [tAggregateRow_17_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_17_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_17";

					currentComponent = "tAggregateRow_17_AGGIN";

					row91.JSON_String = aggregated_row_tAggregateRow_17.JSON_String_list.toString();

					tos_count_tAggregateRow_17_AGGIN++;

					/**
					 * [tAggregateRow_17_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_17_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_17";

					currentComponent = "tAggregateRow_17_AGGIN";

					/**
					 * [tAggregateRow_17_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tJavaRow_8 main ] start
					 */

					currentComponent = "tJavaRow_8";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row91");
					}

					row92.JSON_String = "[" + row91.JSON_String + "]";

					nb_line_tJavaRow_8++;

					tos_count_tJavaRow_8++;

					/**
					 * [tJavaRow_8 main ] stop
					 */

					/**
					 * [tJavaRow_8 process_data_begin ] start
					 */

					currentComponent = "tJavaRow_8";

					/**
					 * [tJavaRow_8 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_18 main ] start
					 */

					currentComponent = "tLogRow_18";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row92");
					}

///////////////////////		

					String[] row_tLogRow_18 = new String[1];

					if (row92.JSON_String != null) { //
						row_tLogRow_18[0] = String.valueOf(row92.JSON_String);

					} //

					util_tLogRow_18.addRow(row_tLogRow_18);
					nb_line_tLogRow_18++;
//////

//////                    

///////////////////////    			

					row71 = row92;

					tos_count_tLogRow_18++;

					/**
					 * [tLogRow_18 main ] stop
					 */

					/**
					 * [tLogRow_18 process_data_begin ] start
					 */

					currentComponent = "tLogRow_18";

					/**
					 * [tLogRow_18 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputRaw_2 main ] start
					 */

					currentComponent = "tFileOutputRaw_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row71");
					}

					try {
						Object content_tFileOutputRaw_2 = row71.JSON_String;

						if (content_tFileOutputRaw_2 != null) {
							java.io.File file_tFileOutputRaw_2 = new java.io.File(fileName_tFileOutputRaw_2);
							java.io.File parentFile_tFileOutputRaw_2 = file_tFileOutputRaw_2.getParentFile();
							if (parentFile_tFileOutputRaw_2 != null && !parentFile_tFileOutputRaw_2.exists()) {
								parentFile_tFileOutputRaw_2.mkdirs();
							}
							if (content_tFileOutputRaw_2 instanceof String) {
								org.apache.commons.io.FileUtils.writeStringToFile(file_tFileOutputRaw_2,
										content_tFileOutputRaw_2.toString(), "UTF-8");
							} else if (content_tFileOutputRaw_2 instanceof byte[]) {
								org.apache.commons.io.FileUtils.writeByteArrayToFile(file_tFileOutputRaw_2,
										(byte[]) content_tFileOutputRaw_2);
							} else if (content_tFileOutputRaw_2 instanceof java.io.InputStream) {
								java.io.InputStream fis_tFileOutputRaw_2 = (java.io.InputStream) content_tFileOutputRaw_2;
								java.io.FileOutputStream fos_tFileOutputRaw_2 = new java.io.FileOutputStream(
										file_tFileOutputRaw_2);
								byte[] buffer_tFileOutputRaw_2 = new byte[65536];
								int nb_tFileOutputRaw_2 = 0;
								while (true) {
									nb_tFileOutputRaw_2 = fis_tFileOutputRaw_2.read(buffer_tFileOutputRaw_2);
									if (nb_tFileOutputRaw_2 == -1) {
										break;
									}
									fos_tFileOutputRaw_2.write(buffer_tFileOutputRaw_2, 0, nb_tFileOutputRaw_2);
								}
								fis_tFileOutputRaw_2.close();
								fos_tFileOutputRaw_2.close();
							} else {
								org.apache.commons.io.FileUtils.writeStringToFile(file_tFileOutputRaw_2,
										content_tFileOutputRaw_2.toString(), "UTF-8");
							}
						}
					} catch (java.lang.Exception e_tFileOutputRaw_2) {
						System.err.println(e_tFileOutputRaw_2);
					}

					tos_count_tFileOutputRaw_2++;

					/**
					 * [tFileOutputRaw_2 main ] stop
					 */

					/**
					 * [tFileOutputRaw_2 process_data_begin ] start
					 */

					currentComponent = "tFileOutputRaw_2";

					/**
					 * [tFileOutputRaw_2 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputRaw_2 process_data_end ] start
					 */

					currentComponent = "tFileOutputRaw_2";

					/**
					 * [tFileOutputRaw_2 process_data_end ] stop
					 */

					/**
					 * [tLogRow_18 process_data_end ] start
					 */

					currentComponent = "tLogRow_18";

					/**
					 * [tLogRow_18 process_data_end ] stop
					 */

					/**
					 * [tJavaRow_8 process_data_end ] start
					 */

					currentComponent = "tJavaRow_8";

					/**
					 * [tJavaRow_8 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_17_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_17";

					currentComponent = "tAggregateRow_17_AGGIN";

					/**
					 * [tAggregateRow_17_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_17_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_17";

					currentComponent = "tAggregateRow_17_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_17_AGGIN", true);
				end_Hash.put("tAggregateRow_17_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_17_AGGIN end ] stop
				 */

				/**
				 * [tJavaRow_8 end ] start
				 */

				currentComponent = "tJavaRow_8";

				globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row91");
				}

				ok_Hash.put("tJavaRow_8", true);
				end_Hash.put("tJavaRow_8", System.currentTimeMillis());

				/**
				 * [tJavaRow_8 end ] stop
				 */

				/**
				 * [tLogRow_18 end ] start
				 */

				currentComponent = "tLogRow_18";

//////

				java.io.PrintStream consoleOut_tLogRow_18 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_18 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_18 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_18);
				}

				consoleOut_tLogRow_18.println(util_tLogRow_18.format().toString());
				consoleOut_tLogRow_18.flush();
//////
				globalMap.put("tLogRow_18_NB_LINE", nb_line_tLogRow_18);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row92");
				}

				ok_Hash.put("tLogRow_18", true);
				end_Hash.put("tLogRow_18", System.currentTimeMillis());

				/**
				 * [tLogRow_18 end ] stop
				 */

				/**
				 * [tFileOutputRaw_2 end ] start
				 */

				currentComponent = "tFileOutputRaw_2";

				globalMap.put("tFileOutputRaw_2_FILENAME_PATH", fileName_tFileOutputRaw_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row71");
				}

				ok_Hash.put("tFileOutputRaw_2", true);
				end_Hash.put("tFileOutputRaw_2", System.currentTimeMillis());

				/**
				 * [tFileOutputRaw_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_17_AGGIN"
			globalMap.remove("tAggregateRow_17");

			try {

				/**
				 * [tHashInput_31 finally ] start
				 */

				currentComponent = "tHashInput_31";

				/**
				 * [tHashInput_31 finally ] stop
				 */

				/**
				 * [tMap_26 finally ] start
				 */

				currentComponent = "tMap_26";

				/**
				 * [tMap_26 finally ] stop
				 */

				/**
				 * [tFilterRow_4 finally ] start
				 */

				currentComponent = "tFilterRow_4";

				/**
				 * [tFilterRow_4 finally ] stop
				 */

				/**
				 * [tJavaRow_7 finally ] start
				 */

				currentComponent = "tJavaRow_7";

				/**
				 * [tJavaRow_7 finally ] stop
				 */

				/**
				 * [tAggregateRow_17_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_17";

				currentComponent = "tAggregateRow_17_AGGOUT";

				/**
				 * [tAggregateRow_17_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_17_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_17";

				currentComponent = "tAggregateRow_17_AGGIN";

				/**
				 * [tAggregateRow_17_AGGIN finally ] stop
				 */

				/**
				 * [tJavaRow_8 finally ] start
				 */

				currentComponent = "tJavaRow_8";

				/**
				 * [tJavaRow_8 finally ] stop
				 */

				/**
				 * [tLogRow_18 finally ] start
				 */

				currentComponent = "tLogRow_18";

				/**
				 * [tLogRow_18 finally ] stop
				 */

				/**
				 * [tFileOutputRaw_2 finally ] start
				 */

				currentComponent = "tFileOutputRaw_2";

				/**
				 * [tFileOutputRaw_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_31_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_ID2;

		public String getKPI_ID2() {
			return this.KPI_ID2;
		}

		public String KPI_SEGMENT;

		public String getKPI_SEGMENT() {
			return this.KPI_SEGMENT;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public String BU2;

		public String getBU2() {
			return this.BU2;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_ID2 = readString(dis);

					this.KPI_SEGMENT = readString(dis);

					this.KPI_DESC = readString(dis);

					this.BU2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID2, dos);

				// String

				writeString(this.KPI_SEGMENT, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// String

				writeString(this.BU2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_ID2=" + KPI_ID2);
			sb.append(",KPI_SEGMENT=" + KPI_SEGMENT);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",BU2=" + BU2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_ID2;

		public String getKPI_ID2() {
			return this.KPI_ID2;
		}

		public String KPI_SEGMENT;

		public String getKPI_SEGMENT() {
			return this.KPI_SEGMENT;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public String BU2;

		public String getBU2() {
			return this.BU2;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_ID2 = readString(dis);

					this.KPI_SEGMENT = readString(dis);

					this.KPI_DESC = readString(dis);

					this.BU2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID2, dos);

				// String

				writeString(this.KPI_SEGMENT, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// String

				writeString(this.BU2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_ID2=" + KPI_ID2);
			sb.append(",KPI_SEGMENT=" + KPI_SEGMENT);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",BU2=" + BU2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row8Struct row8 = new row8Struct();

				/**
				 * [tHashOutput_1 begin ] start
				 */

				ok_Hash.put("tHashOutput_1", false);
				start_Hash.put("tHashOutput_1", System.currentTimeMillis());

				currentComponent = "tHashOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tHashOutput_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashOutput_1 = null;
				String hashKey_tHashOutput_1 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_1";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_1)) {
					if (mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null) {
						mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
					} else {
						tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
					}
				}
				int nb_line_tHashOutput_1 = 0;

				/**
				 * [tHashOutput_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:CGnDmXlgsvbKESWCEIPA2sCbtl5UlF+CYebzFg==");
				String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
				if (password_tFileInputExcel_1.isEmpty()) {
					password_tFileInputExcel_1 = null;
				}
				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

				Object source_tFileInputExcel_1 = context.ceo_path + "actual_data/weekly/weekly_data.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof String) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_1), password_tFileInputExcel_1);
				} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_1, password_tFileInputExcel_1);
				} else {
					workbook_tFileInputExcel_1 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_1
							.addAll(regexUtil_tFileInputExcel_1.getSheets(workbook_tFileInputExcel_1, "Sheet3", false));
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1 != null
								&& sheetList_FilterNull_tFileInputExcel_1.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 1;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += (sheet_tFileInputExcel_1.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET", sheet_tFileInputExcel_1.getSheetName());
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
							}
							row1 = null;
							int tempRowLength_tFileInputExcel_1 = 12;

							int columnIndex_tFileInputExcel_1 = 0;

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int excel_end_column_tFileInputExcel_1;
							if (row_tFileInputExcel_1 == null) {
								excel_end_column_tFileInputExcel_1 = 0;
							} else {
								excel_end_column_tFileInputExcel_1 = row_tFileInputExcel_1.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_1;
							if (end_column_tFileInputExcel_1 == -1) {
								actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
							} else {
								actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > excel_end_column_tFileInputExcel_1
										? excel_end_column_tFileInputExcel_1
										: end_column_tFileInputExcel_1;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {
								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1
											.getCell(i + start_column_tFileInputExcel_1);
									if (cell_tFileInputExcel_1 != null) {
										switch (cell_tFileInputExcel_1.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_1)) {
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
														.format(cell_tFileInputExcel_1.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_1[i] = String
													.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_1)) {
													temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_1.getNumericCellValue());
													temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_1[i] = String
														.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_1[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_1[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_1[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_1 = false;
							row1 = new row1Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "OBS_DATE";

									if (0 < actual_end_column_tFileInputExcel_1) {
										try {
											if (row_tFileInputExcel_1
													.getCell(columnIndex_tFileInputExcel_1
															+ start_column_tFileInputExcel_1)
													.getCellType() == org.apache.poi.ss.usermodel.CellType.NUMERIC
													&& org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(
															row_tFileInputExcel_1.getCell(columnIndex_tFileInputExcel_1
																	+ start_column_tFileInputExcel_1))) {
												row1.OBS_DATE = row_tFileInputExcel_1.getCell(
														columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1)
														.getDateCellValue();
											} else {
												java.util.Date tempDate_tFileInputExcel_1 = ParserUtils.parseTo_Date(
														temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
														"mm/dd/yyyy");
												if (tempDate_tFileInputExcel_1
														.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS"))
																.parse("9999/12/31 23:59:59.999"))
														|| tempDate_tFileInputExcel_1
																.before((new SimpleDateFormat("yyyy/MM/dd"))
																		.parse("1900/01/01"))) {
													throw new RuntimeException("The cell format is not Date in ( Row. "
															+ (nb_line_tFileInputExcel_1 + 1) + " and ColumnNum. "
															+ curColNum_tFileInputExcel_1 + " )");
												} else {
													row1.OBS_DATE = tempDate_tFileInputExcel_1;
												}
											}
										} catch (java.lang.Exception e) {

											throw new RuntimeException("The cell format is not Date in ( Row. "
													+ (nb_line_tFileInputExcel_1 + 1) + " and ColumnNum. "
													+ curColNum_tFileInputExcel_1 + " )");
										}
									}

								} else {
									row1.OBS_DATE = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "YEAR_NUM";

									row1.YEAR_NUM = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.YEAR_NUM = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 2;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "MONTH_OF_YEAR";

									row1.MONTH_OF_YEAR = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.MONTH_OF_YEAR = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 3;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "BU";

									row1.BU = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.BU = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 4;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "KPI_ID";

									row1.KPI_ID = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.KPI_ID = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 5;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "VAL";

									row1.VAL = ParserUtils.parseTo_Double(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.VAL = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 6;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "FREQUENCY";

									row1.FREQUENCY = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.FREQUENCY = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 7;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "WEEK_OF_YEAR";

									row1.WEEK_OF_YEAR = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.WEEK_OF_YEAR = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 8;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "KPI_ID2";

									row1.KPI_ID2 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.KPI_ID2 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 9;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "KPI_SEGMENT";

									row1.KPI_SEGMENT = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.KPI_SEGMENT = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 10;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "KPI_DESC";

									row1.KPI_DESC = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.KPI_DESC = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 11;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "BU2";

									row1.BU2 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.BU2 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row1 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */

							/**
							 * [tFileInputExcel_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_begin ] stop
							 */
// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tFilterRow_1 main ] start
								 */

								currentComponent = "tFilterRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
								}

								row8 = null;
								Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
								ope_tFilterRow_1.matches(
										(row1.VAL == null ? false
												: row1.VAL.compareTo(
														ParserUtils.parseTo_Double(String.valueOf(0.0))) != 0),
										"VAL.compareTo(0.0) != 0 failed");

								if (ope_tFilterRow_1.getMatchFlag()) {
									if (row8 == null) {
										row8 = new row8Struct();
									}
									row8.OBS_DATE = row1.OBS_DATE;
									row8.YEAR_NUM = row1.YEAR_NUM;
									row8.MONTH_OF_YEAR = row1.MONTH_OF_YEAR;
									row8.BU = row1.BU;
									row8.KPI_ID = row1.KPI_ID;
									row8.VAL = row1.VAL;
									row8.FREQUENCY = row1.FREQUENCY;
									row8.WEEK_OF_YEAR = row1.WEEK_OF_YEAR;
									row8.KPI_ID2 = row1.KPI_ID2;
									row8.KPI_SEGMENT = row1.KPI_SEGMENT;
									row8.KPI_DESC = row1.KPI_DESC;
									row8.BU2 = row1.BU2;
									nb_line_ok_tFilterRow_1++;
								} else {
									nb_line_reject_tFilterRow_1++;
								}

								nb_line_tFilterRow_1++;

								tos_count_tFilterRow_1++;

								/**
								 * [tFilterRow_1 main ] stop
								 */

								/**
								 * [tFilterRow_1 process_data_begin ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_begin ] stop
								 */
// Start of branch "row8"
								if (row8 != null) {

									/**
									 * [tHashOutput_1 main ] start
									 */

									currentComponent = "tHashOutput_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
									}

									row8Struct oneRow_tHashOutput_1 = new row8Struct();

									oneRow_tHashOutput_1.OBS_DATE = row8.OBS_DATE;
									oneRow_tHashOutput_1.YEAR_NUM = row8.YEAR_NUM;
									oneRow_tHashOutput_1.MONTH_OF_YEAR = row8.MONTH_OF_YEAR;
									oneRow_tHashOutput_1.BU = row8.BU;
									oneRow_tHashOutput_1.KPI_ID = row8.KPI_ID;
									oneRow_tHashOutput_1.VAL = row8.VAL;
									oneRow_tHashOutput_1.FREQUENCY = row8.FREQUENCY;
									oneRow_tHashOutput_1.WEEK_OF_YEAR = row8.WEEK_OF_YEAR;
									oneRow_tHashOutput_1.KPI_ID2 = row8.KPI_ID2;
									oneRow_tHashOutput_1.KPI_SEGMENT = row8.KPI_SEGMENT;
									oneRow_tHashOutput_1.KPI_DESC = row8.KPI_DESC;
									oneRow_tHashOutput_1.BU2 = row8.BU2;

									tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
									nb_line_tHashOutput_1++;

									tos_count_tHashOutput_1++;

									/**
									 * [tHashOutput_1 main ] stop
									 */

									/**
									 * [tHashOutput_1 process_data_begin ] start
									 */

									currentComponent = "tHashOutput_1";

									/**
									 * [tHashOutput_1 process_data_begin ] stop
									 */

									/**
									 * [tHashOutput_1 process_data_end ] start
									 */

									currentComponent = "tHashOutput_1";

									/**
									 * [tHashOutput_1 process_data_end ] stop
									 */

								} // End of branch "row8"

								/**
								 * [tFilterRow_1 process_data_end ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_end ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tFileInputExcel_1 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE", nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tHashOutput_1 end ] start
				 */

				currentComponent = "tHashOutput_1";

				globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tHashOutput_1", true);
				end_Hash.put("tHashOutput_1", System.currentTimeMillis());

				/**
				 * [tHashOutput_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk25", 0, "ok");
			}

			tHashInput_27Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tHashOutput_1 finally ] start
				 */

				currentComponent = "tHashOutput_1";

				/**
				 * [tHashOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public static class oWBU_K_W8Struct implements routines.system.IPersistableRow<oWBU_K_W8Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_WBU_Group_Desc;

		public String getKPI_WBU_Group_Desc() {
			return this.KPI_WBU_Group_Desc;
		}

		public Double KPI_WBU_Group_Weight_Threshold;

		public Double getKPI_WBU_Group_Weight_Threshold() {
			return this.KPI_WBU_Group_Weight_Threshold;
		}

		public Integer CountOfActValues;

		public Integer getCountOfActValues() {
			return this.CountOfActValues;
		}

		public Double Single_WBU_KPI_Weight;

		public Double getSingle_WBU_KPI_Weight() {
			return this.Single_WBU_KPI_Weight;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_WBU_Group_Desc = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.KPI_WBU_Group_Weight_Threshold = null;
					} else {
						this.KPI_WBU_Group_Weight_Threshold = dis.readDouble();
					}

					this.CountOfActValues = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Single_WBU_KPI_Weight = null;
					} else {
						this.Single_WBU_KPI_Weight = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_WBU_Group_Desc, dos);

				// Double

				if (this.KPI_WBU_Group_Weight_Threshold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.KPI_WBU_Group_Weight_Threshold);
				}

				// Integer

				writeInteger(this.CountOfActValues, dos);

				// Double

				if (this.Single_WBU_KPI_Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Single_WBU_KPI_Weight);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_WBU_Group_Desc=" + KPI_WBU_Group_Desc);
			sb.append(",KPI_WBU_Group_Weight_Threshold=" + String.valueOf(KPI_WBU_Group_Weight_Threshold));
			sb.append(",CountOfActValues=" + String.valueOf(CountOfActValues));
			sb.append(",Single_WBU_KPI_Weight=" + String.valueOf(Single_WBU_KPI_Weight));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(oWBU_K_W8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row74Struct implements routines.system.IPersistableRow<row74Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_WBU_Group_Desc;

		public String getKPI_WBU_Group_Desc() {
			return this.KPI_WBU_Group_Desc;
		}

		public Double KPI_WBU_Group_Weight_Threshold;

		public Double getKPI_WBU_Group_Weight_Threshold() {
			return this.KPI_WBU_Group_Weight_Threshold;
		}

		public Integer CountOfActValues;

		public Integer getCountOfActValues() {
			return this.CountOfActValues;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_WBU_Group_Desc = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.KPI_WBU_Group_Weight_Threshold = null;
					} else {
						this.KPI_WBU_Group_Weight_Threshold = dis.readDouble();
					}

					this.CountOfActValues = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_WBU_Group_Desc, dos);

				// Double

				if (this.KPI_WBU_Group_Weight_Threshold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.KPI_WBU_Group_Weight_Threshold);
				}

				// Integer

				writeInteger(this.CountOfActValues, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_WBU_Group_Desc=" + KPI_WBU_Group_Desc);
			sb.append(",KPI_WBU_Group_Weight_Threshold=" + String.valueOf(KPI_WBU_Group_Weight_Threshold));
			sb.append(",CountOfActValues=" + String.valueOf(CountOfActValues));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row74Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_13
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_13> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_WBU_Group_Desc;

		public String getKPI_WBU_Group_Desc() {
			return this.KPI_WBU_Group_Desc;
		}

		public Double KPI_WBU_Group_Weight_Threshold;

		public Double getKPI_WBU_Group_Weight_Threshold() {
			return this.KPI_WBU_Group_Weight_Threshold;
		}

		public Integer CountOfActValues;

		public Integer getCountOfActValues() {
			return this.CountOfActValues;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_WBU_Group_Desc = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.KPI_WBU_Group_Weight_Threshold = null;
					} else {
						this.KPI_WBU_Group_Weight_Threshold = dis.readDouble();
					}

					this.CountOfActValues = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_WBU_Group_Desc, dos);

				// Double

				if (this.KPI_WBU_Group_Weight_Threshold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.KPI_WBU_Group_Weight_Threshold);
				}

				// Integer

				writeInteger(this.CountOfActValues, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_WBU_Group_Desc=" + KPI_WBU_Group_Desc);
			sb.append(",KPI_WBU_Group_Weight_Threshold=" + String.valueOf(KPI_WBU_Group_Weight_Threshold));
			sb.append(",CountOfActValues=" + String.valueOf(CountOfActValues));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_13 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_WBU_Group_Desc;

		public String getKPI_WBU_Group_Desc() {
			return this.KPI_WBU_Group_Desc;
		}

		public Double KPI_WBU_Group_Weight_Threshold;

		public Double getKPI_WBU_Group_Weight_Threshold() {
			return this.KPI_WBU_Group_Weight_Threshold;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_WBU_Group_Desc = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.KPI_WBU_Group_Weight_Threshold = null;
					} else {
						this.KPI_WBU_Group_Weight_Threshold = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_WBU_Group_Desc, dos);

				// Double

				if (this.KPI_WBU_Group_Weight_Threshold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.KPI_WBU_Group_Weight_Threshold);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_WBU_Group_Desc=" + KPI_WBU_Group_Desc);
			sb.append(",KPI_WBU_Group_Weight_Threshold=" + String.valueOf(KPI_WBU_Group_Weight_Threshold));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row72Struct implements routines.system.IPersistableRow<row72Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_ID2;

		public String getKPI_ID2() {
			return this.KPI_ID2;
		}

		public String KPI_SEGMENT;

		public String getKPI_SEGMENT() {
			return this.KPI_SEGMENT;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public String BU2;

		public String getBU2() {
			return this.BU2;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_ID2 = readString(dis);

					this.KPI_SEGMENT = readString(dis);

					this.KPI_DESC = readString(dis);

					this.BU2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID2, dos);

				// String

				writeString(this.KPI_SEGMENT, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// String

				writeString(this.BU2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_ID2=" + KPI_ID2);
			sb.append(",KPI_SEGMENT=" + KPI_SEGMENT);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",BU2=" + BU2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row72Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tHashInput_27Struct
			implements routines.system.IPersistableRow<after_tHashInput_27Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_ID2;

		public String getKPI_ID2() {
			return this.KPI_ID2;
		}

		public String KPI_SEGMENT;

		public String getKPI_SEGMENT() {
			return this.KPI_SEGMENT;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public String BU2;

		public String getBU2() {
			return this.BU2;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_ID2 = readString(dis);

					this.KPI_SEGMENT = readString(dis);

					this.KPI_DESC = readString(dis);

					this.BU2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID2, dos);

				// String

				writeString(this.KPI_SEGMENT, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// String

				writeString(this.BU2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_ID2=" + KPI_ID2);
			sb.append(",KPI_SEGMENT=" + KPI_SEGMENT);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",BU2=" + BU2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tHashInput_27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_27_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputExcel_3Process(globalMap);

				row72Struct row72 = new row72Struct();
				out5Struct out5 = new out5Struct();
				row74Struct row74 = new row74Struct();
				oWBU_K_W8Struct oWBU_K_W8 = new oWBU_K_W8Struct();

				/**
				 * [tAggregateRow_13_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_13_AGGOUT", false);
				start_Hash.put("tAggregateRow_13_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_13";

				currentComponent = "tAggregateRow_13_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out5");
				}

				int tos_count_tAggregateRow_13_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_13 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_13 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_13 utilClass_tAggregateRow_13 = new UtilClass_tAggregateRow_13();

				class AggOperationStruct_tAggregateRow_13 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String YEAR_NUM;
					String MONTH_OF_YEAR;
					String WEEK_OF_YEAR;
					String KPI_WBU_Group_Desc;
					Double KPI_WBU_Group_Weight_Threshold_max;
					int count = 0;
					int CountOfActValues_clmCount = 0;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

							result = prime * result
									+ ((this.MONTH_OF_YEAR == null) ? 0 : this.MONTH_OF_YEAR.hashCode());

							result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

							result = prime * result
									+ ((this.KPI_WBU_Group_Desc == null) ? 0 : this.KPI_WBU_Group_Desc.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_13 other = (AggOperationStruct_tAggregateRow_13) obj;

						if (this.YEAR_NUM == null) {
							if (other.YEAR_NUM != null)
								return false;
						} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))
							return false;

						if (this.MONTH_OF_YEAR == null) {
							if (other.MONTH_OF_YEAR != null)
								return false;
						} else if (!this.MONTH_OF_YEAR.equals(other.MONTH_OF_YEAR))
							return false;

						if (this.WEEK_OF_YEAR == null) {
							if (other.WEEK_OF_YEAR != null)
								return false;
						} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))
							return false;

						if (this.KPI_WBU_Group_Desc == null) {
							if (other.KPI_WBU_Group_Desc != null)
								return false;
						} else if (!this.KPI_WBU_Group_Desc.equals(other.KPI_WBU_Group_Desc))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_13 operation_result_tAggregateRow_13 = null;
				AggOperationStruct_tAggregateRow_13 operation_finder_tAggregateRow_13 = new AggOperationStruct_tAggregateRow_13();
				java.util.Map<AggOperationStruct_tAggregateRow_13, AggOperationStruct_tAggregateRow_13> hash_tAggregateRow_13 = new java.util.HashMap<AggOperationStruct_tAggregateRow_13, AggOperationStruct_tAggregateRow_13>();

				/**
				 * [tAggregateRow_13_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_21 begin ] start
				 */

				ok_Hash.put("tMap_21", false);
				start_Hash.put("tMap_21", System.currentTimeMillis());

				currentComponent = "tMap_21";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row72");
				}

				int tos_count_tMap_21 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row73Struct> tHash_Lookup_row73 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row73Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row73Struct>) globalMap
						.get("tHash_Lookup_row73"));

				row73Struct row73HashKey = new row73Struct();
				row73Struct row73Default = new row73Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_21__Struct {
				}
				Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out5Struct out5_tmp = new out5Struct();
// ###############################

				/**
				 * [tMap_21 begin ] stop
				 */

				/**
				 * [tHashInput_27 begin ] start
				 */

				ok_Hash.put("tHashInput_27", false);
				start_Hash.put("tHashInput_27", System.currentTimeMillis());

				currentComponent = "tHashInput_27";

				int tos_count_tHashInput_27 = 0;

				int nb_line_tHashInput_27 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_27 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_27 = mf_tHashInput_27
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_1");
				if (tHashFile_tHashInput_27 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row8Struct> iterator_tHashInput_27 = tHashFile_tHashInput_27.iterator();
				while (iterator_tHashInput_27.hasNext()) {
					row8Struct next_tHashInput_27 = iterator_tHashInput_27.next();

					row72.OBS_DATE = next_tHashInput_27.OBS_DATE;
					row72.YEAR_NUM = next_tHashInput_27.YEAR_NUM;
					row72.MONTH_OF_YEAR = next_tHashInput_27.MONTH_OF_YEAR;
					row72.BU = next_tHashInput_27.BU;
					row72.KPI_ID = next_tHashInput_27.KPI_ID;
					row72.VAL = next_tHashInput_27.VAL;
					row72.FREQUENCY = next_tHashInput_27.FREQUENCY;
					row72.WEEK_OF_YEAR = next_tHashInput_27.WEEK_OF_YEAR;
					row72.KPI_ID2 = next_tHashInput_27.KPI_ID2;
					row72.KPI_SEGMENT = next_tHashInput_27.KPI_SEGMENT;
					row72.KPI_DESC = next_tHashInput_27.KPI_DESC;
					row72.BU2 = next_tHashInput_27.BU2;

					/**
					 * [tHashInput_27 begin ] stop
					 */

					/**
					 * [tHashInput_27 main ] start
					 */

					currentComponent = "tHashInput_27";

					tos_count_tHashInput_27++;

					/**
					 * [tHashInput_27 main ] stop
					 */

					/**
					 * [tHashInput_27 process_data_begin ] start
					 */

					currentComponent = "tHashInput_27";

					/**
					 * [tHashInput_27 process_data_begin ] stop
					 */

					/**
					 * [tMap_21 main ] start
					 */

					currentComponent = "tMap_21";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row72");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_21 = false;
					boolean mainRowRejected_tMap_21 = false;

					///////////////////////////////////////////////
					// Starting Lookup Table "row73"
					///////////////////////////////////////////////

					boolean forceLooprow73 = false;

					row73Struct row73ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_21) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_21 = false;

						row73HashKey.KPI_id = row72.KPI_ID;

						row73HashKey.Year = row72.YEAR_NUM;

						row73HashKey.Month = row72.MONTH_OF_YEAR;

						row73HashKey.hashCodeDirty = true;

						tHash_Lookup_row73.lookup(row73HashKey);

						if (!tHash_Lookup_row73.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_21 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					if (tHash_Lookup_row73 != null && tHash_Lookup_row73.getCount(row73HashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
						// 'row73' and it contains more one result from keys : row73.KPI_id = '" +
						// row73HashKey.KPI_id + "', row73.Year = '" + row73HashKey.Year + "',
						// row73.Month = '" + row73HashKey.Month + "'");
					} // G 071

					row73Struct row73 = null;

					row73Struct fromLookup_row73 = null;
					row73 = row73Default;

					if (tHash_Lookup_row73 != null && tHash_Lookup_row73.hasNext()) { // G 099

						fromLookup_row73 = tHash_Lookup_row73.next();

					} // G 099

					if (fromLookup_row73 != null) {
						row73 = fromLookup_row73;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
						// ###############################
						// # Output tables

						out5 = null;

						if (!rejectedInnerJoin_tMap_21) {

// # Output table : 'out5'
							out5_tmp.YEAR_NUM = row72.YEAR_NUM;
							out5_tmp.MONTH_OF_YEAR = row72.MONTH_OF_YEAR;
							out5_tmp.WEEK_OF_YEAR = row72.WEEK_OF_YEAR;
							out5_tmp.KPI_WBU_Group_Desc = row73.KPI_WBU_Group_Desc;
							out5_tmp.KPI_WBU_Group_Weight_Threshold = StringHandling
									.LEN(row73.KPI_WBU_Group_Weight_Threshold) > 0
											? Double.parseDouble(row73.KPI_WBU_Group_Weight_Threshold)
											: 0;
							out5 = out5_tmp;
						} // closing inner join bracket (2)
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_21 = false;

					tos_count_tMap_21++;

					/**
					 * [tMap_21 main ] stop
					 */

					/**
					 * [tMap_21 process_data_begin ] start
					 */

					currentComponent = "tMap_21";

					/**
					 * [tMap_21 process_data_begin ] stop
					 */
// Start of branch "out5"
					if (out5 != null) {

						/**
						 * [tAggregateRow_13_AGGOUT main ] start
						 */

						currentVirtualComponent = "tAggregateRow_13";

						currentComponent = "tAggregateRow_13_AGGOUT";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "out5");
						}

						operation_finder_tAggregateRow_13.YEAR_NUM = out5.YEAR_NUM;
						operation_finder_tAggregateRow_13.MONTH_OF_YEAR = out5.MONTH_OF_YEAR;
						operation_finder_tAggregateRow_13.WEEK_OF_YEAR = out5.WEEK_OF_YEAR;
						operation_finder_tAggregateRow_13.KPI_WBU_Group_Desc = out5.KPI_WBU_Group_Desc;

						operation_finder_tAggregateRow_13.hashCodeDirty = true;

						operation_result_tAggregateRow_13 = hash_tAggregateRow_13
								.get(operation_finder_tAggregateRow_13);

						boolean isFirstAdd_tAggregateRow_13 = false;

						if (operation_result_tAggregateRow_13 == null) { // G_OutMain_AggR_001

							operation_result_tAggregateRow_13 = new AggOperationStruct_tAggregateRow_13();

							operation_result_tAggregateRow_13.YEAR_NUM = operation_finder_tAggregateRow_13.YEAR_NUM;
							operation_result_tAggregateRow_13.MONTH_OF_YEAR = operation_finder_tAggregateRow_13.MONTH_OF_YEAR;
							operation_result_tAggregateRow_13.WEEK_OF_YEAR = operation_finder_tAggregateRow_13.WEEK_OF_YEAR;
							operation_result_tAggregateRow_13.KPI_WBU_Group_Desc = operation_finder_tAggregateRow_13.KPI_WBU_Group_Desc;

							isFirstAdd_tAggregateRow_13 = true;

							hash_tAggregateRow_13.put(operation_result_tAggregateRow_13,
									operation_result_tAggregateRow_13);

						} // G_OutMain_AggR_001

						if (operation_result_tAggregateRow_13.KPI_WBU_Group_Weight_Threshold_max == null
								|| out5.KPI_WBU_Group_Weight_Threshold > operation_result_tAggregateRow_13.KPI_WBU_Group_Weight_Threshold_max

						) {
							operation_result_tAggregateRow_13.KPI_WBU_Group_Weight_Threshold_max = out5.KPI_WBU_Group_Weight_Threshold;
						}

						operation_result_tAggregateRow_13.CountOfActValues_clmCount++;
						operation_result_tAggregateRow_13.count++;

						tos_count_tAggregateRow_13_AGGOUT++;

						/**
						 * [tAggregateRow_13_AGGOUT main ] stop
						 */

						/**
						 * [tAggregateRow_13_AGGOUT process_data_begin ] start
						 */

						currentVirtualComponent = "tAggregateRow_13";

						currentComponent = "tAggregateRow_13_AGGOUT";

						/**
						 * [tAggregateRow_13_AGGOUT process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_13_AGGOUT process_data_end ] start
						 */

						currentVirtualComponent = "tAggregateRow_13";

						currentComponent = "tAggregateRow_13_AGGOUT";

						/**
						 * [tAggregateRow_13_AGGOUT process_data_end ] stop
						 */

					} // End of branch "out5"

					/**
					 * [tMap_21 process_data_end ] start
					 */

					currentComponent = "tMap_21";

					/**
					 * [tMap_21 process_data_end ] stop
					 */

					/**
					 * [tHashInput_27 process_data_end ] start
					 */

					currentComponent = "tHashInput_27";

					/**
					 * [tHashInput_27 process_data_end ] stop
					 */

					/**
					 * [tHashInput_27 end ] start
					 */

					currentComponent = "tHashInput_27";

					nb_line_tHashInput_27++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_1");

				globalMap.put("tHashInput_27_NB_LINE", nb_line_tHashInput_27);

				ok_Hash.put("tHashInput_27", true);
				end_Hash.put("tHashInput_27", System.currentTimeMillis());

				/**
				 * [tHashInput_27 end ] stop
				 */

				/**
				 * [tMap_21 end ] start
				 */

				currentComponent = "tMap_21";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row73 != null) {
					tHash_Lookup_row73.endGet();
				}
				globalMap.remove("tHash_Lookup_row73");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row72");
				}

				ok_Hash.put("tMap_21", true);
				end_Hash.put("tMap_21", System.currentTimeMillis());

				/**
				 * [tMap_21 end ] stop
				 */

				/**
				 * [tAggregateRow_13_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_13";

				currentComponent = "tAggregateRow_13_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out5");
				}

				ok_Hash.put("tAggregateRow_13_AGGOUT", true);
				end_Hash.put("tAggregateRow_13_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_13_AGGOUT end ] stop
				 */

				/**
				 * [tHashOutput_10 begin ] start
				 */

				ok_Hash.put("tHashOutput_10", false);
				start_Hash.put("tHashOutput_10", System.currentTimeMillis());

				currentComponent = "tHashOutput_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "oWBU_K_W8");
				}

				int tos_count_tHashOutput_10 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_10 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<oWBU_K_W8Struct> tHashFile_tHashOutput_10 = null;
				String hashKey_tHashOutput_10 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_10";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_10)) {
					if (mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10) == null) {
						mf_tHashOutput_10.getResourceMap().put(hashKey_tHashOutput_10,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<oWBU_K_W8Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
					} else {
						tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
					}
				}
				int nb_line_tHashOutput_10 = 0;

				/**
				 * [tHashOutput_10 begin ] stop
				 */

				/**
				 * [tMap_22 begin ] start
				 */

				ok_Hash.put("tMap_22", false);
				start_Hash.put("tMap_22", System.currentTimeMillis());

				currentComponent = "tMap_22";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row74");
				}

				int tos_count_tMap_22 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_22__Struct {
				}
				Var__tMap_22__Struct Var__tMap_22 = new Var__tMap_22__Struct();
// ###############################

// ###############################
// # Outputs initialization
				oWBU_K_W8Struct oWBU_K_W8_tmp = new oWBU_K_W8Struct();
// ###############################

				/**
				 * [tMap_22 begin ] stop
				 */

				/**
				 * [tAggregateRow_13_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_13_AGGIN", false);
				start_Hash.put("tAggregateRow_13_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_13";

				currentComponent = "tAggregateRow_13_AGGIN";

				int tos_count_tAggregateRow_13_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_13> values_tAggregateRow_13 = hash_tAggregateRow_13
						.values();

				globalMap.put("tAggregateRow_13_NB_LINE", values_tAggregateRow_13.size());

				for (AggOperationStruct_tAggregateRow_13 aggregated_row_tAggregateRow_13 : values_tAggregateRow_13) { // G_AggR_600

					/**
					 * [tAggregateRow_13_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_13_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_13";

					currentComponent = "tAggregateRow_13_AGGIN";

					row74.YEAR_NUM = aggregated_row_tAggregateRow_13.YEAR_NUM;

					row74.MONTH_OF_YEAR = aggregated_row_tAggregateRow_13.MONTH_OF_YEAR;

					row74.WEEK_OF_YEAR = aggregated_row_tAggregateRow_13.WEEK_OF_YEAR;

					row74.KPI_WBU_Group_Desc = aggregated_row_tAggregateRow_13.KPI_WBU_Group_Desc;

					row74.KPI_WBU_Group_Weight_Threshold = aggregated_row_tAggregateRow_13.KPI_WBU_Group_Weight_Threshold_max;
					row74.CountOfActValues = (int) aggregated_row_tAggregateRow_13.count;
					row74.CountOfActValues = (int) aggregated_row_tAggregateRow_13.CountOfActValues_clmCount;

					tos_count_tAggregateRow_13_AGGIN++;

					/**
					 * [tAggregateRow_13_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_13_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_13";

					currentComponent = "tAggregateRow_13_AGGIN";

					/**
					 * [tAggregateRow_13_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tMap_22 main ] start
					 */

					currentComponent = "tMap_22";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row74");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_22 = false;
					boolean mainRowRejected_tMap_22 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
						// ###############################
						// # Output tables

						oWBU_K_W8 = null;

// # Output table : 'oWBU_K_W8'
						oWBU_K_W8_tmp.YEAR_NUM = row74.YEAR_NUM;
						oWBU_K_W8_tmp.MONTH_OF_YEAR = row74.MONTH_OF_YEAR;
						oWBU_K_W8_tmp.WEEK_OF_YEAR = row74.WEEK_OF_YEAR;
						oWBU_K_W8_tmp.KPI_WBU_Group_Desc = row74.KPI_WBU_Group_Desc;
						oWBU_K_W8_tmp.KPI_WBU_Group_Weight_Threshold = row74.KPI_WBU_Group_Weight_Threshold;
						oWBU_K_W8_tmp.CountOfActValues = row74.CountOfActValues;
						oWBU_K_W8_tmp.Single_WBU_KPI_Weight = row74.KPI_WBU_Group_Weight_Threshold
								/ row74.CountOfActValues;
						oWBU_K_W8 = oWBU_K_W8_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_22 = false;

					tos_count_tMap_22++;

					/**
					 * [tMap_22 main ] stop
					 */

					/**
					 * [tMap_22 process_data_begin ] start
					 */

					currentComponent = "tMap_22";

					/**
					 * [tMap_22 process_data_begin ] stop
					 */
// Start of branch "oWBU_K_W8"
					if (oWBU_K_W8 != null) {

						/**
						 * [tHashOutput_10 main ] start
						 */

						currentComponent = "tHashOutput_10";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "oWBU_K_W8");
						}

						oWBU_K_W8Struct oneRow_tHashOutput_10 = new oWBU_K_W8Struct();

						oneRow_tHashOutput_10.YEAR_NUM = oWBU_K_W8.YEAR_NUM;
						oneRow_tHashOutput_10.MONTH_OF_YEAR = oWBU_K_W8.MONTH_OF_YEAR;
						oneRow_tHashOutput_10.WEEK_OF_YEAR = oWBU_K_W8.WEEK_OF_YEAR;
						oneRow_tHashOutput_10.KPI_WBU_Group_Desc = oWBU_K_W8.KPI_WBU_Group_Desc;
						oneRow_tHashOutput_10.KPI_WBU_Group_Weight_Threshold = oWBU_K_W8.KPI_WBU_Group_Weight_Threshold;
						oneRow_tHashOutput_10.CountOfActValues = oWBU_K_W8.CountOfActValues;
						oneRow_tHashOutput_10.Single_WBU_KPI_Weight = oWBU_K_W8.Single_WBU_KPI_Weight;

						tHashFile_tHashOutput_10.put(oneRow_tHashOutput_10);
						nb_line_tHashOutput_10++;

						tos_count_tHashOutput_10++;

						/**
						 * [tHashOutput_10 main ] stop
						 */

						/**
						 * [tHashOutput_10 process_data_begin ] start
						 */

						currentComponent = "tHashOutput_10";

						/**
						 * [tHashOutput_10 process_data_begin ] stop
						 */

						/**
						 * [tHashOutput_10 process_data_end ] start
						 */

						currentComponent = "tHashOutput_10";

						/**
						 * [tHashOutput_10 process_data_end ] stop
						 */

					} // End of branch "oWBU_K_W8"

					/**
					 * [tMap_22 process_data_end ] start
					 */

					currentComponent = "tMap_22";

					/**
					 * [tMap_22 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_13_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_13";

					currentComponent = "tAggregateRow_13_AGGIN";

					/**
					 * [tAggregateRow_13_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_13_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_13";

					currentComponent = "tAggregateRow_13_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_13_AGGIN", true);
				end_Hash.put("tAggregateRow_13_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_13_AGGIN end ] stop
				 */

				/**
				 * [tMap_22 end ] start
				 */

				currentComponent = "tMap_22";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row74");
				}

				ok_Hash.put("tMap_22", true);
				end_Hash.put("tMap_22", System.currentTimeMillis());

				/**
				 * [tMap_22 end ] stop
				 */

				/**
				 * [tHashOutput_10 end ] start
				 */

				currentComponent = "tHashOutput_10";

				globalMap.put("tHashOutput_10_NB_LINE", nb_line_tHashOutput_10);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "oWBU_K_W8");
				}

				ok_Hash.put("tHashOutput_10", true);
				end_Hash.put("tHashOutput_10", System.currentTimeMillis());

				/**
				 * [tHashOutput_10 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_27:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tFileInputExcel_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_13_AGGIN"
			globalMap.remove("tAggregateRow_13");

			// free memory for "tMap_21"
			globalMap.remove("tHash_Lookup_row73");

			try {

				/**
				 * [tHashInput_27 finally ] start
				 */

				currentComponent = "tHashInput_27";

				/**
				 * [tHashInput_27 finally ] stop
				 */

				/**
				 * [tMap_21 finally ] start
				 */

				currentComponent = "tMap_21";

				/**
				 * [tMap_21 finally ] stop
				 */

				/**
				 * [tAggregateRow_13_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_13";

				currentComponent = "tAggregateRow_13_AGGOUT";

				/**
				 * [tAggregateRow_13_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_13_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_13";

				currentComponent = "tAggregateRow_13_AGGIN";

				/**
				 * [tAggregateRow_13_AGGIN finally ] stop
				 */

				/**
				 * [tMap_22 finally ] start
				 */

				currentComponent = "tMap_22";

				/**
				 * [tMap_22 finally ] stop
				 */

				/**
				 * [tHashOutput_10 finally ] start
				 */

				currentComponent = "tHashOutput_10";

				/**
				 * [tHashOutput_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_27_SUBPROCESS_STATE", 1);
	}

	public static class tMap_23_outStruct implements routines.system.IPersistableRow<tMap_23_outStruct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String KPI_id;

		public String getKPI_id() {
			return this.KPI_id;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_name;

		public String getKPI_name() {
			return this.KPI_name;
		}

		public Double Prop_target;

		public Double getProp_target() {
			return this.Prop_target;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public Integer KPI_dierection;

		public Integer getKPI_dierection() {
			return this.KPI_dierection;
		}

		public String Year;

		public String getYear() {
			return this.Year;
		}

		public String Month;

		public String getMonth() {
			return this.Month;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public Double Apa;

		public Double getApa() {
			return this.Apa;
		}

		public Double Amb_target;

		public Double getAmb_target() {
			return this.Amb_target;
		}

		public String Category_change;

		public String getCategory_change() {
			return this.Category_change;
		}

		public String Target_Type;

		public String getTarget_Type() {
			return this.Target_Type;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public Double baseline;

		public Double getBaseline() {
			return this.baseline;
		}

		public String unit;

		public String getUnit() {
			return this.unit;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.KPI_id = readString(dis);

					this.Is_weekly = readString(dis);

					this.BU = readString(dis);

					this.KPI_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Prop_target = null;
					} else {
						this.Prop_target = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					this.JS = readString(dis);

					this.S_JS = readString(dis);

					this.KPI_dierection = readInteger(dis);

					this.Year = readString(dis);

					this.Month = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Apa = null;
					} else {
						this.Apa = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Amb_target = null;
					} else {
						this.Amb_target = dis.readDouble();
					}

					this.Category_change = readString(dis);

					this.Target_Type = readString(dis);

					this.SUB_BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.baseline = null;
					} else {
						this.baseline = dis.readDouble();
					}

					this.unit = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.KPI_id, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_name, dos);

				// Double

				if (this.Prop_target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Prop_target);
				}

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// String

				writeString(this.JS, dos);

				// String

				writeString(this.S_JS, dos);

				// Integer

				writeInteger(this.KPI_dierection, dos);

				// String

				writeString(this.Year, dos);

				// String

				writeString(this.Month, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// Double

				if (this.Apa == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Apa);
				}

				// Double

				if (this.Amb_target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Amb_target);
				}

				// String

				writeString(this.Category_change, dos);

				// String

				writeString(this.Target_Type, dos);

				// String

				writeString(this.SUB_BU, dos);

				// Double

				if (this.baseline == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.baseline);
				}

				// String

				writeString(this.unit, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("KPI_id=" + KPI_id);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_name=" + KPI_name);
			sb.append(",Prop_target=" + String.valueOf(Prop_target));
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",KPI_dierection=" + String.valueOf(KPI_dierection));
			sb.append(",Year=" + Year);
			sb.append(",Month=" + Month);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",Apa=" + String.valueOf(Apa));
			sb.append(",Amb_target=" + String.valueOf(Amb_target));
			sb.append(",Category_change=" + Category_change);
			sb.append(",Target_Type=" + Target_Type);
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",baseline=" + String.valueOf(baseline));
			sb.append(",unit=" + unit);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tMap_23_outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String KPI_id;

		public String getKPI_id() {
			return this.KPI_id;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_name;

		public String getKPI_name() {
			return this.KPI_name;
		}

		public String KPI_WBU_Group_Desc;

		public String getKPI_WBU_Group_Desc() {
			return this.KPI_WBU_Group_Desc;
		}

		public String KPI_WBU_Group_Weight_Threshold;

		public String getKPI_WBU_Group_Weight_Threshold() {
			return this.KPI_WBU_Group_Weight_Threshold;
		}

		public Double Prop_target;

		public Double getProp_target() {
			return this.Prop_target;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public Integer KPI_dierection;

		public Integer getKPI_dierection() {
			return this.KPI_dierection;
		}

		public String Year;

		public String getYear() {
			return this.Year;
		}

		public String Month;

		public String getMonth() {
			return this.Month;
		}

		public Double Apa;

		public Double getApa() {
			return this.Apa;
		}

		public Double Amb_target;

		public Double getAmb_target() {
			return this.Amb_target;
		}

		public String Category_change;

		public String getCategory_change() {
			return this.Category_change;
		}

		public String Target_Type;

		public String getTarget_Type() {
			return this.Target_Type;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public Double baseline;

		public Double getBaseline() {
			return this.baseline;
		}

		public String unit;

		public String getUnit() {
			return this.unit;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.KPI_id = readString(dis);

					this.Is_weekly = readString(dis);

					this.BU = readString(dis);

					this.KPI_name = readString(dis);

					this.KPI_WBU_Group_Desc = readString(dis);

					this.KPI_WBU_Group_Weight_Threshold = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Prop_target = null;
					} else {
						this.Prop_target = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					this.JS = readString(dis);

					this.S_JS = readString(dis);

					this.KPI_dierection = readInteger(dis);

					this.Year = readString(dis);

					this.Month = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Apa = null;
					} else {
						this.Apa = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Amb_target = null;
					} else {
						this.Amb_target = dis.readDouble();
					}

					this.Category_change = readString(dis);

					this.Target_Type = readString(dis);

					this.SUB_BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.baseline = null;
					} else {
						this.baseline = dis.readDouble();
					}

					this.unit = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.KPI_id, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_name, dos);

				// String

				writeString(this.KPI_WBU_Group_Desc, dos);

				// String

				writeString(this.KPI_WBU_Group_Weight_Threshold, dos);

				// Double

				if (this.Prop_target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Prop_target);
				}

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// String

				writeString(this.JS, dos);

				// String

				writeString(this.S_JS, dos);

				// Integer

				writeInteger(this.KPI_dierection, dos);

				// String

				writeString(this.Year, dos);

				// String

				writeString(this.Month, dos);

				// Double

				if (this.Apa == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Apa);
				}

				// Double

				if (this.Amb_target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Amb_target);
				}

				// String

				writeString(this.Category_change, dos);

				// String

				writeString(this.Target_Type, dos);

				// String

				writeString(this.SUB_BU, dos);

				// Double

				if (this.baseline == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.baseline);
				}

				// String

				writeString(this.unit, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("KPI_id=" + KPI_id);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_name=" + KPI_name);
			sb.append(",KPI_WBU_Group_Desc=" + KPI_WBU_Group_Desc);
			sb.append(",KPI_WBU_Group_Weight_Threshold=" + KPI_WBU_Group_Weight_Threshold);
			sb.append(",Prop_target=" + String.valueOf(Prop_target));
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",KPI_dierection=" + String.valueOf(KPI_dierection));
			sb.append(",Year=" + Year);
			sb.append(",Month=" + Month);
			sb.append(",Apa=" + String.valueOf(Apa));
			sb.append(",Amb_target=" + String.valueOf(Amb_target));
			sb.append(",Category_change=" + Category_change);
			sb.append(",Target_Type=" + Target_Type);
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",baseline=" + String.valueOf(baseline));
			sb.append(",unit=" + unit);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputExcel_2Struct
			implements routines.system.IPersistableRow<after_tFileInputExcel_2Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String KPI_id;

		public String getKPI_id() {
			return this.KPI_id;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_name;

		public String getKPI_name() {
			return this.KPI_name;
		}

		public String KPI_WBU_Group_Desc;

		public String getKPI_WBU_Group_Desc() {
			return this.KPI_WBU_Group_Desc;
		}

		public String KPI_WBU_Group_Weight_Threshold;

		public String getKPI_WBU_Group_Weight_Threshold() {
			return this.KPI_WBU_Group_Weight_Threshold;
		}

		public Double Prop_target;

		public Double getProp_target() {
			return this.Prop_target;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public Integer KPI_dierection;

		public Integer getKPI_dierection() {
			return this.KPI_dierection;
		}

		public String Year;

		public String getYear() {
			return this.Year;
		}

		public String Month;

		public String getMonth() {
			return this.Month;
		}

		public Double Apa;

		public Double getApa() {
			return this.Apa;
		}

		public Double Amb_target;

		public Double getAmb_target() {
			return this.Amb_target;
		}

		public String Category_change;

		public String getCategory_change() {
			return this.Category_change;
		}

		public String Target_Type;

		public String getTarget_Type() {
			return this.Target_Type;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public Double baseline;

		public Double getBaseline() {
			return this.baseline;
		}

		public String unit;

		public String getUnit() {
			return this.unit;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.KPI_id = readString(dis);

					this.Is_weekly = readString(dis);

					this.BU = readString(dis);

					this.KPI_name = readString(dis);

					this.KPI_WBU_Group_Desc = readString(dis);

					this.KPI_WBU_Group_Weight_Threshold = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Prop_target = null;
					} else {
						this.Prop_target = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					this.JS = readString(dis);

					this.S_JS = readString(dis);

					this.KPI_dierection = readInteger(dis);

					this.Year = readString(dis);

					this.Month = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Apa = null;
					} else {
						this.Apa = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Amb_target = null;
					} else {
						this.Amb_target = dis.readDouble();
					}

					this.Category_change = readString(dis);

					this.Target_Type = readString(dis);

					this.SUB_BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.baseline = null;
					} else {
						this.baseline = dis.readDouble();
					}

					this.unit = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.KPI_id, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_name, dos);

				// String

				writeString(this.KPI_WBU_Group_Desc, dos);

				// String

				writeString(this.KPI_WBU_Group_Weight_Threshold, dos);

				// Double

				if (this.Prop_target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Prop_target);
				}

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// String

				writeString(this.JS, dos);

				// String

				writeString(this.S_JS, dos);

				// Integer

				writeInteger(this.KPI_dierection, dos);

				// String

				writeString(this.Year, dos);

				// String

				writeString(this.Month, dos);

				// Double

				if (this.Apa == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Apa);
				}

				// Double

				if (this.Amb_target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Amb_target);
				}

				// String

				writeString(this.Category_change, dos);

				// String

				writeString(this.Target_Type, dos);

				// String

				writeString(this.SUB_BU, dos);

				// Double

				if (this.baseline == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.baseline);
				}

				// String

				writeString(this.unit, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("KPI_id=" + KPI_id);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_name=" + KPI_name);
			sb.append(",KPI_WBU_Group_Desc=" + KPI_WBU_Group_Desc);
			sb.append(",KPI_WBU_Group_Weight_Threshold=" + KPI_WBU_Group_Weight_Threshold);
			sb.append(",Prop_target=" + String.valueOf(Prop_target));
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",KPI_dierection=" + String.valueOf(KPI_dierection));
			sb.append(",Year=" + Year);
			sb.append(",Month=" + Month);
			sb.append(",Apa=" + String.valueOf(Apa));
			sb.append(",Amb_target=" + String.valueOf(Amb_target));
			sb.append(",Category_change=" + Category_change);
			sb.append(",Target_Type=" + Target_Type);
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",baseline=" + String.valueOf(baseline));
			sb.append(",unit=" + unit);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputExcel_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tHashInput_28Process(globalMap);

				row3Struct row3 = new row3Struct();
				tMap_23_outStruct tMap_23_out = new tMap_23_outStruct();

				/**
				 * [tHashOutput_2 begin ] start
				 */

				ok_Hash.put("tHashOutput_2", false);
				start_Hash.put("tHashOutput_2", System.currentTimeMillis());

				currentComponent = "tHashOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "tMap_23_out");
				}

				int tos_count_tHashOutput_2 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tMap_23_outStruct> tHashFile_tHashOutput_2 = null;
				String hashKey_tHashOutput_2 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_2";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_2)) {
					if (mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null) {
						mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tMap_23_outStruct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
					} else {
						tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
					}
				}
				int nb_line_tHashOutput_2 = 0;

				/**
				 * [tHashOutput_2 begin ] stop
				 */

				/**
				 * [tMap_23 begin ] start
				 */

				ok_Hash.put("tMap_23", false);
				start_Hash.put("tMap_23", System.currentTimeMillis());

				currentComponent = "tMap_23";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_23 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row76Struct> tHash_Lookup_row76 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row76Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row76Struct>) globalMap
						.get("tHash_Lookup_row76"));

				row76Struct row76HashKey = new row76Struct();
				row76Struct row76Default = new row76Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_23__Struct {
				}
				Var__tMap_23__Struct Var__tMap_23 = new Var__tMap_23__Struct();
// ###############################

// ###############################
// # Outputs initialization
				tMap_23_outStruct tMap_23_out_tmp = new tMap_23_outStruct();
// ###############################

				/**
				 * [tMap_23 begin ] stop
				 */

				/**
				 * [tFileInputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_2", false);
				start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_2";

				int tos_count_tFileInputExcel_2 = 0;

				final String decryptedPassword_tFileInputExcel_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:AkRDhjRTstmtcP1bGlsu0AWxMd3UKygdwArV4A==");
				String password_tFileInputExcel_2 = decryptedPassword_tFileInputExcel_2;
				if (password_tFileInputExcel_2.isEmpty()) {
					password_tFileInputExcel_2 = null;
				}
				class RegexUtil_tFileInputExcel_2 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

				Object source_tFileInputExcel_2 = context.ceo_path + "lookup/FixedData.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

				if (source_tFileInputExcel_2 instanceof String) {
					workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_2), password_tFileInputExcel_2);
				} else if (source_tFileInputExcel_2 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_2, password_tFileInputExcel_2);
				} else {
					workbook_tFileInputExcel_2 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_2
							.addAll(regexUtil_tFileInputExcel_2.getSheets(workbook_tFileInputExcel_2, "Sheet7", false));
					if (sheetList_tFileInputExcel_2.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
						if (sheet_FilterNull_tFileInputExcel_2 != null
								&& sheetList_FilterNull_tFileInputExcel_2.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
						}
					}
					sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
					if (sheetList_tFileInputExcel_2.size() > 0) {
						int nb_line_tFileInputExcel_2 = 0;

						int begin_line_tFileInputExcel_2 = 1;

						int footer_input_tFileInputExcel_2 = 0;

						int end_line_tFileInputExcel_2 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
							end_line_tFileInputExcel_2 += (sheet_tFileInputExcel_2.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
						int limit_tFileInputExcel_2 = -1;
						int start_column_tFileInputExcel_2 = 1 - 1;
						int end_column_tFileInputExcel_2 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
								.get(0);
						int rowCount_tFileInputExcel_2 = 0;
						int sheetIndex_tFileInputExcel_2 = 0;
						int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++) {

							int emptyColumnCount_tFileInputExcel_2 = 0;

							if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
								break;
							}

							while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
								rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
								sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
										.get(++sheetIndex_tFileInputExcel_2);
								currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_2_CURRENT_SHEET", sheet_tFileInputExcel_2.getSheetName());
							if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
								row_tFileInputExcel_2 = sheet_tFileInputExcel_2
										.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
							}
							row3 = null;
							int tempRowLength_tFileInputExcel_2 = 20;

							int columnIndex_tFileInputExcel_2 = 0;

							String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
							int excel_end_column_tFileInputExcel_2;
							if (row_tFileInputExcel_2 == null) {
								excel_end_column_tFileInputExcel_2 = 0;
							} else {
								excel_end_column_tFileInputExcel_2 = row_tFileInputExcel_2.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_2;
							if (end_column_tFileInputExcel_2 == -1) {
								actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
							} else {
								actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 > excel_end_column_tFileInputExcel_2
										? excel_end_column_tFileInputExcel_2
										: end_column_tFileInputExcel_2;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_2; i++) {
								if (i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2
											.getCell(i + start_column_tFileInputExcel_2);
									if (cell_tFileInputExcel_2 != null) {
										switch (cell_tFileInputExcel_2.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_2)) {
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2
														.format(cell_tFileInputExcel_2.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_2[i] = String
													.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_2)) {
													temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_2.getNumericCellValue());
													temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_2[i] = String
														.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_2[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_2[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_2[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_2[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_2 = false;
							row3 = new row3Struct();
							int curColNum_tFileInputExcel_2 = -1;
							String curColName_tFileInputExcel_2 = "";
							try {
								columnIndex_tFileInputExcel_2 = 0;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "KPI_id";

									row3.KPI_id = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row3.KPI_id = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 1;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Is_weekly";

									row3.Is_weekly = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row3.Is_weekly = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 2;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "BU";

									row3.BU = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row3.BU = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 3;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "KPI_name";

									row3.KPI_name = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row3.KPI_name = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 4;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "KPI_WBU_Group_Desc";

									row3.KPI_WBU_Group_Desc = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row3.KPI_WBU_Group_Desc = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 5;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "KPI_WBU_Group_Weight_Threshold";

									row3.KPI_WBU_Group_Weight_Threshold = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row3.KPI_WBU_Group_Weight_Threshold = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 6;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Prop_target";

									row3.Prop_target = ParserUtils.parseTo_Double(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row3.Prop_target = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 7;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "weight";

									row3.weight = ParserUtils.parseTo_Double(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row3.weight = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 8;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "JS";

									row3.JS = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row3.JS = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 9;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "S_JS";

									row3.S_JS = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row3.S_JS = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 10;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "KPI_dierection";

									row3.KPI_dierection = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row3.KPI_dierection = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 11;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Year";

									row3.Year = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row3.Year = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 12;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Month";

									row3.Month = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row3.Month = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 13;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Apa";

									row3.Apa = ParserUtils.parseTo_Double(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row3.Apa = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 14;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Amb_target";

									row3.Amb_target = ParserUtils.parseTo_Double(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row3.Amb_target = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 15;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Category_change";

									row3.Category_change = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row3.Category_change = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 16;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Target_Type";

									row3.Target_Type = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row3.Target_Type = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 17;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "SUB_BU";

									row3.SUB_BU = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row3.SUB_BU = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 18;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "baseline";

									row3.baseline = ParserUtils.parseTo_Double(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row3.baseline = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 19;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "unit";

									row3.unit = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row3.unit = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								nb_line_tFileInputExcel_2++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_2 = true;
								System.err.println(e.getMessage());
								row3 = null;
							}

							/**
							 * [tFileInputExcel_2 begin ] stop
							 */

							/**
							 * [tFileInputExcel_2 main ] start
							 */

							currentComponent = "tFileInputExcel_2";

							tos_count_tFileInputExcel_2++;

							/**
							 * [tFileInputExcel_2 main ] stop
							 */

							/**
							 * [tFileInputExcel_2 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_begin ] stop
							 */
// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tMap_23 main ] start
								 */

								currentComponent = "tMap_23";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_23 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_23 = false;
								boolean mainRowRejected_tMap_23 = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "row76"
								///////////////////////////////////////////////

								boolean forceLooprow76 = false;

								row76Struct row76ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_23) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_23 = false;

									row76HashKey.YEAR_NUM = row3.Year;

									row76HashKey.MONTH_OF_YEAR = row3.Month;

									row76HashKey.KPI_WBU_Group_Desc = row3.KPI_WBU_Group_Desc;

									row76HashKey.hashCodeDirty = true;

									tHash_Lookup_row76.lookup(row76HashKey);

									if (!tHash_Lookup_row76.hasNext()) { // G_TM_M_090

										forceLooprow76 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow76 = true;
								} // G 21

								row76Struct row76 = null;

								while ((tHash_Lookup_row76 != null && tHash_Lookup_row76.hasNext()) || forceLooprow76) { // G_TM_M_043

									// CALL close loop of lookup 'row76'

									row76Struct fromLookup_row76 = null;
									row76 = row76Default;

									if (!forceLooprow76) { // G 46

										fromLookup_row76 = tHash_Lookup_row76.next();

										if (fromLookup_row76 != null) {
											row76 = fromLookup_row76;
										}

									} // G 46

									forceLooprow76 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_23__Struct Var = Var__tMap_23;// ###############################
										// ###############################
										// # Output tables

										tMap_23_out = null;

// # Output table : 'tMap_23_out'
										tMap_23_out_tmp.KPI_id = row3.KPI_id;
										tMap_23_out_tmp.Is_weekly = row3.Is_weekly;
										tMap_23_out_tmp.BU = row3.BU;
										tMap_23_out_tmp.KPI_name = row3.KPI_name;
										tMap_23_out_tmp.Prop_target = row3.Prop_target;
										tMap_23_out_tmp.weight = (row3.BU.equals("WBU")
												&& (row76.Single_WBU_KPI_Weight != null ? row76.Single_WBU_KPI_Weight
														: 0) > 0) ? row76.Single_WBU_KPI_Weight : row3.weight;
										tMap_23_out_tmp.JS = row3.JS;
										tMap_23_out_tmp.S_JS = row3.S_JS;
										tMap_23_out_tmp.KPI_dierection = row3.KPI_dierection;
										tMap_23_out_tmp.Year = row3.Year;
										tMap_23_out_tmp.Month = row3.Month;
										tMap_23_out_tmp.WEEK_OF_YEAR = row76.WEEK_OF_YEAR;
										tMap_23_out_tmp.Apa = row3.Apa;
										tMap_23_out_tmp.Amb_target = row3.Amb_target;
										tMap_23_out_tmp.Category_change = row3.Category_change;
										tMap_23_out_tmp.Target_Type = row3.Target_Type;
										tMap_23_out_tmp.SUB_BU = row3.SUB_BU;
										tMap_23_out_tmp.baseline = row3.baseline;
										tMap_23_out_tmp.unit = row3.unit;
										tMap_23_out = tMap_23_out_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_23 = false;

									tos_count_tMap_23++;

									/**
									 * [tMap_23 main ] stop
									 */

									/**
									 * [tMap_23 process_data_begin ] start
									 */

									currentComponent = "tMap_23";

									/**
									 * [tMap_23 process_data_begin ] stop
									 */
// Start of branch "tMap_23_out"
									if (tMap_23_out != null) {

										/**
										 * [tHashOutput_2 main ] start
										 */

										currentComponent = "tHashOutput_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "tMap_23_out");
										}

										tMap_23_outStruct oneRow_tHashOutput_2 = new tMap_23_outStruct();

										oneRow_tHashOutput_2.KPI_id = tMap_23_out.KPI_id;
										oneRow_tHashOutput_2.Is_weekly = tMap_23_out.Is_weekly;
										oneRow_tHashOutput_2.BU = tMap_23_out.BU;
										oneRow_tHashOutput_2.KPI_name = tMap_23_out.KPI_name;
										oneRow_tHashOutput_2.Prop_target = tMap_23_out.Prop_target;
										oneRow_tHashOutput_2.weight = tMap_23_out.weight;
										oneRow_tHashOutput_2.JS = tMap_23_out.JS;
										oneRow_tHashOutput_2.S_JS = tMap_23_out.S_JS;
										oneRow_tHashOutput_2.KPI_dierection = tMap_23_out.KPI_dierection;
										oneRow_tHashOutput_2.Year = tMap_23_out.Year;
										oneRow_tHashOutput_2.Month = tMap_23_out.Month;
										oneRow_tHashOutput_2.WEEK_OF_YEAR = tMap_23_out.WEEK_OF_YEAR;
										oneRow_tHashOutput_2.Apa = tMap_23_out.Apa;
										oneRow_tHashOutput_2.Amb_target = tMap_23_out.Amb_target;
										oneRow_tHashOutput_2.Category_change = tMap_23_out.Category_change;
										oneRow_tHashOutput_2.Target_Type = tMap_23_out.Target_Type;
										oneRow_tHashOutput_2.SUB_BU = tMap_23_out.SUB_BU;
										oneRow_tHashOutput_2.baseline = tMap_23_out.baseline;
										oneRow_tHashOutput_2.unit = tMap_23_out.unit;

										tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
										nb_line_tHashOutput_2++;

										tos_count_tHashOutput_2++;

										/**
										 * [tHashOutput_2 main ] stop
										 */

										/**
										 * [tHashOutput_2 process_data_begin ] start
										 */

										currentComponent = "tHashOutput_2";

										/**
										 * [tHashOutput_2 process_data_begin ] stop
										 */

										/**
										 * [tHashOutput_2 process_data_end ] start
										 */

										currentComponent = "tHashOutput_2";

										/**
										 * [tHashOutput_2 process_data_end ] stop
										 */

									} // End of branch "tMap_23_out"

								} // close loop of lookup 'row76' // G_TM_M_043

								/**
								 * [tMap_23 process_data_end ] start
								 */

								currentComponent = "tMap_23";

								/**
								 * [tMap_23 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tFileInputExcel_2 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_2 end ] start
							 */

							currentComponent = "tFileInputExcel_2";

						}

						globalMap.put("tFileInputExcel_2_NB_LINE", nb_line_tFileInputExcel_2);

					}

				} finally {

					if (!(source_tFileInputExcel_2 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_2.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_2", true);
				end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_2 end ] stop
				 */

				/**
				 * [tMap_23 end ] start
				 */

				currentComponent = "tMap_23";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row76 != null) {
					tHash_Lookup_row76.endGet();
				}
				globalMap.remove("tHash_Lookup_row76");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_23", true);
				end_Hash.put("tMap_23", System.currentTimeMillis());

				/**
				 * [tMap_23 end ] stop
				 */

				/**
				 * [tHashOutput_2 end ] start
				 */

				currentComponent = "tHashOutput_2";

				globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "tMap_23_out");
				}

				ok_Hash.put("tHashOutput_2", true);
				end_Hash.put("tHashOutput_2", System.currentTimeMillis());

				/**
				 * [tHashOutput_2 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tHashInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_23"
			globalMap.remove("tHash_Lookup_row76");

			try {

				/**
				 * [tFileInputExcel_2 finally ] start
				 */

				currentComponent = "tFileInputExcel_2";

				/**
				 * [tFileInputExcel_2 finally ] stop
				 */

				/**
				 * [tMap_23 finally ] start
				 */

				currentComponent = "tMap_23";

				/**
				 * [tMap_23 finally ] stop
				 */

				/**
				 * [tHashOutput_2 finally ] start
				 */

				currentComponent = "tHashOutput_2";

				/**
				 * [tHashOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Integer KPI_Direction;

		public Integer getKPI_Direction() {
			return this.KPI_Direction;
		}

		public Double Proposed_Target;

		public Double getProposed_Target() {
			return this.Proposed_Target;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Diff_From_Target;

		public String getDiff_From_Target() {
			return this.Diff_From_Target;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					this.KPI_Direction = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Proposed_Target = null;
					} else {
						this.Proposed_Target = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					this.S_JS = readString(dis);

					this.Is_weekly = readString(dis);

					this.Diff_From_Target = readString(dis);

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Integer

				writeInteger(this.KPI_Direction, dos);

				// Double

				if (this.Proposed_Target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Proposed_Target);
				}

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// String

				writeString(this.S_JS, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Diff_From_Target, dos);

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",KPI_Direction=" + String.valueOf(KPI_Direction));
			sb.append(",Proposed_Target=" + String.valueOf(Proposed_Target));
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Diff_From_Target=" + Diff_From_Target);
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Integer KPI_Direction;

		public Integer getKPI_Direction() {
			return this.KPI_Direction;
		}

		public Double Proposed_Target;

		public Double getProposed_Target() {
			return this.Proposed_Target;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Diff_From_Target;

		public String getDiff_From_Target() {
			return this.Diff_From_Target;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					this.KPI_Direction = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Proposed_Target = null;
					} else {
						this.Proposed_Target = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					this.S_JS = readString(dis);

					this.Is_weekly = readString(dis);

					this.Diff_From_Target = readString(dis);

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Integer

				writeInteger(this.KPI_Direction, dos);

				// Double

				if (this.Proposed_Target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Proposed_Target);
				}

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// String

				writeString(this.S_JS, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Diff_From_Target, dos);

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",KPI_Direction=" + String.valueOf(KPI_Direction));
			sb.append(",Proposed_Target=" + String.valueOf(Proposed_Target));
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Diff_From_Target=" + Diff_From_Target);
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Integer KPI_Direction;

		public Integer getKPI_Direction() {
			return this.KPI_Direction;
		}

		public Double Proposed_Target;

		public Double getProposed_Target() {
			return this.Proposed_Target;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Diff_From_Target;

		public String getDiff_From_Target() {
			return this.Diff_From_Target;
		}

		public Integer Acheived;

		public Integer getAcheived() {
			return this.Acheived;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					this.KPI_Direction = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Proposed_Target = null;
					} else {
						this.Proposed_Target = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					this.S_JS = readString(dis);

					this.Is_weekly = readString(dis);

					this.Diff_From_Target = readString(dis);

					this.Acheived = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Integer

				writeInteger(this.KPI_Direction, dos);

				// Double

				if (this.Proposed_Target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Proposed_Target);
				}

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// String

				writeString(this.S_JS, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Diff_From_Target, dos);

				// Integer

				writeInteger(this.Acheived, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",KPI_Direction=" + String.valueOf(KPI_Direction));
			sb.append(",Proposed_Target=" + String.valueOf(Proposed_Target));
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Diff_From_Target=" + Diff_From_Target);
			sb.append(",Acheived=" + String.valueOf(Acheived));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class all_trendStruct implements routines.system.IPersistableRow<all_trendStruct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Integer KPI_Direction;

		public Integer getKPI_Direction() {
			return this.KPI_Direction;
		}

		public Double Proposed_Target;

		public Double getProposed_Target() {
			return this.Proposed_Target;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Diff_From_Target;

		public String getDiff_From_Target() {
			return this.Diff_From_Target;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					this.KPI_Direction = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Proposed_Target = null;
					} else {
						this.Proposed_Target = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					this.S_JS = readString(dis);

					this.Is_weekly = readString(dis);

					this.Diff_From_Target = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Integer

				writeInteger(this.KPI_Direction, dos);

				// Double

				if (this.Proposed_Target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Proposed_Target);
				}

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// String

				writeString(this.S_JS, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Diff_From_Target, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",KPI_Direction=" + String.valueOf(KPI_Direction));
			sb.append(",Proposed_Target=" + String.valueOf(Proposed_Target));
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Diff_From_Target=" + Diff_From_Target);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(all_trendStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_ID2;

		public String getKPI_ID2() {
			return this.KPI_ID2;
		}

		public String KPI_SEGMENT;

		public String getKPI_SEGMENT() {
			return this.KPI_SEGMENT;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public String BU2;

		public String getBU2() {
			return this.BU2;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_ID2 = readString(dis);

					this.KPI_SEGMENT = readString(dis);

					this.KPI_DESC = readString(dis);

					this.BU2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID2, dos);

				// String

				writeString(this.KPI_SEGMENT, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// String

				writeString(this.BU2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_ID2=" + KPI_ID2);
			sb.append(",KPI_SEGMENT=" + KPI_SEGMENT);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",BU2=" + BU2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tHashInput_1Struct implements routines.system.IPersistableRow<after_tHashInput_1Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_ID2;

		public String getKPI_ID2() {
			return this.KPI_ID2;
		}

		public String KPI_SEGMENT;

		public String getKPI_SEGMENT() {
			return this.KPI_SEGMENT;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public String BU2;

		public String getBU2() {
			return this.BU2;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_ID2 = readString(dis);

					this.KPI_SEGMENT = readString(dis);

					this.KPI_DESC = readString(dis);

					this.BU2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID2, dos);

				// String

				writeString(this.KPI_SEGMENT, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// String

				writeString(this.BU2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_ID2=" + KPI_ID2);
			sb.append(",KPI_SEGMENT=" + KPI_SEGMENT);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",BU2=" + BU2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tHashInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tHashInput_2Process(globalMap);
				tHashInput_6Process(globalMap);

				row2Struct row2 = new row2Struct();
				all_trendStruct all_trend = new all_trendStruct();
				row5Struct row5 = new row5Struct();
				out2Struct out2 = new out2Struct();
				out2Struct row24 = out2;

				/**
				 * [tHashOutput_12 begin ] start
				 */

				ok_Hash.put("tHashOutput_12", false);
				start_Hash.put("tHashOutput_12", System.currentTimeMillis());

				currentComponent = "tHashOutput_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row24");
				}

				int tos_count_tHashOutput_12 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_12 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashOutput_12 = null;
				String hashKey_tHashOutput_12 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_12";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_12)) {
					if (mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12) == null) {
						mf_tHashOutput_12.getResourceMap().put(hashKey_tHashOutput_12,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_12 = mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12);
					} else {
						tHashFile_tHashOutput_12 = mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12);
					}
				}
				int nb_line_tHashOutput_12 = 0;

				/**
				 * [tHashOutput_12 begin ] stop
				 */

				/**
				 * [tHashOutput_6 begin ] start
				 */

				ok_Hash.put("tHashOutput_6", false);
				start_Hash.put("tHashOutput_6", System.currentTimeMillis());

				currentComponent = "tHashOutput_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out2");
				}

				int tos_count_tHashOutput_6 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out2Struct> tHashFile_tHashOutput_6 = null;
				String hashKey_tHashOutput_6 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_6";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_6)) {
					if (mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null) {
						mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out2Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
					} else {
						tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
					}
				}
				int nb_line_tHashOutput_6 = 0;

				/**
				 * [tHashOutput_6 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) globalMap
						.get("tHash_Lookup_row10"));

				row10Struct row10HashKey = new row10Struct();
				row10Struct row10Default = new row10Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out2Struct out2_tmp = new out2Struct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "all_trend");
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				all_trendStruct all_trend_tmp = new all_trendStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tHashInput_1 begin ] start
				 */

				ok_Hash.put("tHashInput_1", false);
				start_Hash.put("tHashInput_1", System.currentTimeMillis());

				currentComponent = "tHashInput_1";

				int tos_count_tHashInput_1 = 0;

				int nb_line_tHashInput_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_1 = mf_tHashInput_1
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_1");
				if (tHashFile_tHashInput_1 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row8Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
				while (iterator_tHashInput_1.hasNext()) {
					row8Struct next_tHashInput_1 = iterator_tHashInput_1.next();

					row2.OBS_DATE = next_tHashInput_1.OBS_DATE;
					row2.YEAR_NUM = next_tHashInput_1.YEAR_NUM;
					row2.MONTH_OF_YEAR = next_tHashInput_1.MONTH_OF_YEAR;
					row2.BU = next_tHashInput_1.BU;
					row2.KPI_ID = next_tHashInput_1.KPI_ID;
					row2.VAL = next_tHashInput_1.VAL;
					row2.FREQUENCY = next_tHashInput_1.FREQUENCY;
					row2.WEEK_OF_YEAR = next_tHashInput_1.WEEK_OF_YEAR;
					row2.KPI_ID2 = next_tHashInput_1.KPI_ID2;
					row2.KPI_SEGMENT = next_tHashInput_1.KPI_SEGMENT;
					row2.KPI_DESC = next_tHashInput_1.KPI_DESC;
					row2.BU2 = next_tHashInput_1.BU2;

					/**
					 * [tHashInput_1 begin ] stop
					 */

					/**
					 * [tHashInput_1 main ] start
					 */

					currentComponent = "tHashInput_1";

					tos_count_tHashInput_1++;

					/**
					 * [tHashInput_1 main ] stop
					 */

					/**
					 * [tHashInput_1 process_data_begin ] start
					 */

					currentComponent = "tHashInput_1";

					/**
					 * [tHashInput_1 process_data_begin ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					///////////////////////////////////////////////
					// Starting Lookup Table "row4"
					///////////////////////////////////////////////

					boolean forceLooprow4 = false;

					row4Struct row4ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_1 = false;

						row4HashKey.KPI_id = row2.KPI_ID;

						row4HashKey.Year = row2.YEAR_NUM;

						row4HashKey.WEEK_OF_YEAR = row2.WEEK_OF_YEAR;

						row4HashKey.hashCodeDirty = true;

						tHash_Lookup_row4.lookup(row4HashKey);

						if (!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_1 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					if (tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4'
						// and it contains more one result from keys : row4.KPI_id = '" +
						// row4HashKey.KPI_id + "', row4.Year = '" + row4HashKey.Year + "',
						// row4.WEEK_OF_YEAR = '" + row4HashKey.WEEK_OF_YEAR + "'");
					} // G 071

					row4Struct row4 = null;

					row4Struct fromLookup_row4 = null;
					row4 = row4Default;

					if (tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) { // G 099

						fromLookup_row4 = tHash_Lookup_row4.next();

					} // G 099

					if (fromLookup_row4 != null) {
						row4 = fromLookup_row4;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						all_trend = null;

						if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'all_trend'
							all_trend_tmp.OBS_DATE = row2.OBS_DATE;
							all_trend_tmp.YEAR_NUM = row2.YEAR_NUM;
							all_trend_tmp.MONTH_OF_YEAR = row2.MONTH_OF_YEAR;
							all_trend_tmp.BU = row4.BU;
							all_trend_tmp.KPI_ID = row2.KPI_ID;
							all_trend_tmp.VAL = row2.VAL;
							all_trend_tmp.FREQUENCY = row2.FREQUENCY;
							all_trend_tmp.WEEK_OF_YEAR = row2.WEEK_OF_YEAR;
							all_trend_tmp.KPI_DESC = row2.KPI_DESC;
							all_trend_tmp.KPI_Direction = row4.KPI_dierection;
							all_trend_tmp.Proposed_Target = row4.Prop_target;
							all_trend_tmp.Weight = row4.weight;
							all_trend_tmp.JS = row4.JS;
							all_trend_tmp.S_JS = row4.S_JS;
							all_trend_tmp.Is_weekly = row4.Is_weekly;
							all_trend_tmp.Diff_From_Target = Agg_Class_Methods.Calculate_distance_from_target(row2.VAL,
									row4.Prop_target, row4.KPI_dierection);
							all_trend = all_trend_tmp;
						} // closing inner join bracket (2)
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */

					/**
					 * [tMap_1 process_data_begin ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_begin ] stop
					 */
// Start of branch "all_trend"
					if (all_trend != null) {

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "all_trend");
						}

						// code sample:
//
// multiply by 2 the row identifier
// row5.id = all_trend.id * 2;
//
// lowercase the name
// row5.name = all_trend.name.toLowerCase();

						if (Double.parseDouble(all_trend.Diff_From_Target) > 0) {
							row5.Acheived = 1;
						} else
							row5.Acheived = 0;

						row5.OBS_DATE = all_trend.OBS_DATE;
						row5.YEAR_NUM = all_trend.YEAR_NUM;
						row5.OBS_DATE = all_trend.OBS_DATE;
						row5.MONTH_OF_YEAR = all_trend.MONTH_OF_YEAR;
						row5.BU = all_trend.BU;
						row5.KPI_ID = all_trend.KPI_ID;
						row5.VAL = all_trend.VAL;
						row5.FREQUENCY = all_trend.FREQUENCY;
						row5.WEEK_OF_YEAR = all_trend.WEEK_OF_YEAR;
						row5.KPI_DESC = all_trend.KPI_DESC;
						row5.KPI_Direction = all_trend.KPI_Direction;
						row5.Proposed_Target = all_trend.Proposed_Target;
						row5.Weight = all_trend.Weight;
						row5.JS = all_trend.JS;
						row5.S_JS = all_trend.S_JS;
						row5.Is_weekly = all_trend.Is_weekly;
						row5.Diff_From_Target = all_trend.Diff_From_Target;

						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row10"
						///////////////////////////////////////////////

						boolean forceLooprow10 = false;

						row10Struct row10ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							row10HashKey.YEAR_NUM = (Integer.parseInt(row5.MONTH_OF_YEAR) - 1) == 0
									? (Integer.parseInt(row5.YEAR_NUM) - 1) + ""
									: row5.YEAR_NUM + "";

							row10HashKey.KPI_ID = row5.KPI_ID;

							row10HashKey.WEEK_OF_YEAR = (Integer
									.parseInt(row5.WEEK_OF_YEAR.substring(1, row5.WEEK_OF_YEAR.length())) - 1) == 0
											? "W52"
											: "W" + (Integer.parseInt(
													row5.WEEK_OF_YEAR.substring(1, row5.WEEK_OF_YEAR.length())) - 1);

							row10HashKey.hashCodeDirty = true;

							tHash_Lookup_row10.lookup(row10HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row10 != null && tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row10' and it contains more one result from keys : row10.YEAR_NUM = '" +
							// row10HashKey.YEAR_NUM + "', row10.KPI_ID = '" + row10HashKey.KPI_ID + "',
							// row10.WEEK_OF_YEAR = '" + row10HashKey.WEEK_OF_YEAR + "'");
						} // G 071

						row10Struct row10 = null;

						row10Struct fromLookup_row10 = null;
						row10 = row10Default;

						if (tHash_Lookup_row10 != null && tHash_Lookup_row10.hasNext()) { // G 099

							fromLookup_row10 = tHash_Lookup_row10.next();

						} // G 099

						if (fromLookup_row10 != null) {
							row10 = fromLookup_row10;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							out2 = null;

// # Output table : 'out2'
							out2_tmp.OBS_DATE = row5.OBS_DATE;
							out2_tmp.YEAR_NUM = row5.YEAR_NUM;
							out2_tmp.MONTH_OF_YEAR = row5.MONTH_OF_YEAR;
							out2_tmp.BU = row5.BU;
							out2_tmp.KPI_ID = row5.KPI_ID;
							out2_tmp.VAL = row5.VAL;
							out2_tmp.FREQUENCY = row5.FREQUENCY;
							out2_tmp.WEEK_OF_YEAR = row5.WEEK_OF_YEAR;
							out2_tmp.KPI_DESC = row5.KPI_DESC;
							out2_tmp.KPI_Direction = row5.KPI_Direction;
							out2_tmp.Proposed_Target = row5.Proposed_Target;
							out2_tmp.Weight = row5.Weight;
							out2_tmp.JS = row5.JS;
							out2_tmp.S_JS = row5.S_JS;
							out2_tmp.Is_weekly = row5.Is_weekly;
							out2_tmp.Diff_From_Target = row5.Diff_From_Target;
							out2_tmp.Achieved = row5.Acheived;
							out2_tmp.Month_Differnece = Double.parseDouble(Agg_Class_Methods.Calculate_differnce(
									row5.VAL, (row10.VAL != null ? row10.VAL : 0), row5.KPI_Direction));
							out2 = out2_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
// Start of branch "out2"
						if (out2 != null) {

							/**
							 * [tHashOutput_6 main ] start
							 */

							currentComponent = "tHashOutput_6";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out2");
							}

							out2Struct oneRow_tHashOutput_6 = new out2Struct();

							oneRow_tHashOutput_6.OBS_DATE = out2.OBS_DATE;
							oneRow_tHashOutput_6.YEAR_NUM = out2.YEAR_NUM;
							oneRow_tHashOutput_6.MONTH_OF_YEAR = out2.MONTH_OF_YEAR;
							oneRow_tHashOutput_6.BU = out2.BU;
							oneRow_tHashOutput_6.KPI_ID = out2.KPI_ID;
							oneRow_tHashOutput_6.VAL = out2.VAL;
							oneRow_tHashOutput_6.FREQUENCY = out2.FREQUENCY;
							oneRow_tHashOutput_6.WEEK_OF_YEAR = out2.WEEK_OF_YEAR;
							oneRow_tHashOutput_6.KPI_DESC = out2.KPI_DESC;
							oneRow_tHashOutput_6.KPI_Direction = out2.KPI_Direction;
							oneRow_tHashOutput_6.Proposed_Target = out2.Proposed_Target;
							oneRow_tHashOutput_6.Weight = out2.Weight;
							oneRow_tHashOutput_6.JS = out2.JS;
							oneRow_tHashOutput_6.S_JS = out2.S_JS;
							oneRow_tHashOutput_6.Is_weekly = out2.Is_weekly;
							oneRow_tHashOutput_6.Diff_From_Target = out2.Diff_From_Target;
							oneRow_tHashOutput_6.Achieved = out2.Achieved;
							oneRow_tHashOutput_6.Month_Differnece = out2.Month_Differnece;

							tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
							nb_line_tHashOutput_6++;

							row24 = out2;

							tos_count_tHashOutput_6++;

							/**
							 * [tHashOutput_6 main ] stop
							 */

							/**
							 * [tHashOutput_6 process_data_begin ] start
							 */

							currentComponent = "tHashOutput_6";

							/**
							 * [tHashOutput_6 process_data_begin ] stop
							 */

							/**
							 * [tHashOutput_12 main ] start
							 */

							currentComponent = "tHashOutput_12";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row24");
							}

							row24Struct oneRow_tHashOutput_12 = new row24Struct();

							oneRow_tHashOutput_12.OBS_DATE = row24.OBS_DATE;
							oneRow_tHashOutput_12.YEAR_NUM = row24.YEAR_NUM;
							oneRow_tHashOutput_12.MONTH_OF_YEAR = row24.MONTH_OF_YEAR;
							oneRow_tHashOutput_12.BU = row24.BU;
							oneRow_tHashOutput_12.KPI_ID = row24.KPI_ID;
							oneRow_tHashOutput_12.VAL = row24.VAL;
							oneRow_tHashOutput_12.FREQUENCY = row24.FREQUENCY;
							oneRow_tHashOutput_12.WEEK_OF_YEAR = row24.WEEK_OF_YEAR;
							oneRow_tHashOutput_12.KPI_DESC = row24.KPI_DESC;
							oneRow_tHashOutput_12.KPI_Direction = row24.KPI_Direction;
							oneRow_tHashOutput_12.Proposed_Target = row24.Proposed_Target;
							oneRow_tHashOutput_12.Weight = row24.Weight;
							oneRow_tHashOutput_12.JS = row24.JS;
							oneRow_tHashOutput_12.S_JS = row24.S_JS;
							oneRow_tHashOutput_12.Is_weekly = row24.Is_weekly;
							oneRow_tHashOutput_12.Diff_From_Target = row24.Diff_From_Target;
							oneRow_tHashOutput_12.Achieved = row24.Achieved;
							oneRow_tHashOutput_12.Month_Differnece = row24.Month_Differnece;

							tHashFile_tHashOutput_12.put(oneRow_tHashOutput_12);
							nb_line_tHashOutput_12++;

							tos_count_tHashOutput_12++;

							/**
							 * [tHashOutput_12 main ] stop
							 */

							/**
							 * [tHashOutput_12 process_data_begin ] start
							 */

							currentComponent = "tHashOutput_12";

							/**
							 * [tHashOutput_12 process_data_begin ] stop
							 */

							/**
							 * [tHashOutput_12 process_data_end ] start
							 */

							currentComponent = "tHashOutput_12";

							/**
							 * [tHashOutput_12 process_data_end ] stop
							 */

							/**
							 * [tHashOutput_6 process_data_end ] start
							 */

							currentComponent = "tHashOutput_6";

							/**
							 * [tHashOutput_6 process_data_end ] stop
							 */

						} // End of branch "out2"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_end ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_end ] stop
						 */

					} // End of branch "all_trend"

					/**
					 * [tMap_1 process_data_end ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_end ] stop
					 */

					/**
					 * [tHashInput_1 process_data_end ] start
					 */

					currentComponent = "tHashInput_1";

					/**
					 * [tHashInput_1 process_data_end ] stop
					 */

					/**
					 * [tHashInput_1 end ] start
					 */

					currentComponent = "tHashInput_1";

					nb_line_tHashInput_1++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_1");

				globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);

				ok_Hash.put("tHashInput_1", true);
				end_Hash.put("tHashInput_1", System.currentTimeMillis());

				/**
				 * [tHashInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "all_trend");
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row10 != null) {
					tHash_Lookup_row10.endGet();
				}
				globalMap.remove("tHash_Lookup_row10");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tHashOutput_6 end ] start
				 */

				currentComponent = "tHashOutput_6";

				globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out2");
				}

				ok_Hash.put("tHashOutput_6", true);
				end_Hash.put("tHashOutput_6", System.currentTimeMillis());

				/**
				 * [tHashOutput_6 end ] stop
				 */

				/**
				 * [tHashOutput_12 end ] start
				 */

				currentComponent = "tHashOutput_12";

				globalMap.put("tHashOutput_12_NB_LINE", nb_line_tHashOutput_12);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row24");
				}

				ok_Hash.put("tHashOutput_12", true);
				end_Hash.put("tHashOutput_12", System.currentTimeMillis());

				/**
				 * [tHashOutput_12 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tHashInput_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row10");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			try {

				/**
				 * [tHashInput_1 finally ] start
				 */

				currentComponent = "tHashInput_1";

				/**
				 * [tHashInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tHashOutput_6 finally ] start
				 */

				currentComponent = "tHashOutput_6";

				/**
				 * [tHashOutput_6 finally ] stop
				 */

				/**
				 * [tHashOutput_12 finally ] start
				 */

				currentComponent = "tHashOutput_12";

				/**
				 * [tHashOutput_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row60Struct implements routines.system.IPersistableRow<row60Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM_1;

		public String getYEAR_NUM_1() {
			return this.YEAR_NUM_1;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Max_W;

		public Double getMax_W() {
			return this.Max_W;
		}

		public Double Min_W;

		public Double getMin_W() {
			return this.Min_W;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM_1 = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Max_W = null;
					} else {
						this.Max_W = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Min_W = null;
					} else {
						this.Min_W = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM_1, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Max_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Max_W);
				}

				// Double

				if (this.Min_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Min_W);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM_1=" + YEAR_NUM_1);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",JS=" + JS);
			sb.append(",Max_W=" + String.valueOf(Max_W));
			sb.append(",Min_W=" + String.valueOf(Min_W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row60Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_4
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_4> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM_1;

		public String getYEAR_NUM_1() {
			return this.YEAR_NUM_1;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Max_W;

		public Double getMax_W() {
			return this.Max_W;
		}

		public Double Min_W;

		public Double getMin_W() {
			return this.Min_W;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM_1 = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Max_W = null;
					} else {
						this.Max_W = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Min_W = null;
					} else {
						this.Min_W = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM_1, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Max_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Max_W);
				}

				// Double

				if (this.Min_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Min_W);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM_1=" + YEAR_NUM_1);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",JS=" + JS);
			sb.append(",Max_W=" + String.valueOf(Max_W));
			sb.append(",Min_W=" + String.valueOf(Min_W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_4 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM_1;

		public String getYEAR_NUM_1() {
			return this.YEAR_NUM_1;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Max_W;

		public Double getMax_W() {
			return this.Max_W;
		}

		public Double Min_W;

		public Double getMin_W() {
			return this.Min_W;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM_1 = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Max_W = null;
					} else {
						this.Max_W = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Min_W = null;
					} else {
						this.Min_W = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM_1, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Max_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Max_W);
				}

				// Double

				if (this.Min_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Min_W);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM_1=" + YEAR_NUM_1);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",JS=" + JS);
			sb.append(",Max_W=" + String.valueOf(Max_W));
			sb.append(",Min_W=" + String.valueOf(Min_W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_2
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM_1;

		public String getYEAR_NUM_1() {
			return this.YEAR_NUM_1;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Max_W;

		public Double getMax_W() {
			return this.Max_W;
		}

		public Double Min_W;

		public Double getMin_W() {
			return this.Min_W;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM_1 = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Max_W = null;
					} else {
						this.Max_W = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Min_W = null;
					} else {
						this.Min_W = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM_1, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Max_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Max_W);
				}

				// Double

				if (this.Min_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Min_W);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM_1=" + YEAR_NUM_1);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",JS=" + JS);
			sb.append(",Max_W=" + String.valueOf(Max_W));
			sb.append(",Min_W=" + String.valueOf(Min_W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Max_W;

		public Double getMax_W() {
			return this.Max_W;
		}

		public Double Min_W;

		public Double getMin_W() {
			return this.Min_W;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Max_W = null;
					} else {
						this.Max_W = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Min_W = null;
					} else {
						this.Min_W = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Max_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Max_W);
				}

				// Double

				if (this.Min_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Min_W);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Max_W=" + String.valueOf(Max_W));
			sb.append(",Min_W=" + String.valueOf(Min_W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Max_W;

		public Double getMax_W() {
			return this.Max_W;
		}

		public Double Min_W;

		public Double getMin_W() {
			return this.Min_W;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Max_W = null;
					} else {
						this.Max_W = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Min_W = null;
					} else {
						this.Min_W = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Max_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Max_W);
				}

				// Double

				if (this.Min_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Min_W);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Max_W=" + String.valueOf(Max_W));
			sb.append(",Min_W=" + String.valueOf(Min_W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM_1;

		public String getYEAR_NUM_1() {
			return this.YEAR_NUM_1;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM_1 = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					this.JS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM_1, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// String

				writeString(this.JS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM_1=" + YEAR_NUM_1);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",JS=" + JS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_ID2;

		public String getKPI_ID2() {
			return this.KPI_ID2;
		}

		public String KPI_SEGMENT;

		public String getKPI_SEGMENT() {
			return this.KPI_SEGMENT;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public String BU2;

		public String getBU2() {
			return this.BU2;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_ID2 = readString(dis);

					this.KPI_SEGMENT = readString(dis);

					this.KPI_DESC = readString(dis);

					this.BU2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID2, dos);

				// String

				writeString(this.KPI_SEGMENT, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// String

				writeString(this.BU2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_ID2=" + KPI_ID2);
			sb.append(",KPI_SEGMENT=" + KPI_SEGMENT);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",BU2=" + BU2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tHashInput_4Struct implements routines.system.IPersistableRow<after_tHashInput_4Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_ID2;

		public String getKPI_ID2() {
			return this.KPI_ID2;
		}

		public String KPI_SEGMENT;

		public String getKPI_SEGMENT() {
			return this.KPI_SEGMENT;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public String BU2;

		public String getBU2() {
			return this.BU2;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_ID2 = readString(dis);

					this.KPI_SEGMENT = readString(dis);

					this.KPI_DESC = readString(dis);

					this.BU2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID2, dos);

				// String

				writeString(this.KPI_SEGMENT, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// String

				writeString(this.BU2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_ID2=" + KPI_ID2);
			sb.append(",KPI_SEGMENT=" + KPI_SEGMENT);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",BU2=" + BU2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tHashInput_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tHashInput_3Process(globalMap);

				row6Struct row6 = new row6Struct();
				out1Struct out1 = new out1Struct();
				row12Struct row12 = new row12Struct();
				out3Struct out3 = new out3Struct();
				row11Struct row11 = new row11Struct();
				row60Struct row60 = new row60Struct();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String YEAR_NUM;
					String WEEK_OF_YEAR;
					String BU;
					String JS;
					Double Max_W_max;
					Double Min_W_min;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

							result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

							result = prime * result + ((this.BU == null) ? 0 : this.BU.hashCode());

							result = prime * result + ((this.JS == null) ? 0 : this.JS.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.YEAR_NUM == null) {
							if (other.YEAR_NUM != null)
								return false;
						} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))
							return false;

						if (this.WEEK_OF_YEAR == null) {
							if (other.WEEK_OF_YEAR != null)
								return false;
						} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))
							return false;

						if (this.BU == null) {
							if (other.BU != null)
								return false;
						} else if (!this.BU.equals(other.BU))
							return false;

						if (this.JS == null) {
							if (other.JS != null)
								return false;
						} else if (!this.JS.equals(other.JS))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGOUT", false);
				start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out3");
				}

				int tos_count_tAggregateRow_2_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

				class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String YEAR_NUM_1;
					String WEEK_OF_YEAR;
					String BU;
					String JS;
					Double Max_W_max;
					Double Min_W_min;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.YEAR_NUM_1 == null) ? 0 : this.YEAR_NUM_1.hashCode());

							result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

							result = prime * result + ((this.BU == null) ? 0 : this.BU.hashCode());

							result = prime * result + ((this.JS == null) ? 0 : this.JS.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;

						if (this.YEAR_NUM_1 == null) {
							if (other.YEAR_NUM_1 != null)
								return false;
						} else if (!this.YEAR_NUM_1.equals(other.YEAR_NUM_1))
							return false;

						if (this.WEEK_OF_YEAR == null) {
							if (other.WEEK_OF_YEAR != null)
								return false;
						} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))
							return false;

						if (this.BU == null) {
							if (other.BU != null)
								return false;
						} else if (!this.BU.equals(other.BU))
							return false;

						if (this.JS == null) {
							if (other.JS != null)
								return false;
						} else if (!this.JS.equals(other.JS))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
				AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
				java.util.Map<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2>();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				out3Struct out3_tmp = new out3Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tHashInput_4 begin ] start
				 */

				ok_Hash.put("tHashInput_4", false);
				start_Hash.put("tHashInput_4", System.currentTimeMillis());

				currentComponent = "tHashInput_4";

				int tos_count_tHashInput_4 = 0;

				int nb_line_tHashInput_4 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_4 = mf_tHashInput_4
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_1");
				if (tHashFile_tHashInput_4 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row8Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
				while (iterator_tHashInput_4.hasNext()) {
					row8Struct next_tHashInput_4 = iterator_tHashInput_4.next();

					row6.OBS_DATE = next_tHashInput_4.OBS_DATE;
					row6.YEAR_NUM = next_tHashInput_4.YEAR_NUM;
					row6.MONTH_OF_YEAR = next_tHashInput_4.MONTH_OF_YEAR;
					row6.BU = next_tHashInput_4.BU;
					row6.KPI_ID = next_tHashInput_4.KPI_ID;
					row6.VAL = next_tHashInput_4.VAL;
					row6.FREQUENCY = next_tHashInput_4.FREQUENCY;
					row6.WEEK_OF_YEAR = next_tHashInput_4.WEEK_OF_YEAR;
					row6.KPI_ID2 = next_tHashInput_4.KPI_ID2;
					row6.KPI_SEGMENT = next_tHashInput_4.KPI_SEGMENT;
					row6.KPI_DESC = next_tHashInput_4.KPI_DESC;
					row6.BU2 = next_tHashInput_4.BU2;

					/**
					 * [tHashInput_4 begin ] stop
					 */

					/**
					 * [tHashInput_4 main ] start
					 */

					currentComponent = "tHashInput_4";

					tos_count_tHashInput_4++;

					/**
					 * [tHashInput_4 main ] stop
					 */

					/**
					 * [tHashInput_4 process_data_begin ] start
					 */

					currentComponent = "tHashInput_4";

					/**
					 * [tHashInput_4 process_data_begin ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					///////////////////////////////////////////////
					// Starting Lookup Table "row7"
					///////////////////////////////////////////////

					boolean forceLooprow7 = false;

					row7Struct row7ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_2 = false;

						row7HashKey.KPI_id = row6.KPI_ID;

						row7HashKey.Year = row6.YEAR_NUM;

						row7HashKey.WEEK_OF_YEAR = row6.WEEK_OF_YEAR;

						row7HashKey.hashCodeDirty = true;

						tHash_Lookup_row7.lookup(row7HashKey);

						if (!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_2 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					if (tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7'
						// and it contains more one result from keys : row7.KPI_id = '" +
						// row7HashKey.KPI_id + "', row7.Year = '" + row7HashKey.Year + "',
						// row7.WEEK_OF_YEAR = '" + row7HashKey.WEEK_OF_YEAR + "'");
					} // G 071

					row7Struct row7 = null;

					row7Struct fromLookup_row7 = null;
					row7 = row7Default;

					if (tHash_Lookup_row7 != null && tHash_Lookup_row7.hasNext()) { // G 099

						fromLookup_row7 = tHash_Lookup_row7.next();

					} // G 099

					if (fromLookup_row7 != null) {
						row7 = fromLookup_row7;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
						// ###############################
						// # Output tables

						out1 = null;
						out3 = null;

						if (!rejectedInnerJoin_tMap_2) {

// # Output table : 'out1'
							out1_tmp.YEAR_NUM = row6.YEAR_NUM;
							out1_tmp.WEEK_OF_YEAR = row6.WEEK_OF_YEAR;
							out1_tmp.BU = row6.BU;
							out1_tmp.Weight = row7.weight;
							out1_tmp.JS = row7.JS;
							out1 = out1_tmp;

// # Output table : 'out3'
							out3_tmp.YEAR_NUM_1 = row6.YEAR_NUM;
							out3_tmp.WEEK_OF_YEAR = row6.WEEK_OF_YEAR;
							out3_tmp.BU = "STC";
							out3_tmp.weight = row7.weight;
							out3_tmp.JS = row7.JS;
							out3 = out3_tmp;
						} // closing inner join bracket (2)
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_2 = false;

					tos_count_tMap_2++;

					/**
					 * [tMap_2 main ] stop
					 */

					/**
					 * [tMap_2 process_data_begin ] start
					 */

					currentComponent = "tMap_2";

					/**
					 * [tMap_2 process_data_begin ] stop
					 */
// Start of branch "out1"
					if (out1 != null) {

						/**
						 * [tAggregateRow_1_AGGOUT main ] start
						 */

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGOUT";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "out1");
						}

						operation_finder_tAggregateRow_1.YEAR_NUM = out1.YEAR_NUM;
						operation_finder_tAggregateRow_1.WEEK_OF_YEAR = out1.WEEK_OF_YEAR;
						operation_finder_tAggregateRow_1.BU = out1.BU;
						operation_finder_tAggregateRow_1.JS = out1.JS;

						operation_finder_tAggregateRow_1.hashCodeDirty = true;

						operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

						boolean isFirstAdd_tAggregateRow_1 = false;

						if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

							operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

							operation_result_tAggregateRow_1.YEAR_NUM = operation_finder_tAggregateRow_1.YEAR_NUM;
							operation_result_tAggregateRow_1.WEEK_OF_YEAR = operation_finder_tAggregateRow_1.WEEK_OF_YEAR;
							operation_result_tAggregateRow_1.BU = operation_finder_tAggregateRow_1.BU;
							operation_result_tAggregateRow_1.JS = operation_finder_tAggregateRow_1.JS;

							isFirstAdd_tAggregateRow_1 = true;

							hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
									operation_result_tAggregateRow_1);

						} // G_OutMain_AggR_001

						if (out1.Weight != null) { // G_OutMain_AggR_546

							if (operation_result_tAggregateRow_1.Max_W_max == null
									|| out1.Weight > operation_result_tAggregateRow_1.Max_W_max

							) {
								operation_result_tAggregateRow_1.Max_W_max = out1.Weight;
							}

						} // G_OutMain_AggR_546

						if (out1.Weight != null) { // G_OutMain_AggR_546

							if (operation_result_tAggregateRow_1.Min_W_min == null
									|| out1.Weight < operation_result_tAggregateRow_1.Min_W_min

							) {
								operation_result_tAggregateRow_1.Min_W_min = out1.Weight;
							}

						} // G_OutMain_AggR_546

						tos_count_tAggregateRow_1_AGGOUT++;

						/**
						 * [tAggregateRow_1_AGGOUT main ] stop
						 */

						/**
						 * [tAggregateRow_1_AGGOUT process_data_begin ] start
						 */

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGOUT";

						/**
						 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_1_AGGOUT process_data_end ] start
						 */

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGOUT";

						/**
						 * [tAggregateRow_1_AGGOUT process_data_end ] stop
						 */

					} // End of branch "out1"

// Start of branch "out3"
					if (out3 != null) {

						/**
						 * [tAggregateRow_2_AGGOUT main ] start
						 */

						currentVirtualComponent = "tAggregateRow_2";

						currentComponent = "tAggregateRow_2_AGGOUT";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "out3");
						}

						operation_finder_tAggregateRow_2.YEAR_NUM_1 = out3.YEAR_NUM_1;
						operation_finder_tAggregateRow_2.WEEK_OF_YEAR = out3.WEEK_OF_YEAR;
						operation_finder_tAggregateRow_2.BU = out3.BU;
						operation_finder_tAggregateRow_2.JS = out3.JS;

						operation_finder_tAggregateRow_2.hashCodeDirty = true;

						operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

						boolean isFirstAdd_tAggregateRow_2 = false;

						if (operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

							operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

							operation_result_tAggregateRow_2.YEAR_NUM_1 = operation_finder_tAggregateRow_2.YEAR_NUM_1;
							operation_result_tAggregateRow_2.WEEK_OF_YEAR = operation_finder_tAggregateRow_2.WEEK_OF_YEAR;
							operation_result_tAggregateRow_2.BU = operation_finder_tAggregateRow_2.BU;
							operation_result_tAggregateRow_2.JS = operation_finder_tAggregateRow_2.JS;

							isFirstAdd_tAggregateRow_2 = true;

							hash_tAggregateRow_2.put(operation_result_tAggregateRow_2,
									operation_result_tAggregateRow_2);

						} // G_OutMain_AggR_001

						if (out3.weight != null) { // G_OutMain_AggR_546

							if (operation_result_tAggregateRow_2.Max_W_max == null
									|| out3.weight > operation_result_tAggregateRow_2.Max_W_max

							) {
								operation_result_tAggregateRow_2.Max_W_max = out3.weight;
							}

						} // G_OutMain_AggR_546

						if (out3.weight != null) { // G_OutMain_AggR_546

							if (operation_result_tAggregateRow_2.Min_W_min == null
									|| out3.weight < operation_result_tAggregateRow_2.Min_W_min

							) {
								operation_result_tAggregateRow_2.Min_W_min = out3.weight;
							}

						} // G_OutMain_AggR_546

						tos_count_tAggregateRow_2_AGGOUT++;

						/**
						 * [tAggregateRow_2_AGGOUT main ] stop
						 */

						/**
						 * [tAggregateRow_2_AGGOUT process_data_begin ] start
						 */

						currentVirtualComponent = "tAggregateRow_2";

						currentComponent = "tAggregateRow_2_AGGOUT";

						/**
						 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_2_AGGOUT process_data_end ] start
						 */

						currentVirtualComponent = "tAggregateRow_2";

						currentComponent = "tAggregateRow_2_AGGOUT";

						/**
						 * [tAggregateRow_2_AGGOUT process_data_end ] stop
						 */

					} // End of branch "out3"

					/**
					 * [tMap_2 process_data_end ] start
					 */

					currentComponent = "tMap_2";

					/**
					 * [tMap_2 process_data_end ] stop
					 */

					/**
					 * [tHashInput_4 process_data_end ] start
					 */

					currentComponent = "tHashInput_4";

					/**
					 * [tHashInput_4 process_data_end ] stop
					 */

					/**
					 * [tHashInput_4 end ] start
					 */

					currentComponent = "tHashInput_4";

					nb_line_tHashInput_4++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_1");

				globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);

				ok_Hash.put("tHashInput_4", true);
				end_Hash.put("tHashInput_4", System.currentTimeMillis());

				/**
				 * [tHashInput_4 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tHashOutput_5 begin ] start
				 */

				ok_Hash.put("tHashOutput_5", false);
				start_Hash.put("tHashOutput_5", System.currentTimeMillis());

				currentComponent = "tHashOutput_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tHashOutput_5 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct> tHashFile_tHashOutput_5 = null;
				// use this map to keep the present key and the previous key of
				// AdvancedMemoryHashFile
				mf_tHashOutput_5.getKeyMap().put("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_5",
						"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_3");
				int nb_line_tHashOutput_5 = 0;

				/**
				 * [tHashOutput_5 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row12.YEAR_NUM = aggregated_row_tAggregateRow_1.YEAR_NUM;

					row12.WEEK_OF_YEAR = aggregated_row_tAggregateRow_1.WEEK_OF_YEAR;

					row12.BU = aggregated_row_tAggregateRow_1.BU;

					row12.JS = aggregated_row_tAggregateRow_1.JS;

					row12.Max_W = aggregated_row_tAggregateRow_1.Max_W_max;
					row12.Min_W = aggregated_row_tAggregateRow_1.Min_W_min;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_5 main ] start
					 */

					currentComponent = "tHashOutput_5";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row12");
					}

					if (tHashFile_tHashOutput_5 == null) {
						tHashFile_tHashOutput_5 = mf_tHashOutput_5
								.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_3");
						mf_tHashOutput_5.getResourceMap().put(
								"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_5", tHashFile_tHashOutput_5);
					}
					row14Struct oneRow_tHashOutput_5 = new row14Struct();
					oneRow_tHashOutput_5.YEAR_NUM_1 = row12.YEAR_NUM;
					oneRow_tHashOutput_5.WEEK_OF_YEAR = row12.WEEK_OF_YEAR;
					oneRow_tHashOutput_5.BU = row12.BU;
					oneRow_tHashOutput_5.weight = row12.Weight;
					oneRow_tHashOutput_5.JS = row12.JS;
					oneRow_tHashOutput_5.Max_W = row12.Max_W;
					oneRow_tHashOutput_5.Min_W = row12.Min_W;
					tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
					nb_line_tHashOutput_5++;

					tos_count_tHashOutput_5++;

					/**
					 * [tHashOutput_5 main ] stop
					 */

					/**
					 * [tHashOutput_5 process_data_begin ] start
					 */

					currentComponent = "tHashOutput_5";

					/**
					 * [tHashOutput_5 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_5 process_data_end ] start
					 */

					currentComponent = "tHashOutput_5";

					/**
					 * [tHashOutput_5 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tHashOutput_5 end ] start
				 */

				currentComponent = "tHashOutput_5";

				globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tHashOutput_5", true);
				end_Hash.put("tHashOutput_5", System.currentTimeMillis());

				/**
				 * [tHashOutput_5 end ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out3");
				}

				ok_Hash.put("tAggregateRow_2_AGGOUT", true);
				end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGOUT end ] stop
				 */

				/**
				 * [tSortRow_4_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_4_SortOut", false);
				start_Hash.put("tSortRow_4_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_4";

				currentComponent = "tSortRow_4_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tSortRow_4_SortOut = 0;

				class Comparablerow11Struct extends row11Struct implements Comparable<Comparablerow11Struct> {

					public int compareTo(Comparablerow11Struct other) {

						if (this.WEEK_OF_YEAR == null && other.WEEK_OF_YEAR != null) {
							return -1;

						} else if (this.WEEK_OF_YEAR != null && other.WEEK_OF_YEAR == null) {
							return 1;

						} else if (this.WEEK_OF_YEAR != null && other.WEEK_OF_YEAR != null) {
							if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR)) {
								return this.WEEK_OF_YEAR.compareTo(other.WEEK_OF_YEAR);
							}
						}
						if (this.BU == null && other.BU != null) {
							return -1;

						} else if (this.BU != null && other.BU == null) {
							return 1;

						} else if (this.BU != null && other.BU != null) {
							if (!this.BU.equals(other.BU)) {
								return this.BU.compareTo(other.BU);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow11Struct> list_tSortRow_4_SortOut = new java.util.ArrayList<Comparablerow11Struct>();

				/**
				 * [tSortRow_4_SortOut begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGIN", false);
				start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				int tos_count_tAggregateRow_2_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2
						.values();

				globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

				for (AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600

					/**
					 * [tAggregateRow_2_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					row11.YEAR_NUM_1 = aggregated_row_tAggregateRow_2.YEAR_NUM_1;

					row11.WEEK_OF_YEAR = aggregated_row_tAggregateRow_2.WEEK_OF_YEAR;

					row11.BU = aggregated_row_tAggregateRow_2.BU;

					row11.JS = aggregated_row_tAggregateRow_2.JS;

					row11.Max_W = aggregated_row_tAggregateRow_2.Max_W_max;
					row11.Min_W = aggregated_row_tAggregateRow_2.Min_W_min;

					tos_count_tAggregateRow_2_AGGIN++;

					/**
					 * [tAggregateRow_2_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tSortRow_4_SortOut main ] start
					 */

					currentVirtualComponent = "tSortRow_4";

					currentComponent = "tSortRow_4_SortOut";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row11");
					}

					Comparablerow11Struct arrayRowtSortRow_4_SortOut = new Comparablerow11Struct();

					arrayRowtSortRow_4_SortOut.YEAR_NUM_1 = row11.YEAR_NUM_1;
					arrayRowtSortRow_4_SortOut.WEEK_OF_YEAR = row11.WEEK_OF_YEAR;
					arrayRowtSortRow_4_SortOut.BU = row11.BU;
					arrayRowtSortRow_4_SortOut.weight = row11.weight;
					arrayRowtSortRow_4_SortOut.JS = row11.JS;
					arrayRowtSortRow_4_SortOut.Max_W = row11.Max_W;
					arrayRowtSortRow_4_SortOut.Min_W = row11.Min_W;
					list_tSortRow_4_SortOut.add(arrayRowtSortRow_4_SortOut);

					tos_count_tSortRow_4_SortOut++;

					/**
					 * [tSortRow_4_SortOut main ] stop
					 */

					/**
					 * [tSortRow_4_SortOut process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_4";

					currentComponent = "tSortRow_4_SortOut";

					/**
					 * [tSortRow_4_SortOut process_data_begin ] stop
					 */

					/**
					 * [tSortRow_4_SortOut process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_4";

					currentComponent = "tSortRow_4_SortOut";

					/**
					 * [tSortRow_4_SortOut process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_2_AGGIN", true);
				end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGIN end ] stop
				 */

				/**
				 * [tSortRow_4_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_4";

				currentComponent = "tSortRow_4_SortOut";

				row11Struct[] array_tSortRow_4_SortOut = list_tSortRow_4_SortOut.toArray(new Comparablerow11Struct[0]);

				java.util.Arrays.sort(array_tSortRow_4_SortOut);

				globalMap.put("tSortRow_4", array_tSortRow_4_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tSortRow_4_SortOut", true);
				end_Hash.put("tSortRow_4_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_4_SortOut end ] stop
				 */

				/**
				 * [tHashOutput_4 begin ] start
				 */

				ok_Hash.put("tHashOutput_4", false);
				start_Hash.put("tHashOutput_4", System.currentTimeMillis());

				currentComponent = "tHashOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row60");
				}

				int tos_count_tHashOutput_4 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct> tHashFile_tHashOutput_4 = null;
				// use this map to keep the present key and the previous key of
				// AdvancedMemoryHashFile
				mf_tHashOutput_4.getKeyMap().put("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_4",
						"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_3");
				int nb_line_tHashOutput_4 = 0;

				/**
				 * [tHashOutput_4 begin ] stop
				 */

				/**
				 * [tSortRow_4_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_4_SortIn", false);
				start_Hash.put("tSortRow_4_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_4";

				currentComponent = "tSortRow_4_SortIn";

				int tos_count_tSortRow_4_SortIn = 0;

				row11Struct[] array_tSortRow_4_SortIn = (row11Struct[]) globalMap.remove("tSortRow_4");

				int nb_line_tSortRow_4_SortIn = 0;

				row11Struct current_tSortRow_4_SortIn = null;

				for (int i_tSortRow_4_SortIn = 0; i_tSortRow_4_SortIn < array_tSortRow_4_SortIn.length; i_tSortRow_4_SortIn++) {
					current_tSortRow_4_SortIn = array_tSortRow_4_SortIn[i_tSortRow_4_SortIn];
					row60.YEAR_NUM_1 = current_tSortRow_4_SortIn.YEAR_NUM_1;
					row60.WEEK_OF_YEAR = current_tSortRow_4_SortIn.WEEK_OF_YEAR;
					row60.BU = current_tSortRow_4_SortIn.BU;
					row60.weight = current_tSortRow_4_SortIn.weight;
					row60.JS = current_tSortRow_4_SortIn.JS;
					row60.Max_W = current_tSortRow_4_SortIn.Max_W;
					row60.Min_W = current_tSortRow_4_SortIn.Min_W;
					// increase number of line sorted
					nb_line_tSortRow_4_SortIn++;

					/**
					 * [tSortRow_4_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_4_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_4";

					currentComponent = "tSortRow_4_SortIn";

					tos_count_tSortRow_4_SortIn++;

					/**
					 * [tSortRow_4_SortIn main ] stop
					 */

					/**
					 * [tSortRow_4_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_4";

					currentComponent = "tSortRow_4_SortIn";

					/**
					 * [tSortRow_4_SortIn process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_4 main ] start
					 */

					currentComponent = "tHashOutput_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row60");
					}

					if (tHashFile_tHashOutput_4 == null) {
						tHashFile_tHashOutput_4 = mf_tHashOutput_4
								.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_3");
						mf_tHashOutput_4.getResourceMap().put(
								"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_4", tHashFile_tHashOutput_4);
					}
					row14Struct oneRow_tHashOutput_4 = new row14Struct();
					oneRow_tHashOutput_4.YEAR_NUM_1 = row60.YEAR_NUM_1;
					oneRow_tHashOutput_4.WEEK_OF_YEAR = row60.WEEK_OF_YEAR;
					oneRow_tHashOutput_4.BU = row60.BU;
					oneRow_tHashOutput_4.weight = row60.weight;
					oneRow_tHashOutput_4.JS = row60.JS;
					oneRow_tHashOutput_4.Max_W = row60.Max_W;
					oneRow_tHashOutput_4.Min_W = row60.Min_W;
					tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
					nb_line_tHashOutput_4++;

					tos_count_tHashOutput_4++;

					/**
					 * [tHashOutput_4 main ] stop
					 */

					/**
					 * [tHashOutput_4 process_data_begin ] start
					 */

					currentComponent = "tHashOutput_4";

					/**
					 * [tHashOutput_4 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_4 process_data_end ] start
					 */

					currentComponent = "tHashOutput_4";

					/**
					 * [tHashOutput_4 process_data_end ] stop
					 */

					/**
					 * [tSortRow_4_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_4";

					currentComponent = "tSortRow_4_SortIn";

					/**
					 * [tSortRow_4_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_4_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_4";

					currentComponent = "tSortRow_4_SortIn";

				}

				globalMap.put("tSortRow_4_SortIn_NB_LINE", nb_line_tSortRow_4_SortIn);

				ok_Hash.put("tSortRow_4_SortIn", true);
				end_Hash.put("tSortRow_4_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_4_SortIn end ] stop
				 */

				/**
				 * [tHashOutput_4 end ] start
				 */

				currentComponent = "tHashOutput_4";

				globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row60");
				}

				ok_Hash.put("tHashOutput_4", true);
				end_Hash.put("tHashOutput_4", System.currentTimeMillis());

				/**
				 * [tHashOutput_4 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_4:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tHashInput_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tSortRow_4_SortIn"
			globalMap.remove("tSortRow_4");

			// free memory for "tAggregateRow_2_AGGIN"
			globalMap.remove("tAggregateRow_2");

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row7");

			try {

				/**
				 * [tHashInput_4 finally ] start
				 */

				currentComponent = "tHashInput_4";

				/**
				 * [tHashInput_4 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tHashOutput_5 finally ] start
				 */

				currentComponent = "tHashOutput_5";

				/**
				 * [tHashOutput_5 finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				/**
				 * [tAggregateRow_2_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				/**
				 * [tAggregateRow_2_AGGIN finally ] stop
				 */

				/**
				 * [tSortRow_4_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_4";

				currentComponent = "tSortRow_4_SortOut";

				/**
				 * [tSortRow_4_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_4_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_4";

				currentComponent = "tSortRow_4_SortIn";

				/**
				 * [tSortRow_4_SortIn finally ] stop
				 */

				/**
				 * [tHashOutput_4 finally ] start
				 */

				currentComponent = "tHashOutput_4";

				/**
				 * [tHashOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Max_W;

		public Double getMax_W() {
			return this.Max_W;
		}

		public Double Min_W;

		public Double getMin_W() {
			return this.Min_W;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Max_W = null;
					} else {
						this.Max_W = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Min_W = null;
					} else {
						this.Min_W = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Max_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Max_W);
				}

				// Double

				if (this.Min_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Min_W);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Max_W=" + String.valueOf(Max_W));
			sb.append(",Min_W=" + String.valueOf(Min_W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_3
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Max_W;

		public Double getMax_W() {
			return this.Max_W;
		}

		public Double Min_W;

		public Double getMin_W() {
			return this.Min_W;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Max_W = null;
					} else {
						this.Max_W = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Min_W = null;
					} else {
						this.Min_W = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Max_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Max_W);
				}

				// Double

				if (this.Min_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Min_W);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Max_W=" + String.valueOf(Max_W));
			sb.append(",Min_W=" + String.valueOf(Min_W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Max_W;

		public Double getMax_W() {
			return this.Max_W;
		}

		public Double Min_W;

		public Double getMin_W() {
			return this.Min_W;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Max_W = null;
					} else {
						this.Max_W = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Min_W = null;
					} else {
						this.Min_W = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Max_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Max_W);
				}

				// Double

				if (this.Min_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Min_W);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Max_W=" + String.valueOf(Max_W));
			sb.append(",Min_W=" + String.valueOf(Min_W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Max_W;

		public Double getMax_W() {
			return this.Max_W;
		}

		public Double Min_W;

		public Double getMin_W() {
			return this.Min_W;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Max_W = null;
					} else {
						this.Max_W = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Min_W = null;
					} else {
						this.Min_W = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Max_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Max_W);
				}

				// Double

				if (this.Min_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Min_W);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Max_W=" + String.valueOf(Max_W));
			sb.append(",Min_W=" + String.valueOf(Min_W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_4
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_4> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Max_W;

		public Double getMax_W() {
			return this.Max_W;
		}

		public Double Min_W;

		public Double getMin_W() {
			return this.Min_W;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Max_W = null;
					} else {
						this.Max_W = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Min_W = null;
					} else {
						this.Min_W = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Max_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Max_W);
				}

				// Double

				if (this.Min_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Min_W);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Max_W=" + String.valueOf(Max_W));
			sb.append(",Min_W=" + String.valueOf(Min_W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_4 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Integer KPI_Direction;

		public Integer getKPI_Direction() {
			return this.KPI_Direction;
		}

		public Double Proposed_Target;

		public Double getProposed_Target() {
			return this.Proposed_Target;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Diff_From_Target;

		public String getDiff_From_Target() {
			return this.Diff_From_Target;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					this.KPI_Direction = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Proposed_Target = null;
					} else {
						this.Proposed_Target = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					this.S_JS = readString(dis);

					this.Is_weekly = readString(dis);

					this.Diff_From_Target = readString(dis);

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Integer

				writeInteger(this.KPI_Direction, dos);

				// Double

				if (this.Proposed_Target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Proposed_Target);
				}

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// String

				writeString(this.S_JS, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Diff_From_Target, dos);

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",KPI_Direction=" + String.valueOf(KPI_Direction));
			sb.append(",Proposed_Target=" + String.valueOf(Proposed_Target));
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Diff_From_Target=" + Diff_From_Target);
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Integer KPI_Direction;

		public Integer getKPI_Direction() {
			return this.KPI_Direction;
		}

		public Double Proposed_Target;

		public Double getProposed_Target() {
			return this.Proposed_Target;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Diff_From_Target;

		public String getDiff_From_Target() {
			return this.Diff_From_Target;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					this.KPI_Direction = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Proposed_Target = null;
					} else {
						this.Proposed_Target = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					this.S_JS = readString(dis);

					this.Is_weekly = readString(dis);

					this.Diff_From_Target = readString(dis);

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Integer

				writeInteger(this.KPI_Direction, dos);

				// Double

				if (this.Proposed_Target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Proposed_Target);
				}

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// String

				writeString(this.S_JS, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Diff_From_Target, dos);

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",KPI_Direction=" + String.valueOf(KPI_Direction));
			sb.append(",Proposed_Target=" + String.valueOf(Proposed_Target));
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Diff_From_Target=" + Diff_From_Target);
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out17Struct implements routines.system.IPersistableRow<out17Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Integer KPI_Direction;

		public Integer getKPI_Direction() {
			return this.KPI_Direction;
		}

		public Double Proposed_Target;

		public Double getProposed_Target() {
			return this.Proposed_Target;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Diff_From_Target;

		public String getDiff_From_Target() {
			return this.Diff_From_Target;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					this.KPI_Direction = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Proposed_Target = null;
					} else {
						this.Proposed_Target = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					this.S_JS = readString(dis);

					this.Is_weekly = readString(dis);

					this.Diff_From_Target = readString(dis);

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Integer

				writeInteger(this.KPI_Direction, dos);

				// Double

				if (this.Proposed_Target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Proposed_Target);
				}

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// String

				writeString(this.S_JS, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Diff_From_Target, dos);

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",KPI_Direction=" + String.valueOf(KPI_Direction));
			sb.append(",Proposed_Target=" + String.valueOf(Proposed_Target));
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Diff_From_Target=" + Diff_From_Target);
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Integer KPI_Direction;

		public Integer getKPI_Direction() {
			return this.KPI_Direction;
		}

		public Double Proposed_Target;

		public Double getProposed_Target() {
			return this.Proposed_Target;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Diff_From_Target;

		public String getDiff_From_Target() {
			return this.Diff_From_Target;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					this.KPI_Direction = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Proposed_Target = null;
					} else {
						this.Proposed_Target = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					this.S_JS = readString(dis);

					this.Is_weekly = readString(dis);

					this.Diff_From_Target = readString(dis);

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Integer

				writeInteger(this.KPI_Direction, dos);

				// Double

				if (this.Proposed_Target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Proposed_Target);
				}

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// String

				writeString(this.S_JS, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Diff_From_Target, dos);

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",KPI_Direction=" + String.valueOf(KPI_Direction));
			sb.append(",Proposed_Target=" + String.valueOf(Proposed_Target));
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Diff_From_Target=" + Diff_From_Target);
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();
				out17Struct out17 = new out17Struct();
				row16Struct row16 = new row16Struct();
				row18Struct row18 = new row18Struct();
				out4Struct out4 = new out4Struct();
				row15Struct row15 = new row15Struct();
				row19Struct row19 = new row19Struct();

				/**
				 * [tAggregateRow_4_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_4_AGGOUT", false);
				start_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tAggregateRow_4_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_4 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_4 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_4 utilClass_tAggregateRow_4 = new UtilClass_tAggregateRow_4();

				class AggOperationStruct_tAggregateRow_4 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String YEAR_NUM;
					String WEEK_OF_YEAR;
					Double Max_W_max;
					Double Min_W_min;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

							result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_4 other = (AggOperationStruct_tAggregateRow_4) obj;

						if (this.YEAR_NUM == null) {
							if (other.YEAR_NUM != null)
								return false;
						} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))
							return false;

						if (this.WEEK_OF_YEAR == null) {
							if (other.WEEK_OF_YEAR != null)
								return false;
						} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_4 operation_result_tAggregateRow_4 = null;
				AggOperationStruct_tAggregateRow_4 operation_finder_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();
				java.util.Map<AggOperationStruct_tAggregateRow_4, AggOperationStruct_tAggregateRow_4> hash_tAggregateRow_4 = new java.util.HashMap<AggOperationStruct_tAggregateRow_4, AggOperationStruct_tAggregateRow_4>();

				/**
				 * [tAggregateRow_4_AGGOUT begin ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_3_AGGOUT", false);
				start_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tAggregateRow_3_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_3 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_3 utilClass_tAggregateRow_3 = new UtilClass_tAggregateRow_3();

				class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String YEAR_NUM;
					String BU;
					String WEEK_OF_YEAR;
					Double Max_W_max;
					Double Min_W_min;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

							result = prime * result + ((this.BU == null) ? 0 : this.BU.hashCode());

							result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;

						if (this.YEAR_NUM == null) {
							if (other.YEAR_NUM != null)
								return false;
						} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))
							return false;

						if (this.BU == null) {
							if (other.BU != null)
								return false;
						} else if (!this.BU.equals(other.BU))
							return false;

						if (this.WEEK_OF_YEAR == null) {
							if (other.WEEK_OF_YEAR != null)
								return false;
						} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
				AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
				java.util.Map<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3>();

				/**
				 * [tAggregateRow_3_AGGOUT begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out17");
				}

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tMap_18 begin ] start
				 */

				ok_Hash.put("tMap_18", false);
				start_Hash.put("tMap_18", System.currentTimeMillis());

				currentComponent = "tMap_18";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tMap_18 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_18__Struct {
				}
				Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out17Struct out17_tmp = new out17Struct();
// ###############################

				/**
				 * [tMap_18 begin ] stop
				 */

				/**
				 * [tHashInput_5 begin ] start
				 */

				ok_Hash.put("tHashInput_5", false);
				start_Hash.put("tHashInput_5", System.currentTimeMillis());

				currentComponent = "tHashInput_5";

				int tos_count_tHashInput_5 = 0;

				int nb_line_tHashInput_5 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out2Struct> tHashFile_tHashInput_5 = mf_tHashInput_5
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_6");
				if (tHashFile_tHashInput_5 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<out2Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
				while (iterator_tHashInput_5.hasNext()) {
					out2Struct next_tHashInput_5 = iterator_tHashInput_5.next();

					row13.OBS_DATE = next_tHashInput_5.OBS_DATE;
					row13.YEAR_NUM = next_tHashInput_5.YEAR_NUM;
					row13.MONTH_OF_YEAR = next_tHashInput_5.MONTH_OF_YEAR;
					row13.BU = next_tHashInput_5.BU;
					row13.KPI_ID = next_tHashInput_5.KPI_ID;
					row13.VAL = next_tHashInput_5.VAL;
					row13.FREQUENCY = next_tHashInput_5.FREQUENCY;
					row13.WEEK_OF_YEAR = next_tHashInput_5.WEEK_OF_YEAR;
					row13.KPI_DESC = next_tHashInput_5.KPI_DESC;
					row13.KPI_Direction = next_tHashInput_5.KPI_Direction;
					row13.Proposed_Target = next_tHashInput_5.Proposed_Target;
					row13.Weight = next_tHashInput_5.Weight;
					row13.JS = next_tHashInput_5.JS;
					row13.S_JS = next_tHashInput_5.S_JS;
					row13.Is_weekly = next_tHashInput_5.Is_weekly;
					row13.Diff_From_Target = next_tHashInput_5.Diff_From_Target;
					row13.Achieved = next_tHashInput_5.Achieved;
					row13.Month_Differnece = next_tHashInput_5.Month_Differnece;

					/**
					 * [tHashInput_5 begin ] stop
					 */

					/**
					 * [tHashInput_5 main ] start
					 */

					currentComponent = "tHashInput_5";

					tos_count_tHashInput_5++;

					/**
					 * [tHashInput_5 main ] stop
					 */

					/**
					 * [tHashInput_5 process_data_begin ] start
					 */

					currentComponent = "tHashInput_5";

					/**
					 * [tHashInput_5 process_data_begin ] stop
					 */

					/**
					 * [tMap_18 main ] start
					 */

					currentComponent = "tMap_18";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row13");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_18 = false;
					boolean mainRowRejected_tMap_18 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
						// ###############################
						// # Output tables

						out17 = null;

// # Output table : 'out17'
						out17_tmp.OBS_DATE = row13.OBS_DATE;
						out17_tmp.YEAR_NUM = row13.YEAR_NUM;
						out17_tmp.MONTH_OF_YEAR = row13.MONTH_OF_YEAR;
						out17_tmp.BU = row13.BU;
						out17_tmp.KPI_ID = row13.KPI_ID;
						out17_tmp.VAL = row13.VAL;
						out17_tmp.FREQUENCY = row13.FREQUENCY;
						out17_tmp.WEEK_OF_YEAR = row13.WEEK_OF_YEAR;
						out17_tmp.KPI_DESC = row13.KPI_DESC;
						out17_tmp.KPI_Direction = row13.KPI_Direction;
						out17_tmp.Proposed_Target = row13.Proposed_Target;
						out17_tmp.Weight = row13.Weight;
						out17_tmp.JS = row13.JS;
						out17_tmp.S_JS = row13.S_JS;
						out17_tmp.Is_weekly = row13.Is_weekly;
						out17_tmp.Diff_From_Target = row13.Diff_From_Target;
						out17_tmp.Achieved = row13.Achieved;
						out17_tmp.Month_Differnece = (row13.Month_Differnece <= 0.9 && row13.Month_Differnece > -0.9)
								? row13.Month_Differnece
								: (row13.Month_Differnece > 0.9) ? 0.0 : 0.0;
						out17 = out17_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_18 = false;

					tos_count_tMap_18++;

					/**
					 * [tMap_18 main ] stop
					 */

					/**
					 * [tMap_18 process_data_begin ] start
					 */

					currentComponent = "tMap_18";

					/**
					 * [tMap_18 process_data_begin ] stop
					 */
// Start of branch "out17"
					if (out17 != null) {

						/**
						 * [tReplicate_1 main ] start
						 */

						currentComponent = "tReplicate_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "out17");
						}

						row16 = new row16Struct();

						row16.OBS_DATE = out17.OBS_DATE;
						row16.YEAR_NUM = out17.YEAR_NUM;
						row16.MONTH_OF_YEAR = out17.MONTH_OF_YEAR;
						row16.BU = out17.BU;
						row16.KPI_ID = out17.KPI_ID;
						row16.VAL = out17.VAL;
						row16.FREQUENCY = out17.FREQUENCY;
						row16.WEEK_OF_YEAR = out17.WEEK_OF_YEAR;
						row16.KPI_DESC = out17.KPI_DESC;
						row16.KPI_Direction = out17.KPI_Direction;
						row16.Proposed_Target = out17.Proposed_Target;
						row16.Weight = out17.Weight;
						row16.JS = out17.JS;
						row16.S_JS = out17.S_JS;
						row16.Is_weekly = out17.Is_weekly;
						row16.Diff_From_Target = out17.Diff_From_Target;
						row16.Achieved = out17.Achieved;
						row16.Month_Differnece = out17.Month_Differnece;
						row15 = new row15Struct();

						row15.OBS_DATE = out17.OBS_DATE;
						row15.YEAR_NUM = out17.YEAR_NUM;
						row15.MONTH_OF_YEAR = out17.MONTH_OF_YEAR;
						row15.BU = out17.BU;
						row15.KPI_ID = out17.KPI_ID;
						row15.VAL = out17.VAL;
						row15.FREQUENCY = out17.FREQUENCY;
						row15.WEEK_OF_YEAR = out17.WEEK_OF_YEAR;
						row15.KPI_DESC = out17.KPI_DESC;
						row15.KPI_Direction = out17.KPI_Direction;
						row15.Proposed_Target = out17.Proposed_Target;
						row15.Weight = out17.Weight;
						row15.JS = out17.JS;
						row15.S_JS = out17.S_JS;
						row15.Is_weekly = out17.Is_weekly;
						row15.Diff_From_Target = out17.Diff_From_Target;
						row15.Achieved = out17.Achieved;
						row15.Month_Differnece = out17.Month_Differnece;

						tos_count_tReplicate_1++;

						/**
						 * [tReplicate_1 main ] stop
						 */

						/**
						 * [tReplicate_1 process_data_begin ] start
						 */

						currentComponent = "tReplicate_1";

						/**
						 * [tReplicate_1 process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_4_AGGOUT main ] start
						 */

						currentVirtualComponent = "tAggregateRow_4";

						currentComponent = "tAggregateRow_4_AGGOUT";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row16");
						}

						operation_finder_tAggregateRow_4.YEAR_NUM = row16.YEAR_NUM;
						operation_finder_tAggregateRow_4.WEEK_OF_YEAR = row16.WEEK_OF_YEAR;

						operation_finder_tAggregateRow_4.hashCodeDirty = true;

						operation_result_tAggregateRow_4 = hash_tAggregateRow_4.get(operation_finder_tAggregateRow_4);

						boolean isFirstAdd_tAggregateRow_4 = false;

						if (operation_result_tAggregateRow_4 == null) { // G_OutMain_AggR_001

							operation_result_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();

							operation_result_tAggregateRow_4.YEAR_NUM = operation_finder_tAggregateRow_4.YEAR_NUM;
							operation_result_tAggregateRow_4.WEEK_OF_YEAR = operation_finder_tAggregateRow_4.WEEK_OF_YEAR;

							isFirstAdd_tAggregateRow_4 = true;

							hash_tAggregateRow_4.put(operation_result_tAggregateRow_4,
									operation_result_tAggregateRow_4);

						} // G_OutMain_AggR_001

						if (row16.Month_Differnece != null) { // G_OutMain_AggR_546

							if (operation_result_tAggregateRow_4.Max_W_max == null
									|| row16.Month_Differnece > operation_result_tAggregateRow_4.Max_W_max

							) {
								operation_result_tAggregateRow_4.Max_W_max = row16.Month_Differnece;
							}

						} // G_OutMain_AggR_546

						if (row16.Month_Differnece != null) { // G_OutMain_AggR_546

							if (operation_result_tAggregateRow_4.Min_W_min == null
									|| row16.Month_Differnece < operation_result_tAggregateRow_4.Min_W_min

							) {
								operation_result_tAggregateRow_4.Min_W_min = row16.Month_Differnece;
							}

						} // G_OutMain_AggR_546

						tos_count_tAggregateRow_4_AGGOUT++;

						/**
						 * [tAggregateRow_4_AGGOUT main ] stop
						 */

						/**
						 * [tAggregateRow_4_AGGOUT process_data_begin ] start
						 */

						currentVirtualComponent = "tAggregateRow_4";

						currentComponent = "tAggregateRow_4_AGGOUT";

						/**
						 * [tAggregateRow_4_AGGOUT process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_4_AGGOUT process_data_end ] start
						 */

						currentVirtualComponent = "tAggregateRow_4";

						currentComponent = "tAggregateRow_4_AGGOUT";

						/**
						 * [tAggregateRow_4_AGGOUT process_data_end ] stop
						 */

						/**
						 * [tAggregateRow_3_AGGOUT main ] start
						 */

						currentVirtualComponent = "tAggregateRow_3";

						currentComponent = "tAggregateRow_3_AGGOUT";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row15");
						}

						operation_finder_tAggregateRow_3.YEAR_NUM = row15.YEAR_NUM;
						operation_finder_tAggregateRow_3.BU = row15.BU;
						operation_finder_tAggregateRow_3.WEEK_OF_YEAR = row15.WEEK_OF_YEAR;

						operation_finder_tAggregateRow_3.hashCodeDirty = true;

						operation_result_tAggregateRow_3 = hash_tAggregateRow_3.get(operation_finder_tAggregateRow_3);

						boolean isFirstAdd_tAggregateRow_3 = false;

						if (operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

							operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

							operation_result_tAggregateRow_3.YEAR_NUM = operation_finder_tAggregateRow_3.YEAR_NUM;
							operation_result_tAggregateRow_3.BU = operation_finder_tAggregateRow_3.BU;
							operation_result_tAggregateRow_3.WEEK_OF_YEAR = operation_finder_tAggregateRow_3.WEEK_OF_YEAR;

							isFirstAdd_tAggregateRow_3 = true;

							hash_tAggregateRow_3.put(operation_result_tAggregateRow_3,
									operation_result_tAggregateRow_3);

						} // G_OutMain_AggR_001

						if (row15.Month_Differnece != null) { // G_OutMain_AggR_546

							if (operation_result_tAggregateRow_3.Max_W_max == null
									|| row15.Month_Differnece > operation_result_tAggregateRow_3.Max_W_max

							) {
								operation_result_tAggregateRow_3.Max_W_max = row15.Month_Differnece;
							}

						} // G_OutMain_AggR_546

						if (row15.Month_Differnece != null) { // G_OutMain_AggR_546

							if (operation_result_tAggregateRow_3.Min_W_min == null
									|| row15.Month_Differnece < operation_result_tAggregateRow_3.Min_W_min

							) {
								operation_result_tAggregateRow_3.Min_W_min = row15.Month_Differnece;
							}

						} // G_OutMain_AggR_546

						tos_count_tAggregateRow_3_AGGOUT++;

						/**
						 * [tAggregateRow_3_AGGOUT main ] stop
						 */

						/**
						 * [tAggregateRow_3_AGGOUT process_data_begin ] start
						 */

						currentVirtualComponent = "tAggregateRow_3";

						currentComponent = "tAggregateRow_3_AGGOUT";

						/**
						 * [tAggregateRow_3_AGGOUT process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_3_AGGOUT process_data_end ] start
						 */

						currentVirtualComponent = "tAggregateRow_3";

						currentComponent = "tAggregateRow_3_AGGOUT";

						/**
						 * [tAggregateRow_3_AGGOUT process_data_end ] stop
						 */

						/**
						 * [tReplicate_1 process_data_end ] start
						 */

						currentComponent = "tReplicate_1";

						/**
						 * [tReplicate_1 process_data_end ] stop
						 */

					} // End of branch "out17"

					/**
					 * [tMap_18 process_data_end ] start
					 */

					currentComponent = "tMap_18";

					/**
					 * [tMap_18 process_data_end ] stop
					 */

					/**
					 * [tHashInput_5 process_data_end ] start
					 */

					currentComponent = "tHashInput_5";

					/**
					 * [tHashInput_5 process_data_end ] stop
					 */

					/**
					 * [tHashInput_5 end ] start
					 */

					currentComponent = "tHashInput_5";

					nb_line_tHashInput_5++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_6");

				globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);

				ok_Hash.put("tHashInput_5", true);
				end_Hash.put("tHashInput_5", System.currentTimeMillis());

				/**
				 * [tHashInput_5 end ] stop
				 */

				/**
				 * [tMap_18 end ] start
				 */

				currentComponent = "tMap_18";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tMap_18", true);
				end_Hash.put("tMap_18", System.currentTimeMillis());

				/**
				 * [tMap_18 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out17");
				}

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tAggregateRow_4_AGGOUT", true);
				end_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_4_AGGOUT end ] stop
				 */

				/**
				 * [tHashOutput_8 begin ] start
				 */

				ok_Hash.put("tHashOutput_8", false);
				start_Hash.put("tHashOutput_8", System.currentTimeMillis());

				currentComponent = "tHashOutput_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out4");
				}

				int tos_count_tHashOutput_8 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_8 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct> tHashFile_tHashOutput_8 = null;
				// use this map to keep the present key and the previous key of
				// AdvancedMemoryHashFile
				mf_tHashOutput_8.getKeyMap().put("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_8",
						"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_7");
				int nb_line_tHashOutput_8 = 0;

				/**
				 * [tHashOutput_8 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row18");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out4Struct out4_tmp = new out4Struct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_4_AGGIN", false);
				start_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGIN";

				int tos_count_tAggregateRow_4_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_4> values_tAggregateRow_4 = hash_tAggregateRow_4
						.values();

				globalMap.put("tAggregateRow_4_NB_LINE", values_tAggregateRow_4.size());

				for (AggOperationStruct_tAggregateRow_4 aggregated_row_tAggregateRow_4 : values_tAggregateRow_4) { // G_AggR_600

					/**
					 * [tAggregateRow_4_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

					row18.YEAR_NUM = aggregated_row_tAggregateRow_4.YEAR_NUM;

					row18.WEEK_OF_YEAR = aggregated_row_tAggregateRow_4.WEEK_OF_YEAR;

					row18.Max_W = aggregated_row_tAggregateRow_4.Max_W_max;
					row18.Min_W = aggregated_row_tAggregateRow_4.Min_W_min;

					tos_count_tAggregateRow_4_AGGIN++;

					/**
					 * [tAggregateRow_4_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

					/**
					 * [tAggregateRow_4_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tMap_4 main ] start
					 */

					currentComponent = "tMap_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row18");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_4 = false;
					boolean mainRowRejected_tMap_4 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
						// ###############################
						// # Output tables

						out4 = null;

// # Output table : 'out4'
						out4_tmp.YEAR_NUM = row18.YEAR_NUM;
						out4_tmp.WEEK_OF_YEAR = row18.WEEK_OF_YEAR;
						out4_tmp.BU = "STC";
						out4_tmp.Max_W = row18.Max_W;
						out4_tmp.Min_W = row18.Min_W;
						out4 = out4_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_4 = false;

					tos_count_tMap_4++;

					/**
					 * [tMap_4 main ] stop
					 */

					/**
					 * [tMap_4 process_data_begin ] start
					 */

					currentComponent = "tMap_4";

					/**
					 * [tMap_4 process_data_begin ] stop
					 */
// Start of branch "out4"
					if (out4 != null) {

						/**
						 * [tHashOutput_8 main ] start
						 */

						currentComponent = "tHashOutput_8";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "out4");
						}

						if (tHashFile_tHashOutput_8 == null) {
							tHashFile_tHashOutput_8 = mf_tHashOutput_8.getAdvancedMemoryHashFile(
									"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_7");
							mf_tHashOutput_8.getResourceMap().put(
									"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_8",
									tHashFile_tHashOutput_8);
						}
						row17Struct oneRow_tHashOutput_8 = new row17Struct();
						oneRow_tHashOutput_8.YEAR_NUM = out4.YEAR_NUM;
						oneRow_tHashOutput_8.WEEK_OF_YEAR = out4.WEEK_OF_YEAR;
						oneRow_tHashOutput_8.BU = out4.BU;
						oneRow_tHashOutput_8.Max_W = out4.Max_W;
						oneRow_tHashOutput_8.Min_W = out4.Min_W;
						tHashFile_tHashOutput_8.put(oneRow_tHashOutput_8);
						nb_line_tHashOutput_8++;

						tos_count_tHashOutput_8++;

						/**
						 * [tHashOutput_8 main ] stop
						 */

						/**
						 * [tHashOutput_8 process_data_begin ] start
						 */

						currentComponent = "tHashOutput_8";

						/**
						 * [tHashOutput_8 process_data_begin ] stop
						 */

						/**
						 * [tHashOutput_8 process_data_end ] start
						 */

						currentComponent = "tHashOutput_8";

						/**
						 * [tHashOutput_8 process_data_end ] stop
						 */

					} // End of branch "out4"

					/**
					 * [tMap_4 process_data_end ] start
					 */

					currentComponent = "tMap_4";

					/**
					 * [tMap_4 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

					/**
					 * [tAggregateRow_4_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_4_AGGIN", true);
				end_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_4_AGGIN end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row18");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tHashOutput_8 end ] start
				 */

				currentComponent = "tHashOutput_8";

				globalMap.put("tHashOutput_8_NB_LINE", nb_line_tHashOutput_8);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out4");
				}

				ok_Hash.put("tHashOutput_8", true);
				end_Hash.put("tHashOutput_8", System.currentTimeMillis());

				/**
				 * [tHashOutput_8 end ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tAggregateRow_3_AGGOUT", true);
				end_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_3_AGGOUT end ] stop
				 */

				/**
				 * [tHashOutput_9 begin ] start
				 */

				ok_Hash.put("tHashOutput_9", false);
				start_Hash.put("tHashOutput_9", System.currentTimeMillis());

				currentComponent = "tHashOutput_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row19");
				}

				int tos_count_tHashOutput_9 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_9 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct> tHashFile_tHashOutput_9 = null;
				// use this map to keep the present key and the previous key of
				// AdvancedMemoryHashFile
				mf_tHashOutput_9.getKeyMap().put("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_9",
						"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_7");
				int nb_line_tHashOutput_9 = 0;

				/**
				 * [tHashOutput_9 begin ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_3_AGGIN", false);
				start_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGIN";

				int tos_count_tAggregateRow_3_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3
						.values();

				globalMap.put("tAggregateRow_3_NB_LINE", values_tAggregateRow_3.size());

				for (AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600

					/**
					 * [tAggregateRow_3_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

					row19.YEAR_NUM = aggregated_row_tAggregateRow_3.YEAR_NUM;

					row19.WEEK_OF_YEAR = aggregated_row_tAggregateRow_3.WEEK_OF_YEAR;

					row19.BU = aggregated_row_tAggregateRow_3.BU;

					row19.Max_W = aggregated_row_tAggregateRow_3.Max_W_max;
					row19.Min_W = aggregated_row_tAggregateRow_3.Min_W_min;

					tos_count_tAggregateRow_3_AGGIN++;

					/**
					 * [tAggregateRow_3_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

					/**
					 * [tAggregateRow_3_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_9 main ] start
					 */

					currentComponent = "tHashOutput_9";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row19");
					}

					if (tHashFile_tHashOutput_9 == null) {
						tHashFile_tHashOutput_9 = mf_tHashOutput_9
								.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_7");
						mf_tHashOutput_9.getResourceMap().put(
								"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_9", tHashFile_tHashOutput_9);
					}
					row17Struct oneRow_tHashOutput_9 = new row17Struct();
					oneRow_tHashOutput_9.YEAR_NUM = row19.YEAR_NUM;
					oneRow_tHashOutput_9.WEEK_OF_YEAR = row19.WEEK_OF_YEAR;
					oneRow_tHashOutput_9.BU = row19.BU;
					oneRow_tHashOutput_9.Max_W = row19.Max_W;
					oneRow_tHashOutput_9.Min_W = row19.Min_W;
					tHashFile_tHashOutput_9.put(oneRow_tHashOutput_9);
					nb_line_tHashOutput_9++;

					tos_count_tHashOutput_9++;

					/**
					 * [tHashOutput_9 main ] stop
					 */

					/**
					 * [tHashOutput_9 process_data_begin ] start
					 */

					currentComponent = "tHashOutput_9";

					/**
					 * [tHashOutput_9 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_9 process_data_end ] start
					 */

					currentComponent = "tHashOutput_9";

					/**
					 * [tHashOutput_9 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

					/**
					 * [tAggregateRow_3_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_3_AGGIN", true);
				end_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_3_AGGIN end ] stop
				 */

				/**
				 * [tHashOutput_9 end ] start
				 */

				currentComponent = "tHashOutput_9";

				globalMap.put("tHashOutput_9_NB_LINE", nb_line_tHashOutput_9);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row19");
				}

				ok_Hash.put("tHashOutput_9", true);
				end_Hash.put("tHashOutput_9", System.currentTimeMillis());

				/**
				 * [tHashOutput_9 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_5:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
			}

			tHashInput_10Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_3_AGGIN"
			globalMap.remove("tAggregateRow_3");

			// free memory for "tAggregateRow_4_AGGIN"
			globalMap.remove("tAggregateRow_4");

			try {

				/**
				 * [tHashInput_5 finally ] start
				 */

				currentComponent = "tHashInput_5";

				/**
				 * [tHashInput_5 finally ] stop
				 */

				/**
				 * [tMap_18 finally ] start
				 */

				currentComponent = "tMap_18";

				/**
				 * [tMap_18 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				/**
				 * [tAggregateRow_4_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGIN";

				/**
				 * [tAggregateRow_4_AGGIN finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tHashOutput_8 finally ] start
				 */

				currentComponent = "tHashOutput_8";

				/**
				 * [tHashOutput_8 finally ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				/**
				 * [tAggregateRow_3_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGIN";

				/**
				 * [tAggregateRow_3_AGGIN finally ] stop
				 */

				/**
				 * [tHashOutput_9 finally ] start
				 */

				currentComponent = "tHashOutput_9";

				/**
				 * [tHashOutput_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}

	public static class out7Struct implements routines.system.IPersistableRow<out7Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Integer KPI_Direction;

		public Integer getKPI_Direction() {
			return this.KPI_Direction;
		}

		public Double Proposed_Target;

		public Double getProposed_Target() {
			return this.Proposed_Target;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Diff_From_Target;

		public String getDiff_From_Target() {
			return this.Diff_From_Target;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					this.KPI_Direction = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Proposed_Target = null;
					} else {
						this.Proposed_Target = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					this.S_JS = readString(dis);

					this.Is_weekly = readString(dis);

					this.Diff_From_Target = readString(dis);

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Integer

				writeInteger(this.KPI_Direction, dos);

				// Double

				if (this.Proposed_Target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Proposed_Target);
				}

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// String

				writeString(this.S_JS, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Diff_From_Target, dos);

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",KPI_Direction=" + String.valueOf(KPI_Direction));
			sb.append(",Proposed_Target=" + String.valueOf(Proposed_Target));
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Diff_From_Target=" + Diff_From_Target);
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Integer KPI_Direction;

		public Integer getKPI_Direction() {
			return this.KPI_Direction;
		}

		public Double Proposed_Target;

		public Double getProposed_Target() {
			return this.Proposed_Target;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Diff_From_Target;

		public String getDiff_From_Target() {
			return this.Diff_From_Target;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					this.KPI_Direction = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Proposed_Target = null;
					} else {
						this.Proposed_Target = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					this.S_JS = readString(dis);

					this.Is_weekly = readString(dis);

					this.Diff_From_Target = readString(dis);

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Integer

				writeInteger(this.KPI_Direction, dos);

				// Double

				if (this.Proposed_Target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Proposed_Target);
				}

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// String

				writeString(this.S_JS, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Diff_From_Target, dos);

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",KPI_Direction=" + String.valueOf(KPI_Direction));
			sb.append(",Proposed_Target=" + String.valueOf(Proposed_Target));
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Diff_From_Target=" + Diff_From_Target);
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row23Struct row23 = new row23Struct();
				out7Struct out7 = new out7Struct();

				/**
				 * [tHashOutput_11 begin ] start
				 */

				ok_Hash.put("tHashOutput_11", false);
				start_Hash.put("tHashOutput_11", System.currentTimeMillis());

				currentComponent = "tHashOutput_11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out7");
				}

				int tos_count_tHashOutput_11 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_11 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out2Struct> tHashFile_tHashOutput_11 = null;
				// use this map to keep the present key and the previous key of
				// AdvancedMemoryHashFile
				mf_tHashOutput_11.getKeyMap().put("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_11",
						"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_6");
				int nb_line_tHashOutput_11 = 0;

				/**
				 * [tHashOutput_11 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row23");
				}

				int tos_count_tMap_7 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out7Struct out7_tmp = new out7Struct();
// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tHashInput_10 begin ] start
				 */

				ok_Hash.put("tHashInput_10", false);
				start_Hash.put("tHashInput_10", System.currentTimeMillis());

				currentComponent = "tHashInput_10";

				int tos_count_tHashInput_10 = 0;

				int nb_line_tHashInput_10 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_10 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashInput_10 = mf_tHashInput_10
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_12");
				if (tHashFile_tHashInput_10 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row24Struct> iterator_tHashInput_10 = tHashFile_tHashInput_10.iterator();
				while (iterator_tHashInput_10.hasNext()) {
					row24Struct next_tHashInput_10 = iterator_tHashInput_10.next();

					row23.OBS_DATE = next_tHashInput_10.OBS_DATE;
					row23.YEAR_NUM = next_tHashInput_10.YEAR_NUM;
					row23.MONTH_OF_YEAR = next_tHashInput_10.MONTH_OF_YEAR;
					row23.BU = next_tHashInput_10.BU;
					row23.KPI_ID = next_tHashInput_10.KPI_ID;
					row23.VAL = next_tHashInput_10.VAL;
					row23.FREQUENCY = next_tHashInput_10.FREQUENCY;
					row23.WEEK_OF_YEAR = next_tHashInput_10.WEEK_OF_YEAR;
					row23.KPI_DESC = next_tHashInput_10.KPI_DESC;
					row23.KPI_Direction = next_tHashInput_10.KPI_Direction;
					row23.Proposed_Target = next_tHashInput_10.Proposed_Target;
					row23.Weight = next_tHashInput_10.Weight;
					row23.JS = next_tHashInput_10.JS;
					row23.S_JS = next_tHashInput_10.S_JS;
					row23.Is_weekly = next_tHashInput_10.Is_weekly;
					row23.Diff_From_Target = next_tHashInput_10.Diff_From_Target;
					row23.Achieved = next_tHashInput_10.Achieved;
					row23.Month_Differnece = next_tHashInput_10.Month_Differnece;

					/**
					 * [tHashInput_10 begin ] stop
					 */

					/**
					 * [tHashInput_10 main ] start
					 */

					currentComponent = "tHashInput_10";

					tos_count_tHashInput_10++;

					/**
					 * [tHashInput_10 main ] stop
					 */

					/**
					 * [tHashInput_10 process_data_begin ] start
					 */

					currentComponent = "tHashInput_10";

					/**
					 * [tHashInput_10 process_data_begin ] stop
					 */

					/**
					 * [tMap_7 main ] start
					 */

					currentComponent = "tMap_7";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row23");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_7 = false;
					boolean mainRowRejected_tMap_7 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
						// ###############################
						// # Output tables

						out7 = null;

// # Output table : 'out7'
						out7_tmp.OBS_DATE = row23.OBS_DATE;
						out7_tmp.YEAR_NUM = row23.YEAR_NUM;
						out7_tmp.MONTH_OF_YEAR = row23.MONTH_OF_YEAR;
						out7_tmp.BU = "STC";
						out7_tmp.KPI_ID = row23.KPI_ID;
						out7_tmp.VAL = row23.VAL;
						out7_tmp.FREQUENCY = row23.FREQUENCY;
						out7_tmp.WEEK_OF_YEAR = row23.WEEK_OF_YEAR;
						out7_tmp.KPI_DESC = row23.KPI_DESC;
						out7_tmp.KPI_Direction = row23.KPI_Direction;
						out7_tmp.Proposed_Target = row23.Proposed_Target;
						out7_tmp.Weight = row23.Weight;
						out7_tmp.JS = row23.JS;
						out7_tmp.S_JS = row23.S_JS;
						out7_tmp.Is_weekly = row23.Is_weekly;
						out7_tmp.Diff_From_Target = row23.Diff_From_Target;
						out7_tmp.Achieved = row23.Achieved;
						out7_tmp.Month_Differnece = row23.Month_Differnece;
						out7 = out7_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_7 = false;

					tos_count_tMap_7++;

					/**
					 * [tMap_7 main ] stop
					 */

					/**
					 * [tMap_7 process_data_begin ] start
					 */

					currentComponent = "tMap_7";

					/**
					 * [tMap_7 process_data_begin ] stop
					 */
// Start of branch "out7"
					if (out7 != null) {

						/**
						 * [tHashOutput_11 main ] start
						 */

						currentComponent = "tHashOutput_11";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "out7");
						}

						if (tHashFile_tHashOutput_11 == null) {
							tHashFile_tHashOutput_11 = mf_tHashOutput_11.getAdvancedMemoryHashFile(
									"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_6");
							mf_tHashOutput_11.getResourceMap().put(
									"tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_11",
									tHashFile_tHashOutput_11);
						}
						out2Struct oneRow_tHashOutput_11 = new out2Struct();
						oneRow_tHashOutput_11.OBS_DATE = out7.OBS_DATE;
						oneRow_tHashOutput_11.YEAR_NUM = out7.YEAR_NUM;
						oneRow_tHashOutput_11.MONTH_OF_YEAR = out7.MONTH_OF_YEAR;
						oneRow_tHashOutput_11.BU = out7.BU;
						oneRow_tHashOutput_11.KPI_ID = out7.KPI_ID;
						oneRow_tHashOutput_11.VAL = out7.VAL;
						oneRow_tHashOutput_11.FREQUENCY = out7.FREQUENCY;
						oneRow_tHashOutput_11.WEEK_OF_YEAR = out7.WEEK_OF_YEAR;
						oneRow_tHashOutput_11.KPI_DESC = out7.KPI_DESC;
						oneRow_tHashOutput_11.KPI_Direction = out7.KPI_Direction;
						oneRow_tHashOutput_11.Proposed_Target = out7.Proposed_Target;
						oneRow_tHashOutput_11.Weight = out7.Weight;
						oneRow_tHashOutput_11.JS = out7.JS;
						oneRow_tHashOutput_11.S_JS = out7.S_JS;
						oneRow_tHashOutput_11.Is_weekly = out7.Is_weekly;
						oneRow_tHashOutput_11.Diff_From_Target = out7.Diff_From_Target;
						oneRow_tHashOutput_11.Achieved = out7.Achieved;
						oneRow_tHashOutput_11.Month_Differnece = out7.Month_Differnece;
						tHashFile_tHashOutput_11.put(oneRow_tHashOutput_11);
						nb_line_tHashOutput_11++;

						tos_count_tHashOutput_11++;

						/**
						 * [tHashOutput_11 main ] stop
						 */

						/**
						 * [tHashOutput_11 process_data_begin ] start
						 */

						currentComponent = "tHashOutput_11";

						/**
						 * [tHashOutput_11 process_data_begin ] stop
						 */

						/**
						 * [tHashOutput_11 process_data_end ] start
						 */

						currentComponent = "tHashOutput_11";

						/**
						 * [tHashOutput_11 process_data_end ] stop
						 */

					} // End of branch "out7"

					/**
					 * [tMap_7 process_data_end ] start
					 */

					currentComponent = "tMap_7";

					/**
					 * [tMap_7 process_data_end ] stop
					 */

					/**
					 * [tHashInput_10 process_data_end ] start
					 */

					currentComponent = "tHashInput_10";

					/**
					 * [tHashInput_10 process_data_end ] stop
					 */

					/**
					 * [tHashInput_10 end ] start
					 */

					currentComponent = "tHashInput_10";

					nb_line_tHashInput_10++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_12");

				globalMap.put("tHashInput_10_NB_LINE", nb_line_tHashInput_10);

				ok_Hash.put("tHashInput_10", true);
				end_Hash.put("tHashInput_10", System.currentTimeMillis());

				/**
				 * [tHashInput_10 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row23");
				}

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tHashOutput_11 end ] start
				 */

				currentComponent = "tHashOutput_11";

				globalMap.put("tHashOutput_11_NB_LINE", nb_line_tHashOutput_11);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out7");
				}

				ok_Hash.put("tHashOutput_11", true);
				end_Hash.put("tHashOutput_11", System.currentTimeMillis());

				/**
				 * [tHashOutput_11 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_10:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
			}

			tHashInput_8Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_10 finally ] start
				 */

				currentComponent = "tHashInput_10";

				/**
				 * [tHashInput_10 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tHashOutput_11 finally ] start
				 */

				currentComponent = "tHashOutput_11";

				/**
				 * [tHashOutput_11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_10_SUBPROCESS_STATE", 1);
	}

	public static class out8Struct implements routines.system.IPersistableRow<out8Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Integer KPI_Direction;

		public Integer getKPI_Direction() {
			return this.KPI_Direction;
		}

		public Double Proposed_Target;

		public Double getProposed_Target() {
			return this.Proposed_Target;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Diff_From_Target;

		public String getDiff_From_Target() {
			return this.Diff_From_Target;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					this.KPI_Direction = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Proposed_Target = null;
					} else {
						this.Proposed_Target = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					this.S_JS = readString(dis);

					this.Is_weekly = readString(dis);

					this.Diff_From_Target = readString(dis);

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Integer

				writeInteger(this.KPI_Direction, dos);

				// Double

				if (this.Proposed_Target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Proposed_Target);
				}

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// String

				writeString(this.S_JS, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Diff_From_Target, dos);

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",KPI_Direction=" + String.valueOf(KPI_Direction));
			sb.append(",Proposed_Target=" + String.valueOf(Proposed_Target));
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Diff_From_Target=" + Diff_From_Target);
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tHashInput_8Struct implements routines.system.IPersistableRow<after_tHashInput_8Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Integer KPI_Direction;

		public Integer getKPI_Direction() {
			return this.KPI_Direction;
		}

		public Double Proposed_Target;

		public Double getProposed_Target() {
			return this.Proposed_Target;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String Diff_From_Target;

		public String getDiff_From_Target() {
			return this.Diff_From_Target;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.OBS_DATE = readDate(dis);

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					this.KPI_Direction = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Proposed_Target = null;
					} else {
						this.Proposed_Target = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					this.S_JS = readString(dis);

					this.Is_weekly = readString(dis);

					this.Diff_From_Target = readString(dis);

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.OBS_DATE, dos);

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Integer

				writeInteger(this.KPI_Direction, dos);

				// Double

				if (this.Proposed_Target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Proposed_Target);
				}

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// String

				writeString(this.S_JS, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.Diff_From_Target, dos);

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",KPI_Direction=" + String.valueOf(KPI_Direction));
			sb.append(",Proposed_Target=" + String.valueOf(Proposed_Target));
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",Diff_From_Target=" + Diff_From_Target);
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tHashInput_8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tHashInput_9Process(globalMap);

				row21Struct row21 = new row21Struct();
				out6Struct out6 = new out6Struct();
				out8Struct out8 = new out8Struct();

				/**
				 * [tHashOutput_13 begin ] start
				 */

				ok_Hash.put("tHashOutput_13", false);
				start_Hash.put("tHashOutput_13", System.currentTimeMillis());

				currentComponent = "tHashOutput_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out8");
				}

				int tos_count_tHashOutput_13 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_13 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out8Struct> tHashFile_tHashOutput_13 = null;
				String hashKey_tHashOutput_13 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_13";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_13)) {
					if (mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13) == null) {
						mf_tHashOutput_13.getResourceMap().put(hashKey_tHashOutput_13,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out8Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_13 = mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13);
					} else {
						tHashFile_tHashOutput_13 = mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13);
					}
				}
				int nb_line_tHashOutput_13 = 0;

				/**
				 * [tHashOutput_13 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out6");
				}

				int tos_count_tMap_8 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out8Struct out8_tmp = new out8Struct();
// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row21");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) globalMap
						.get("tHash_Lookup_row22"));

				row22Struct row22HashKey = new row22Struct();
				row22Struct row22Default = new row22Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out6Struct out6_tmp = new out6Struct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tHashInput_8 begin ] start
				 */

				ok_Hash.put("tHashInput_8", false);
				start_Hash.put("tHashInput_8", System.currentTimeMillis());

				currentComponent = "tHashInput_8";

				int tos_count_tHashInput_8 = 0;

				int nb_line_tHashInput_8 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out2Struct> tHashFile_tHashInput_8 = mf_tHashInput_8
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_6");
				if (tHashFile_tHashInput_8 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<out2Struct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
				while (iterator_tHashInput_8.hasNext()) {
					out2Struct next_tHashInput_8 = iterator_tHashInput_8.next();

					row21.OBS_DATE = next_tHashInput_8.OBS_DATE;
					row21.YEAR_NUM = next_tHashInput_8.YEAR_NUM;
					row21.MONTH_OF_YEAR = next_tHashInput_8.MONTH_OF_YEAR;
					row21.BU = next_tHashInput_8.BU;
					row21.KPI_ID = next_tHashInput_8.KPI_ID;
					row21.VAL = next_tHashInput_8.VAL;
					row21.FREQUENCY = next_tHashInput_8.FREQUENCY;
					row21.WEEK_OF_YEAR = next_tHashInput_8.WEEK_OF_YEAR;
					row21.KPI_DESC = next_tHashInput_8.KPI_DESC;
					row21.KPI_Direction = next_tHashInput_8.KPI_Direction;
					row21.Proposed_Target = next_tHashInput_8.Proposed_Target;
					row21.Weight = next_tHashInput_8.Weight;
					row21.JS = next_tHashInput_8.JS;
					row21.S_JS = next_tHashInput_8.S_JS;
					row21.Is_weekly = next_tHashInput_8.Is_weekly;
					row21.Diff_From_Target = next_tHashInput_8.Diff_From_Target;
					row21.Achieved = next_tHashInput_8.Achieved;
					row21.Month_Differnece = next_tHashInput_8.Month_Differnece;

					/**
					 * [tHashInput_8 begin ] stop
					 */

					/**
					 * [tHashInput_8 main ] start
					 */

					currentComponent = "tHashInput_8";

					tos_count_tHashInput_8++;

					/**
					 * [tHashInput_8 main ] stop
					 */

					/**
					 * [tHashInput_8 process_data_begin ] start
					 */

					currentComponent = "tHashInput_8";

					/**
					 * [tHashInput_8 process_data_begin ] stop
					 */

					/**
					 * [tMap_6 main ] start
					 */

					currentComponent = "tMap_6";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row21");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_6 = false;
					boolean mainRowRejected_tMap_6 = false;

					///////////////////////////////////////////////
					// Starting Lookup Table "row22"
					///////////////////////////////////////////////

					boolean forceLooprow22 = false;

					row22Struct row22ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_6 = false;

						row22HashKey.YEAR_NUM = row21.YEAR_NUM;

						row22HashKey.WEEK_OF_YEAR = row21.WEEK_OF_YEAR;

						row22HashKey.BU = row21.BU;

						row22HashKey.JS = row21.JS;

						row22HashKey.hashCodeDirty = true;

						tHash_Lookup_row22.lookup(row22HashKey);

						if (!tHash_Lookup_row22.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_6 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					if (tHash_Lookup_row22 != null && tHash_Lookup_row22.getCount(row22HashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
						// 'row22' and it contains more one result from keys : row22.YEAR_NUM = '" +
						// row22HashKey.YEAR_NUM + "', row22.WEEK_OF_YEAR = '" +
						// row22HashKey.WEEK_OF_YEAR + "', row22.BU = '" + row22HashKey.BU + "',
						// row22.JS = '" + row22HashKey.JS + "'");
					} // G 071

					row22Struct row22 = null;

					row22Struct fromLookup_row22 = null;
					row22 = row22Default;

					if (tHash_Lookup_row22 != null && tHash_Lookup_row22.hasNext()) { // G 099

						fromLookup_row22 = tHash_Lookup_row22.next();

					} // G 099

					if (fromLookup_row22 != null) {
						row22 = fromLookup_row22;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
						// ###############################
						// # Output tables

						out6 = null;

						if (!rejectedInnerJoin_tMap_6) {

// # Output table : 'out6'
							out6_tmp.YEAR_NUM = row21.YEAR_NUM;
							out6_tmp.MONTH_OF_YEAR = row21.MONTH_OF_YEAR;
							out6_tmp.BU = row21.BU;
							out6_tmp.KPI_ID = row21.KPI_ID;
							out6_tmp.VAL = row21.VAL;
							out6_tmp.FREQUENCY = row21.FREQUENCY;
							out6_tmp.WEEK_OF_YEAR = row21.WEEK_OF_YEAR;
							out6_tmp.KPI_DESC = row21.KPI_DESC;
							out6_tmp.Weight = row21.Weight;
							out6_tmp.JS = row21.JS;
							out6_tmp.Month_Differnece = row21.Month_Differnece;
							out6_tmp.Achieved = row21.Achieved;
							out6_tmp.Angle_Of_KPI = ((row21.Weight - row22.Min_W) / (row22.Max_W - row22.Min_W)
									* Agg_Class_Methods.jou_stage_angle(row22.JS))
									+ ((Agg_Class_Methods.jou_stage_angle(row22.JS) == 82.0) ? 0.0
											: (Agg_Class_Methods.jou_stage_angle(row22.JS) == 215.0) ? 82.0
													: 215.0 + 82.0);
							out6 = out6_tmp;
						} // closing inner join bracket (2)
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_6 = false;

					tos_count_tMap_6++;

					/**
					 * [tMap_6 main ] stop
					 */

					/**
					 * [tMap_6 process_data_begin ] start
					 */

					currentComponent = "tMap_6";

					/**
					 * [tMap_6 process_data_begin ] stop
					 */
// Start of branch "out6"
					if (out6 != null) {

						/**
						 * [tMap_8 main ] start
						 */

						currentComponent = "tMap_8";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "out6");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_8 = false;
						boolean mainRowRejected_tMap_8 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
							// ###############################
							// # Output tables

							out8 = null;

// # Output table : 'out8'
							out8_tmp.YEAR_NUM = out6.YEAR_NUM;
							out8_tmp.MONTH_OF_YEAR = out6.MONTH_OF_YEAR;
							out8_tmp.BU = out6.BU;
							out8_tmp.KPI_ID = out6.KPI_ID;
							out8_tmp.VAL = out6.VAL;
							out8_tmp.FREQUENCY = out6.FREQUENCY;
							out8_tmp.WEEK_OF_YEAR = out6.WEEK_OF_YEAR;
							out8_tmp.KPI_DESC = out6.KPI_DESC;
							out8_tmp.Weight = out6.Weight;
							out8_tmp.JS = out6.JS;
							out8_tmp.Month_Differnece = out6.Month_Differnece;
							out8_tmp.Achieved = out6.Achieved;
							out8_tmp.Angle_Of_KPI = out6.Angle_Of_KPI > 360 ? 360
									: out6.Angle_Of_KPI < 0.0 ? 0.0 : out6.Angle_Of_KPI;
							out8 = out8_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_8 = false;

						tos_count_tMap_8++;

						/**
						 * [tMap_8 main ] stop
						 */

						/**
						 * [tMap_8 process_data_begin ] start
						 */

						currentComponent = "tMap_8";

						/**
						 * [tMap_8 process_data_begin ] stop
						 */
// Start of branch "out8"
						if (out8 != null) {

							/**
							 * [tHashOutput_13 main ] start
							 */

							currentComponent = "tHashOutput_13";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out8");
							}

							out8Struct oneRow_tHashOutput_13 = new out8Struct();

							oneRow_tHashOutput_13.YEAR_NUM = out8.YEAR_NUM;
							oneRow_tHashOutput_13.MONTH_OF_YEAR = out8.MONTH_OF_YEAR;
							oneRow_tHashOutput_13.BU = out8.BU;
							oneRow_tHashOutput_13.KPI_ID = out8.KPI_ID;
							oneRow_tHashOutput_13.VAL = out8.VAL;
							oneRow_tHashOutput_13.FREQUENCY = out8.FREQUENCY;
							oneRow_tHashOutput_13.WEEK_OF_YEAR = out8.WEEK_OF_YEAR;
							oneRow_tHashOutput_13.KPI_DESC = out8.KPI_DESC;
							oneRow_tHashOutput_13.Weight = out8.Weight;
							oneRow_tHashOutput_13.JS = out8.JS;
							oneRow_tHashOutput_13.Month_Differnece = out8.Month_Differnece;
							oneRow_tHashOutput_13.Achieved = out8.Achieved;
							oneRow_tHashOutput_13.Angle_Of_KPI = out8.Angle_Of_KPI;

							tHashFile_tHashOutput_13.put(oneRow_tHashOutput_13);
							nb_line_tHashOutput_13++;

							tos_count_tHashOutput_13++;

							/**
							 * [tHashOutput_13 main ] stop
							 */

							/**
							 * [tHashOutput_13 process_data_begin ] start
							 */

							currentComponent = "tHashOutput_13";

							/**
							 * [tHashOutput_13 process_data_begin ] stop
							 */

							/**
							 * [tHashOutput_13 process_data_end ] start
							 */

							currentComponent = "tHashOutput_13";

							/**
							 * [tHashOutput_13 process_data_end ] stop
							 */

						} // End of branch "out8"

						/**
						 * [tMap_8 process_data_end ] start
						 */

						currentComponent = "tMap_8";

						/**
						 * [tMap_8 process_data_end ] stop
						 */

					} // End of branch "out6"

					/**
					 * [tMap_6 process_data_end ] start
					 */

					currentComponent = "tMap_6";

					/**
					 * [tMap_6 process_data_end ] stop
					 */

					/**
					 * [tHashInput_8 process_data_end ] start
					 */

					currentComponent = "tHashInput_8";

					/**
					 * [tHashInput_8 process_data_end ] stop
					 */

					/**
					 * [tHashInput_8 end ] start
					 */

					currentComponent = "tHashInput_8";

					nb_line_tHashInput_8++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_6");

				globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);

				ok_Hash.put("tHashInput_8", true);
				end_Hash.put("tHashInput_8", System.currentTimeMillis());

				/**
				 * [tHashInput_8 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row22 != null) {
					tHash_Lookup_row22.endGet();
				}
				globalMap.remove("tHash_Lookup_row22");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row21");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out6");
				}

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tHashOutput_13 end ] start
				 */

				currentComponent = "tHashOutput_13";

				globalMap.put("tHashOutput_13_NB_LINE", nb_line_tHashOutput_13);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out8");
				}

				ok_Hash.put("tHashOutput_13", true);
				end_Hash.put("tHashOutput_13", System.currentTimeMillis());

				/**
				 * [tHashOutput_13 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_8:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
			}

			tHashInput_11Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row22");

			try {

				/**
				 * [tHashInput_8 finally ] start
				 */

				currentComponent = "tHashInput_8";

				/**
				 * [tHashInput_8 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tHashOutput_13 finally ] start
				 */

				currentComponent = "tHashOutput_13";

				/**
				 * [tHashOutput_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_8_SUBPROCESS_STATE", 1);
	}

	public static class out9Struct implements routines.system.IPersistableRow<out9Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tHashInput_11Struct
			implements routines.system.IPersistableRow<after_tHashInput_11Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tHashInput_11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tHashInput_12Process(globalMap);

				row25Struct row25 = new row25Struct();
				out9Struct out9 = new out9Struct();

				/**
				 * [tHashOutput_14 begin ] start
				 */

				ok_Hash.put("tHashOutput_14", false);
				start_Hash.put("tHashOutput_14", System.currentTimeMillis());

				currentComponent = "tHashOutput_14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out9");
				}

				int tos_count_tHashOutput_14 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_14 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out9Struct> tHashFile_tHashOutput_14 = null;
				String hashKey_tHashOutput_14 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_14";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_14)) {
					if (mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14) == null) {
						mf_tHashOutput_14.getResourceMap().put(hashKey_tHashOutput_14,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out9Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_14 = mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14);
					} else {
						tHashFile_tHashOutput_14 = mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14);
					}
				}
				int nb_line_tHashOutput_14 = 0;

				/**
				 * [tHashOutput_14 begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());

				currentComponent = "tMap_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row25");
				}

				int tos_count_tMap_9 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) globalMap
						.get("tHash_Lookup_row26"));

				row26Struct row26HashKey = new row26Struct();
				row26Struct row26Default = new row26Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out9Struct out9_tmp = new out9Struct();
// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tHashInput_11 begin ] start
				 */

				ok_Hash.put("tHashInput_11", false);
				start_Hash.put("tHashInput_11", System.currentTimeMillis());

				currentComponent = "tHashInput_11";

				int tos_count_tHashInput_11 = 0;

				int nb_line_tHashInput_11 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_11 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out8Struct> tHashFile_tHashInput_11 = mf_tHashInput_11
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_13");
				if (tHashFile_tHashInput_11 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<out8Struct> iterator_tHashInput_11 = tHashFile_tHashInput_11.iterator();
				while (iterator_tHashInput_11.hasNext()) {
					out8Struct next_tHashInput_11 = iterator_tHashInput_11.next();

					row25.YEAR_NUM = next_tHashInput_11.YEAR_NUM;
					row25.MONTH_OF_YEAR = next_tHashInput_11.MONTH_OF_YEAR;
					row25.BU = next_tHashInput_11.BU;
					row25.KPI_ID = next_tHashInput_11.KPI_ID;
					row25.VAL = next_tHashInput_11.VAL;
					row25.FREQUENCY = next_tHashInput_11.FREQUENCY;
					row25.WEEK_OF_YEAR = next_tHashInput_11.WEEK_OF_YEAR;
					row25.KPI_DESC = next_tHashInput_11.KPI_DESC;
					row25.Weight = next_tHashInput_11.Weight;
					row25.JS = next_tHashInput_11.JS;
					row25.Month_Differnece = next_tHashInput_11.Month_Differnece;
					row25.Achieved = next_tHashInput_11.Achieved;
					row25.Angle_Of_KPI = next_tHashInput_11.Angle_Of_KPI;

					/**
					 * [tHashInput_11 begin ] stop
					 */

					/**
					 * [tHashInput_11 main ] start
					 */

					currentComponent = "tHashInput_11";

					tos_count_tHashInput_11++;

					/**
					 * [tHashInput_11 main ] stop
					 */

					/**
					 * [tHashInput_11 process_data_begin ] start
					 */

					currentComponent = "tHashInput_11";

					/**
					 * [tHashInput_11 process_data_begin ] stop
					 */

					/**
					 * [tMap_9 main ] start
					 */

					currentComponent = "tMap_9";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row25");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_9 = false;
					boolean mainRowRejected_tMap_9 = false;

					///////////////////////////////////////////////
					// Starting Lookup Table "row26"
					///////////////////////////////////////////////

					boolean forceLooprow26 = false;

					row26Struct row26ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_9) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_9 = false;

						row26HashKey.YEAR_NUM = row25.YEAR_NUM;

						row26HashKey.WEEK_OF_YEAR = row25.WEEK_OF_YEAR;

						row26HashKey.BU = row25.BU;

						row26HashKey.hashCodeDirty = true;

						tHash_Lookup_row26.lookup(row26HashKey);

					} // G_TM_M_020

					if (tHash_Lookup_row26 != null && tHash_Lookup_row26.getCount(row26HashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
						// 'row26' and it contains more one result from keys : row26.YEAR_NUM = '" +
						// row26HashKey.YEAR_NUM + "', row26.WEEK_OF_YEAR = '" +
						// row26HashKey.WEEK_OF_YEAR + "', row26.BU = '" + row26HashKey.BU + "'");
					} // G 071

					row26Struct row26 = null;

					row26Struct fromLookup_row26 = null;
					row26 = row26Default;

					if (tHash_Lookup_row26 != null && tHash_Lookup_row26.hasNext()) { // G 099

						fromLookup_row26 = tHash_Lookup_row26.next();

					} // G 099

					if (fromLookup_row26 != null) {
						row26 = fromLookup_row26;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
						// ###############################
						// # Output tables

						out9 = null;

// # Output table : 'out9'
						out9_tmp.YEAR_NUM = row25.YEAR_NUM;
						out9_tmp.MONTH_OF_YEAR = row25.MONTH_OF_YEAR;
						out9_tmp.BU = row25.BU;
						out9_tmp.KPI_ID = row25.KPI_ID;
						out9_tmp.VAL = row25.VAL;
						out9_tmp.FREQUENCY = row25.FREQUENCY;
						out9_tmp.WEEK_OF_YEAR = row25.WEEK_OF_YEAR;
						out9_tmp.KPI_DESC = row25.KPI_DESC;
						out9_tmp.Weight = row25.Weight;
						out9_tmp.JS = row25.JS;
						out9_tmp.Month_Differnece = row25.Month_Differnece;
						out9_tmp.Angle_Of_KPI = row25.Angle_Of_KPI;
						out9_tmp.Achieved = row25.Achieved;
						out9_tmp.Distance = ((row25.Month_Differnece - row26.Min_W) / (row26.Max_W - row26.Min_W) > 1.0
								? 2.0
								: (row25.Month_Differnece - row26.Min_W) / (row26.Max_W - row26.Min_W) < 0.0 ? 0.0
										: (row25.Month_Differnece - row26.Min_W) / (row26.Max_W - row26.Min_W));
						out9 = out9_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_9 = false;

					tos_count_tMap_9++;

					/**
					 * [tMap_9 main ] stop
					 */

					/**
					 * [tMap_9 process_data_begin ] start
					 */

					currentComponent = "tMap_9";

					/**
					 * [tMap_9 process_data_begin ] stop
					 */
// Start of branch "out9"
					if (out9 != null) {

						/**
						 * [tHashOutput_14 main ] start
						 */

						currentComponent = "tHashOutput_14";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "out9");
						}

						out9Struct oneRow_tHashOutput_14 = new out9Struct();

						oneRow_tHashOutput_14.YEAR_NUM = out9.YEAR_NUM;
						oneRow_tHashOutput_14.MONTH_OF_YEAR = out9.MONTH_OF_YEAR;
						oneRow_tHashOutput_14.BU = out9.BU;
						oneRow_tHashOutput_14.KPI_ID = out9.KPI_ID;
						oneRow_tHashOutput_14.VAL = out9.VAL;
						oneRow_tHashOutput_14.FREQUENCY = out9.FREQUENCY;
						oneRow_tHashOutput_14.WEEK_OF_YEAR = out9.WEEK_OF_YEAR;
						oneRow_tHashOutput_14.KPI_DESC = out9.KPI_DESC;
						oneRow_tHashOutput_14.Weight = out9.Weight;
						oneRow_tHashOutput_14.JS = out9.JS;
						oneRow_tHashOutput_14.Month_Differnece = out9.Month_Differnece;
						oneRow_tHashOutput_14.Angle_Of_KPI = out9.Angle_Of_KPI;
						oneRow_tHashOutput_14.Achieved = out9.Achieved;
						oneRow_tHashOutput_14.Distance = out9.Distance;

						tHashFile_tHashOutput_14.put(oneRow_tHashOutput_14);
						nb_line_tHashOutput_14++;

						tos_count_tHashOutput_14++;

						/**
						 * [tHashOutput_14 main ] stop
						 */

						/**
						 * [tHashOutput_14 process_data_begin ] start
						 */

						currentComponent = "tHashOutput_14";

						/**
						 * [tHashOutput_14 process_data_begin ] stop
						 */

						/**
						 * [tHashOutput_14 process_data_end ] start
						 */

						currentComponent = "tHashOutput_14";

						/**
						 * [tHashOutput_14 process_data_end ] stop
						 */

					} // End of branch "out9"

					/**
					 * [tMap_9 process_data_end ] start
					 */

					currentComponent = "tMap_9";

					/**
					 * [tMap_9 process_data_end ] stop
					 */

					/**
					 * [tHashInput_11 process_data_end ] start
					 */

					currentComponent = "tHashInput_11";

					/**
					 * [tHashInput_11 process_data_end ] stop
					 */

					/**
					 * [tHashInput_11 end ] start
					 */

					currentComponent = "tHashInput_11";

					nb_line_tHashInput_11++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_13");

				globalMap.put("tHashInput_11_NB_LINE", nb_line_tHashInput_11);

				ok_Hash.put("tHashInput_11", true);
				end_Hash.put("tHashInput_11", System.currentTimeMillis());

				/**
				 * [tHashInput_11 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row26 != null) {
					tHash_Lookup_row26.endGet();
				}
				globalMap.remove("tHash_Lookup_row26");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row25");
				}

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tHashOutput_14 end ] start
				 */

				currentComponent = "tHashOutput_14";

				globalMap.put("tHashOutput_14_NB_LINE", nb_line_tHashOutput_14);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out9");
				}

				ok_Hash.put("tHashOutput_14", true);
				end_Hash.put("tHashOutput_14", System.currentTimeMillis());

				/**
				 * [tHashOutput_14 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_9"
			globalMap.remove("tHash_Lookup_row26");

			try {

				/**
				 * [tHashInput_11 finally ] start
				 */

				currentComponent = "tHashInput_11";

				/**
				 * [tHashInput_11 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tHashOutput_14 finally ] start
				 */

				currentComponent = "tHashOutput_14";

				/**
				 * [tHashOutput_14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_11_SUBPROCESS_STATE", 1);
	}

	public static class row73Struct implements routines.system.IPersistableComparableLookupRow<row73Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String KPI_id;

		public String getKPI_id() {
			return this.KPI_id;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_name;

		public String getKPI_name() {
			return this.KPI_name;
		}

		public String KPI_WBU_Group_Desc;

		public String getKPI_WBU_Group_Desc() {
			return this.KPI_WBU_Group_Desc;
		}

		public String KPI_WBU_Group_Weight_Threshold;

		public String getKPI_WBU_Group_Weight_Threshold() {
			return this.KPI_WBU_Group_Weight_Threshold;
		}

		public Double Prop_target;

		public Double getProp_target() {
			return this.Prop_target;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public Integer KPI_dierection;

		public Integer getKPI_dierection() {
			return this.KPI_dierection;
		}

		public String Year;

		public String getYear() {
			return this.Year;
		}

		public String Month;

		public String getMonth() {
			return this.Month;
		}

		public Double Apa;

		public Double getApa() {
			return this.Apa;
		}

		public Double Amb_target;

		public Double getAmb_target() {
			return this.Amb_target;
		}

		public String Category_change;

		public String getCategory_change() {
			return this.Category_change;
		}

		public String Target_Type;

		public String getTarget_Type() {
			return this.Target_Type;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public Double baseline;

		public Double getBaseline() {
			return this.baseline;
		}

		public String unit;

		public String getUnit() {
			return this.unit;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.KPI_id == null) ? 0 : this.KPI_id.hashCode());

				result = prime * result + ((this.Year == null) ? 0 : this.Year.hashCode());

				result = prime * result + ((this.Month == null) ? 0 : this.Month.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row73Struct other = (row73Struct) obj;

			if (this.KPI_id == null) {
				if (other.KPI_id != null)
					return false;

			} else if (!this.KPI_id.equals(other.KPI_id))

				return false;

			if (this.Year == null) {
				if (other.Year != null)
					return false;

			} else if (!this.Year.equals(other.Year))

				return false;

			if (this.Month == null) {
				if (other.Month != null)
					return false;

			} else if (!this.Month.equals(other.Month))

				return false;

			return true;
		}

		public void copyDataTo(row73Struct other) {

			other.KPI_id = this.KPI_id;
			other.Is_weekly = this.Is_weekly;
			other.BU = this.BU;
			other.KPI_name = this.KPI_name;
			other.KPI_WBU_Group_Desc = this.KPI_WBU_Group_Desc;
			other.KPI_WBU_Group_Weight_Threshold = this.KPI_WBU_Group_Weight_Threshold;
			other.Prop_target = this.Prop_target;
			other.weight = this.weight;
			other.JS = this.JS;
			other.S_JS = this.S_JS;
			other.KPI_dierection = this.KPI_dierection;
			other.Year = this.Year;
			other.Month = this.Month;
			other.Apa = this.Apa;
			other.Amb_target = this.Amb_target;
			other.Category_change = this.Category_change;
			other.Target_Type = this.Target_Type;
			other.SUB_BU = this.SUB_BU;
			other.baseline = this.baseline;
			other.unit = this.unit;

		}

		public void copyKeysDataTo(row73Struct other) {

			other.KPI_id = this.KPI_id;
			other.Year = this.Year;
			other.Month = this.Month;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.KPI_id = readString(dis);

					this.Year = readString(dis);

					this.Month = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.KPI_id, dos);

				// String

				writeString(this.Year, dos);

				// String

				writeString(this.Month, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Is_weekly = readString(dis, ois);

				this.BU = readString(dis, ois);

				this.KPI_name = readString(dis, ois);

				this.KPI_WBU_Group_Desc = readString(dis, ois);

				this.KPI_WBU_Group_Weight_Threshold = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Prop_target = null;
				} else {
					this.Prop_target = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.weight = null;
				} else {
					this.weight = dis.readDouble();
				}

				this.JS = readString(dis, ois);

				this.S_JS = readString(dis, ois);

				this.KPI_dierection = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Apa = null;
				} else {
					this.Apa = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Amb_target = null;
				} else {
					this.Amb_target = dis.readDouble();
				}

				this.Category_change = readString(dis, ois);

				this.Target_Type = readString(dis, ois);

				this.SUB_BU = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.baseline = null;
				} else {
					this.baseline = dis.readDouble();
				}

				this.unit = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Is_weekly, dos, oos);

				writeString(this.BU, dos, oos);

				writeString(this.KPI_name, dos, oos);

				writeString(this.KPI_WBU_Group_Desc, dos, oos);

				writeString(this.KPI_WBU_Group_Weight_Threshold, dos, oos);

				if (this.Prop_target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Prop_target);
				}

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				writeString(this.JS, dos, oos);

				writeString(this.S_JS, dos, oos);

				writeInteger(this.KPI_dierection, dos, oos);

				if (this.Apa == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Apa);
				}

				if (this.Amb_target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Amb_target);
				}

				writeString(this.Category_change, dos, oos);

				writeString(this.Target_Type, dos, oos);

				writeString(this.SUB_BU, dos, oos);

				if (this.baseline == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.baseline);
				}

				writeString(this.unit, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("KPI_id=" + KPI_id);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_name=" + KPI_name);
			sb.append(",KPI_WBU_Group_Desc=" + KPI_WBU_Group_Desc);
			sb.append(",KPI_WBU_Group_Weight_Threshold=" + KPI_WBU_Group_Weight_Threshold);
			sb.append(",Prop_target=" + String.valueOf(Prop_target));
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",KPI_dierection=" + String.valueOf(KPI_dierection));
			sb.append(",Year=" + Year);
			sb.append(",Month=" + Month);
			sb.append(",Apa=" + String.valueOf(Apa));
			sb.append(",Amb_target=" + String.valueOf(Amb_target));
			sb.append(",Category_change=" + Category_change);
			sb.append(",Target_Type=" + Target_Type);
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",baseline=" + String.valueOf(baseline));
			sb.append(",unit=" + unit);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row73Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KPI_id, other.KPI_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Year, other.Year);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Month, other.Month);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row73Struct row73 = new row73Struct();

				/**
				 * [tAdvancedHash_row73 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row73", false);
				start_Hash.put("tAdvancedHash_row73", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row73";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row73");
				}

				int tos_count_tAdvancedHash_row73 = 0;

				// connection name:row73
				// source node:tFileInputExcel_3 - inputs:(after_tHashInput_27)
				// outputs:(row73,row73) | target node:tAdvancedHash_row73 - inputs:(row73)
				// outputs:()
				// linked node: tMap_21 - inputs:(row72,row73) outputs:(out5)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row73 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row73Struct> tHash_Lookup_row73 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row73Struct>getLookup(matchingModeEnum_row73);

				globalMap.put("tHash_Lookup_row73", tHash_Lookup_row73);

				/**
				 * [tAdvancedHash_row73 begin ] stop
				 */

				/**
				 * [tFileInputExcel_3 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_3", false);
				start_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_3";

				int tos_count_tFileInputExcel_3 = 0;

				final String decryptedPassword_tFileInputExcel_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:ezZg/V0kL13332gavR7bVExwSHg9jzgPxovACA==");
				String password_tFileInputExcel_3 = decryptedPassword_tFileInputExcel_3;
				if (password_tFileInputExcel_3.isEmpty()) {
					password_tFileInputExcel_3 = null;
				}
				class RegexUtil_tFileInputExcel_3 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_3 regexUtil_tFileInputExcel_3 = new RegexUtil_tFileInputExcel_3();

				Object source_tFileInputExcel_3 = context.ceo_path + "lookup/FixedData.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_3 = null;

				if (source_tFileInputExcel_3 instanceof String) {
					workbook_tFileInputExcel_3 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_3), password_tFileInputExcel_3);
				} else if (source_tFileInputExcel_3 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_3 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_3, password_tFileInputExcel_3);
				} else {
					workbook_tFileInputExcel_3 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_3
							.addAll(regexUtil_tFileInputExcel_3.getSheets(workbook_tFileInputExcel_3, "Sheet7", false));
					if (sheetList_tFileInputExcel_3.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
						if (sheet_FilterNull_tFileInputExcel_3 != null
								&& sheetList_FilterNull_tFileInputExcel_3.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_3.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_3.add(sheet_FilterNull_tFileInputExcel_3);
						}
					}
					sheetList_tFileInputExcel_3 = sheetList_FilterNull_tFileInputExcel_3;
					if (sheetList_tFileInputExcel_3.size() > 0) {
						int nb_line_tFileInputExcel_3 = 0;

						int begin_line_tFileInputExcel_3 = 1;

						int footer_input_tFileInputExcel_3 = 0;

						int end_line_tFileInputExcel_3 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
							end_line_tFileInputExcel_3 += (sheet_tFileInputExcel_3.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_3 -= footer_input_tFileInputExcel_3;
						int limit_tFileInputExcel_3 = -1;
						int start_column_tFileInputExcel_3 = 1 - 1;
						int end_column_tFileInputExcel_3 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_3 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3
								.get(0);
						int rowCount_tFileInputExcel_3 = 0;
						int sheetIndex_tFileInputExcel_3 = 0;
						int currentRows_tFileInputExcel_3 = (sheetList_tFileInputExcel_3.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_3 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_3 = df_tFileInputExcel_3.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_3 = begin_line_tFileInputExcel_3; i_tFileInputExcel_3 < end_line_tFileInputExcel_3; i_tFileInputExcel_3++) {

							int emptyColumnCount_tFileInputExcel_3 = 0;

							if (limit_tFileInputExcel_3 != -1 && nb_line_tFileInputExcel_3 >= limit_tFileInputExcel_3) {
								break;
							}

							while (i_tFileInputExcel_3 >= rowCount_tFileInputExcel_3 + currentRows_tFileInputExcel_3) {
								rowCount_tFileInputExcel_3 += currentRows_tFileInputExcel_3;
								sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3
										.get(++sheetIndex_tFileInputExcel_3);
								currentRows_tFileInputExcel_3 = (sheet_tFileInputExcel_3.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_3_CURRENT_SHEET", sheet_tFileInputExcel_3.getSheetName());
							if (rowCount_tFileInputExcel_3 <= i_tFileInputExcel_3) {
								row_tFileInputExcel_3 = sheet_tFileInputExcel_3
										.getRow(i_tFileInputExcel_3 - rowCount_tFileInputExcel_3);
							}
							row73 = null;
							row73 = null;
							int tempRowLength_tFileInputExcel_3 = 20;

							int columnIndex_tFileInputExcel_3 = 0;

							String[] temp_row_tFileInputExcel_3 = new String[tempRowLength_tFileInputExcel_3];
							int excel_end_column_tFileInputExcel_3;
							if (row_tFileInputExcel_3 == null) {
								excel_end_column_tFileInputExcel_3 = 0;
							} else {
								excel_end_column_tFileInputExcel_3 = row_tFileInputExcel_3.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_3;
							if (end_column_tFileInputExcel_3 == -1) {
								actual_end_column_tFileInputExcel_3 = excel_end_column_tFileInputExcel_3;
							} else {
								actual_end_column_tFileInputExcel_3 = end_column_tFileInputExcel_3 > excel_end_column_tFileInputExcel_3
										? excel_end_column_tFileInputExcel_3
										: end_column_tFileInputExcel_3;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_3 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_3; i++) {
								if (i + start_column_tFileInputExcel_3 < actual_end_column_tFileInputExcel_3) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_3 = row_tFileInputExcel_3
											.getCell(i + start_column_tFileInputExcel_3);
									if (cell_tFileInputExcel_3 != null) {
										switch (cell_tFileInputExcel_3.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_3)) {
												temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_3[i] = df_tFileInputExcel_3
														.format(cell_tFileInputExcel_3.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_3[i] = String
													.valueOf(cell_tFileInputExcel_3.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_3.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_3)) {
													temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_3 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_3.getNumericCellValue());
													temp_row_tFileInputExcel_3[i] = ne_tFileInputExcel_3
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_3[i] = String
														.valueOf(cell_tFileInputExcel_3.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_3[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_3[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_3[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_3[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_3 = false;
							row73 = new row73Struct();
							int curColNum_tFileInputExcel_3 = -1;
							String curColName_tFileInputExcel_3 = "";
							try {
								columnIndex_tFileInputExcel_3 = 0;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "KPI_id";

									row73.KPI_id = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row73.KPI_id = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 1;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "Is_weekly";

									row73.Is_weekly = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row73.Is_weekly = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 2;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "BU";

									row73.BU = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row73.BU = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 3;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "KPI_name";

									row73.KPI_name = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row73.KPI_name = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 4;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "KPI_WBU_Group_Desc";

									row73.KPI_WBU_Group_Desc = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row73.KPI_WBU_Group_Desc = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 5;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "KPI_WBU_Group_Weight_Threshold";

									row73.KPI_WBU_Group_Weight_Threshold = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row73.KPI_WBU_Group_Weight_Threshold = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 6;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "Prop_target";

									row73.Prop_target = ParserUtils.parseTo_Double(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3], null,
											'.' == decimalChar_tFileInputExcel_3 ? null
													: decimalChar_tFileInputExcel_3));
								} else {
									row73.Prop_target = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 7;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "weight";

									row73.weight = ParserUtils.parseTo_Double(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3], null,
											'.' == decimalChar_tFileInputExcel_3 ? null
													: decimalChar_tFileInputExcel_3));
								} else {
									row73.weight = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 8;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "JS";

									row73.JS = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row73.JS = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 9;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "S_JS";

									row73.S_JS = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row73.S_JS = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 10;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "KPI_dierection";

									row73.KPI_dierection = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3], null,
											'.' == decimalChar_tFileInputExcel_3 ? null
													: decimalChar_tFileInputExcel_3));
								} else {
									row73.KPI_dierection = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 11;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "Year";

									row73.Year = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row73.Year = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 12;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "Month";

									row73.Month = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row73.Month = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 13;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "Apa";

									row73.Apa = ParserUtils.parseTo_Double(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3], null,
											'.' == decimalChar_tFileInputExcel_3 ? null
													: decimalChar_tFileInputExcel_3));
								} else {
									row73.Apa = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 14;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "Amb_target";

									row73.Amb_target = ParserUtils.parseTo_Double(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3], null,
											'.' == decimalChar_tFileInputExcel_3 ? null
													: decimalChar_tFileInputExcel_3));
								} else {
									row73.Amb_target = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 15;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "Category_change";

									row73.Category_change = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row73.Category_change = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 16;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "Target_Type";

									row73.Target_Type = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row73.Target_Type = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 17;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "SUB_BU";

									row73.SUB_BU = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row73.SUB_BU = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 18;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "baseline";

									row73.baseline = ParserUtils.parseTo_Double(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3], null,
											'.' == decimalChar_tFileInputExcel_3 ? null
													: decimalChar_tFileInputExcel_3));
								} else {
									row73.baseline = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 19;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "unit";

									row73.unit = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row73.unit = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								nb_line_tFileInputExcel_3++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_3 = true;
								System.err.println(e.getMessage());
								row73 = null;
							}

							/**
							 * [tFileInputExcel_3 begin ] stop
							 */

							/**
							 * [tFileInputExcel_3 main ] start
							 */

							currentComponent = "tFileInputExcel_3";

							tos_count_tFileInputExcel_3++;

							/**
							 * [tFileInputExcel_3 main ] stop
							 */

							/**
							 * [tFileInputExcel_3 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_3";

							/**
							 * [tFileInputExcel_3 process_data_begin ] stop
							 */
// Start of branch "row73"
							if (row73 != null) {

								/**
								 * [tAdvancedHash_row73 main ] start
								 */

								currentComponent = "tAdvancedHash_row73";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row73");
								}

								row73Struct row73_HashRow = new row73Struct();

								row73_HashRow.KPI_id = row73.KPI_id;

								row73_HashRow.Is_weekly = row73.Is_weekly;

								row73_HashRow.BU = row73.BU;

								row73_HashRow.KPI_name = row73.KPI_name;

								row73_HashRow.KPI_WBU_Group_Desc = row73.KPI_WBU_Group_Desc;

								row73_HashRow.KPI_WBU_Group_Weight_Threshold = row73.KPI_WBU_Group_Weight_Threshold;

								row73_HashRow.Prop_target = row73.Prop_target;

								row73_HashRow.weight = row73.weight;

								row73_HashRow.JS = row73.JS;

								row73_HashRow.S_JS = row73.S_JS;

								row73_HashRow.KPI_dierection = row73.KPI_dierection;

								row73_HashRow.Year = row73.Year;

								row73_HashRow.Month = row73.Month;

								row73_HashRow.Apa = row73.Apa;

								row73_HashRow.Amb_target = row73.Amb_target;

								row73_HashRow.Category_change = row73.Category_change;

								row73_HashRow.Target_Type = row73.Target_Type;

								row73_HashRow.SUB_BU = row73.SUB_BU;

								row73_HashRow.baseline = row73.baseline;

								row73_HashRow.unit = row73.unit;

								tHash_Lookup_row73.put(row73_HashRow);

								tos_count_tAdvancedHash_row73++;

								/**
								 * [tAdvancedHash_row73 main ] stop
								 */

								/**
								 * [tAdvancedHash_row73 process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_row73";

								/**
								 * [tAdvancedHash_row73 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row73 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row73";

								/**
								 * [tAdvancedHash_row73 process_data_end ] stop
								 */

							} // End of branch "row73"

							/**
							 * [tFileInputExcel_3 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_3";

							/**
							 * [tFileInputExcel_3 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_3 end ] start
							 */

							currentComponent = "tFileInputExcel_3";

						}

						globalMap.put("tFileInputExcel_3_NB_LINE", nb_line_tFileInputExcel_3);

					}

				} finally {

					if (!(source_tFileInputExcel_3 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_3.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_3", true);
				end_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row73 end ] start
				 */

				currentComponent = "tAdvancedHash_row73";

				tHash_Lookup_row73.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row73");
				}

				ok_Hash.put("tAdvancedHash_row73", true);
				end_Hash.put("tAdvancedHash_row73", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row73 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_3 finally ] start
				 */

				currentComponent = "tFileInputExcel_3";

				/**
				 * [tFileInputExcel_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row73 finally ] start
				 */

				currentComponent = "tAdvancedHash_row73";

				/**
				 * [tAdvancedHash_row73 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 1);
	}

	public static class row103Struct implements routines.system.IPersistableRow<row103Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String ceo_path;

		public String getCeo_path() {
			return this.ceo_path;
		}

		public Integer month_from;

		public Integer getMonth_from() {
			return this.month_from;
		}

		public Integer month_to;

		public Integer getMonth_to() {
			return this.month_to;
		}

		public Integer year;

		public Integer getYear() {
			return this.year;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.ceo_path = readString(dis);

					this.month_from = readInteger(dis);

					this.month_to = readInteger(dis);

					this.year = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ceo_path, dos);

				// Integer

				writeInteger(this.month_from, dos);

				// Integer

				writeInteger(this.month_to, dos);

				// Integer

				writeInteger(this.year, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ceo_path=" + ceo_path);
			sb.append(",month_from=" + String.valueOf(month_from));
			sb.append(",month_to=" + String.valueOf(month_to));
			sb.append(",year=" + String.valueOf(year));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row103Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row103Struct row103 = new row103Struct();

				/**
				 * [tJavaRow_6 begin ] start
				 */

				ok_Hash.put("tJavaRow_6", false);
				start_Hash.put("tJavaRow_6", System.currentTimeMillis());

				currentComponent = "tJavaRow_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row103");
				}

				int tos_count_tJavaRow_6 = 0;

				int nb_line_tJavaRow_6 = 0;

				/**
				 * [tJavaRow_6 begin ] stop
				 */

				/**
				 * [tFileInputXML_1 begin ] start
				 */

				ok_Hash.put("tFileInputXML_1", false);
				start_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				currentComponent = "tFileInputXML_1";

				int tos_count_tFileInputXML_1 = 0;

				int nb_line_tFileInputXML_1 = 0;

				String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
				boolean isWindows_tFileInputXML_1 = false;
				if (os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1) {
					isWindows_tFileInputXML_1 = true;
				}
				class NameSpaceTool_tFileInputXML_1 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put("pre" + defualtNSPath.size(), ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
										path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
							countNSMap(e);
						}
					}

					private final org.talend.xpath.XPathUtil util = new org.talend.xpath.XPathUtil();

					{
						util.setDefaultNSPath(defualtNSPath);
					}

					public String addDefaultNSPrefix(String path) {
						return util.addDefaultNSPrefix(path);
					}

					public String addDefaultNSPrefix(String relativeXpression, String basePath) {
						return util.addDefaultNSPrefix(relativeXpression, basePath);
					}

				}

				class XML_API_tFileInputXML_1 {
					public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node).attribute("nil");
							if (attri != null && ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
				Object filename_tFileInputXML_1 = null;
				try {
					filename_tFileInputXML_1 = "C:/Users/abdel/Desktop/CEO/ceo_config.xml";
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String
						&& filename_tFileInputXML_1.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_1) {
						filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_1 = true;
				org.dom4j.Document doc_tFileInputXML_1 = null;
				java.io.Closeable toClose_tFileInputXML_1 = null;
				try {
					if (filename_tFileInputXML_1 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream) filename_tFileInputXML_1;
						toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
						doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(
								new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)), "ISO-8859-15");
						toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
						org.xml.sax.InputSource in_tFileInputXML_1 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_1);
						doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
					}
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_1 = false;
				} finally {
					if (toClose_tFileInputXML_1 != null) {
						toClose_tFileInputXML_1.close();
					}
				}
				if (isValidFile_tFileInputXML_1) {
					NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
					nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1
							.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/ceo_contexts"));
					x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);

					java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) x_tFileInputXML_1
							.selectNodes(doc_tFileInputXML_1);
					XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
					String str_tFileInputXML_1 = "";
					org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
					java.util.Map<Integer, org.dom4j.XPath> xpaths_tFileInputXML_1 = new java.util.HashMap<Integer, org.dom4j.XPath>();
					class XPathUtil_tFileInputXML_1 {

						public void initXPaths_0(java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_1 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("./ceo_path", "/ceo_contexts"));
							xpath_0.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(0, xpath_0);

							org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("./month_from", "/ceo_contexts"));
							xpath_1.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(1, xpath_1);

							org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("./month_to", "/ceo_contexts"));
							xpath_2.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(2, xpath_2);

							org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("./year", "/ceo_contexts"));
							xpath_3.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(3, xpath_3);

						}

						public void initXPaths(java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_1 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							initXPaths_0(xpaths, nsTool, xmlNameSpaceMap);

						}
					}
					XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
					xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1,
							xmlNameSpaceMap_tFileInputXML_1);
					for (org.dom4j.Node temp_tFileInputXML_1 : nodeList_tFileInputXML_1) {
						nb_line_tFileInputXML_1++;

						row103 = null;
						boolean whetherReject_tFileInputXML_1 = false;
						row103 = new row103Struct();
						try {
							Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
							if (obj0_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj0_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
										org.jaxen.dom4j.DocumentNavigator.getInstance());
							} else if (obj0_tFileInputXML_1 instanceof String
									|| obj0_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
							} else if (obj0_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1.size() > 0 ? nodes_tFileInputXML_1.get(0)
										: null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator.getInstance());
							}
							if (xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)) {
								row103.ceo_path = null;
							} else if (xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)) {
								row103.ceo_path = "";
							} else if (xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1)) {
								row103.ceo_path = null;
							} else {
								row103.ceo_path = str_tFileInputXML_1;
							}
							Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
							if (obj1_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj1_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
										org.jaxen.dom4j.DocumentNavigator.getInstance());
							} else if (obj1_tFileInputXML_1 instanceof String
									|| obj1_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
							} else if (obj1_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1.size() > 0 ? nodes_tFileInputXML_1.get(0)
										: null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator.getInstance());
							}
							if (xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)) {
								row103.month_from = null;
							} else if (xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)
									|| xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1)) {
								row103.month_from = null;
							} else {
								row103.month_from = ParserUtils.parseTo_Integer(str_tFileInputXML_1);
							}
							Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
							if (obj2_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj2_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
										org.jaxen.dom4j.DocumentNavigator.getInstance());
							} else if (obj2_tFileInputXML_1 instanceof String
									|| obj2_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
							} else if (obj2_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1.size() > 0 ? nodes_tFileInputXML_1.get(0)
										: null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator.getInstance());
							}
							if (xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)) {
								row103.month_to = null;
							} else if (xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)
									|| xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1)) {
								row103.month_to = null;
							} else {
								row103.month_to = ParserUtils.parseTo_Integer(str_tFileInputXML_1);
							}
							Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
							if (obj3_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj3_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
										org.jaxen.dom4j.DocumentNavigator.getInstance());
							} else if (obj3_tFileInputXML_1 instanceof String
									|| obj3_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
							} else if (obj3_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1.size() > 0 ? nodes_tFileInputXML_1.get(0)
										: null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator.getInstance());
							}
							if (xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)) {
								row103.year = null;
							} else if (xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)
									|| xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1)) {
								row103.year = null;
							} else {
								row103.year = ParserUtils.parseTo_Integer(str_tFileInputXML_1);
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_1 = true;
							System.err.println(e.getMessage());
							row103 = null;
						}

						/**
						 * [tFileInputXML_1 begin ] stop
						 */

						/**
						 * [tFileInputXML_1 main ] start
						 */

						currentComponent = "tFileInputXML_1";

						tos_count_tFileInputXML_1++;

						/**
						 * [tFileInputXML_1 main ] stop
						 */

						/**
						 * [tFileInputXML_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputXML_1";

						/**
						 * [tFileInputXML_1 process_data_begin ] stop
						 */
// Start of branch "row103"
						if (row103 != null) {

							/**
							 * [tJavaRow_6 main ] start
							 */

							currentComponent = "tJavaRow_6";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row103");
							}

							// Code generated according to input schema and output schema

							System.out.println(row103.ceo_path);
							context.ceo_path = row103.ceo_path;

//int year_int = row103.year ;
//String year = Integer.toString(year_int) ;
//context.year = year ; 
							context.year = Integer.toString(row103.year);

							context.month_from_input = Integer.toString(row103.month_from - 1);
							context.month_from_extract = Integer.toString(row103.month_from);
							context.month_to = Integer.toString(row103.month_to);

							nb_line_tJavaRow_6++;

							tos_count_tJavaRow_6++;

							/**
							 * [tJavaRow_6 main ] stop
							 */

							/**
							 * [tJavaRow_6 process_data_begin ] start
							 */

							currentComponent = "tJavaRow_6";

							/**
							 * [tJavaRow_6 process_data_begin ] stop
							 */

							/**
							 * [tJavaRow_6 process_data_end ] start
							 */

							currentComponent = "tJavaRow_6";

							/**
							 * [tJavaRow_6 process_data_end ] stop
							 */

						} // End of branch "row103"

						/**
						 * [tFileInputXML_1 process_data_end ] start
						 */

						currentComponent = "tFileInputXML_1";

						/**
						 * [tFileInputXML_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputXML_1 end ] start
						 */

						currentComponent = "tFileInputXML_1";

					}
				}
				globalMap.put("tFileInputXML_1_NB_LINE", nb_line_tFileInputXML_1);

				ok_Hash.put("tFileInputXML_1", true);
				end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				/**
				 * [tFileInputXML_1 end ] stop
				 */

				/**
				 * [tJavaRow_6 end ] start
				 */

				currentComponent = "tJavaRow_6";

				globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row103");
				}

				ok_Hash.put("tJavaRow_6", true);
				end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				/**
				 * [tJavaRow_6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputXML_1 finally ] start
				 */

				currentComponent = "tFileInputXML_1";

				/**
				 * [tFileInputXML_1 finally ] stop
				 */

				/**
				 * [tJavaRow_6 finally ] start
				 */

				currentComponent = "tJavaRow_6";

				/**
				 * [tJavaRow_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM_1;

		public String getYEAR_NUM_1() {
			return this.YEAR_NUM_1;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Max_W;

		public Double getMax_W() {
			return this.Max_W;
		}

		public Double Min_W;

		public Double getMin_W() {
			return this.Min_W;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM_1 = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Max_W = null;
					} else {
						this.Max_W = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Min_W = null;
					} else {
						this.Min_W = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM_1, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Max_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Max_W);
				}

				// Double

				if (this.Min_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Min_W);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM_1=" + YEAR_NUM_1);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",JS=" + JS);
			sb.append(",Max_W=" + String.valueOf(Max_W));
			sb.append(",Min_W=" + String.valueOf(Min_W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tHashOutput_3 begin ] start
				 */

				ok_Hash.put("tHashOutput_3", false);
				start_Hash.put("tHashOutput_3", System.currentTimeMillis());

				currentComponent = "tHashOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tHashOutput_3 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct> tHashFile_tHashOutput_3 = null;
				String hashKey_tHashOutput_3 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_3";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_3)) {
					if (mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null) {
						mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
					} else {
						tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
					}
				}
				int nb_line_tHashOutput_3 = 0;

				/**
				 * [tHashOutput_3 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 0; i_tFixedFlowInput_1++) {

					row14.YEAR_NUM_1 = null;

					row14.WEEK_OF_YEAR = null;

					row14.BU = null;

					row14.weight = null;

					row14.JS = null;

					row14.Max_W = null;

					row14.Min_W = null;

					/**
					 * [tFixedFlowInput_1 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_1 main ] start
					 */

					currentComponent = "tFixedFlowInput_1";

					tos_count_tFixedFlowInput_1++;

					/**
					 * [tFixedFlowInput_1 main ] stop
					 */

					/**
					 * [tFixedFlowInput_1 process_data_begin ] start
					 */

					currentComponent = "tFixedFlowInput_1";

					/**
					 * [tFixedFlowInput_1 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_3 main ] start
					 */

					currentComponent = "tHashOutput_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row14");
					}

					row14Struct oneRow_tHashOutput_3 = new row14Struct();

					oneRow_tHashOutput_3.YEAR_NUM_1 = row14.YEAR_NUM_1;
					oneRow_tHashOutput_3.WEEK_OF_YEAR = row14.WEEK_OF_YEAR;
					oneRow_tHashOutput_3.BU = row14.BU;
					oneRow_tHashOutput_3.weight = row14.weight;
					oneRow_tHashOutput_3.JS = row14.JS;
					oneRow_tHashOutput_3.Max_W = row14.Max_W;
					oneRow_tHashOutput_3.Min_W = row14.Min_W;

					tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
					nb_line_tHashOutput_3++;

					tos_count_tHashOutput_3++;

					/**
					 * [tHashOutput_3 main ] stop
					 */

					/**
					 * [tHashOutput_3 process_data_begin ] start
					 */

					currentComponent = "tHashOutput_3";

					/**
					 * [tHashOutput_3 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_3 process_data_end ] start
					 */

					currentComponent = "tHashOutput_3";

					/**
					 * [tHashOutput_3 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_1 process_data_end ] start
					 */

					currentComponent = "tFixedFlowInput_1";

					/**
					 * [tFixedFlowInput_1 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_1 end ] start
					 */

					currentComponent = "tFixedFlowInput_1";

				}
				globalMap.put("tFixedFlowInput_1_NB_LINE", 0);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tHashOutput_3 end ] start
				 */

				currentComponent = "tHashOutput_3";

				globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tHashOutput_3", true);
				end_Hash.put("tHashOutput_3", System.currentTimeMillis());

				/**
				 * [tHashOutput_3 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tFileInputExcel_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tHashOutput_3 finally ] start
				 */

				currentComponent = "tHashOutput_3";

				/**
				 * [tHashOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Max_W;

		public Double getMax_W() {
			return this.Max_W;
		}

		public Double Min_W;

		public Double getMin_W() {
			return this.Min_W;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Max_W = null;
					} else {
						this.Max_W = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Min_W = null;
					} else {
						this.Min_W = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Max_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Max_W);
				}

				// Double

				if (this.Min_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Min_W);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Max_W=" + String.valueOf(Max_W));
			sb.append(",Min_W=" + String.valueOf(Min_W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();

				/**
				 * [tHashOutput_7 begin ] start
				 */

				ok_Hash.put("tHashOutput_7", false);
				start_Hash.put("tHashOutput_7", System.currentTimeMillis());

				currentComponent = "tHashOutput_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17");
				}

				int tos_count_tHashOutput_7 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_7 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct> tHashFile_tHashOutput_7 = null;
				String hashKey_tHashOutput_7 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_7";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_7)) {
					if (mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7) == null) {
						mf_tHashOutput_7.getResourceMap().put(hashKey_tHashOutput_7,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
					} else {
						tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
					}
				}
				int nb_line_tHashOutput_7 = 0;

				/**
				 * [tHashOutput_7 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_2 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_2", false);
				start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_2";

				int tos_count_tFixedFlowInput_2 = 0;

				for (int i_tFixedFlowInput_2 = 0; i_tFixedFlowInput_2 < 0; i_tFixedFlowInput_2++) {

					row17.YEAR_NUM = null;

					row17.WEEK_OF_YEAR = null;

					row17.BU = null;

					row17.Max_W = null;

					row17.Min_W = null;

					/**
					 * [tFixedFlowInput_2 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_2 main ] start
					 */

					currentComponent = "tFixedFlowInput_2";

					tos_count_tFixedFlowInput_2++;

					/**
					 * [tFixedFlowInput_2 main ] stop
					 */

					/**
					 * [tFixedFlowInput_2 process_data_begin ] start
					 */

					currentComponent = "tFixedFlowInput_2";

					/**
					 * [tFixedFlowInput_2 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_7 main ] start
					 */

					currentComponent = "tHashOutput_7";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row17");
					}

					row17Struct oneRow_tHashOutput_7 = new row17Struct();

					oneRow_tHashOutput_7.YEAR_NUM = row17.YEAR_NUM;
					oneRow_tHashOutput_7.WEEK_OF_YEAR = row17.WEEK_OF_YEAR;
					oneRow_tHashOutput_7.BU = row17.BU;
					oneRow_tHashOutput_7.Max_W = row17.Max_W;
					oneRow_tHashOutput_7.Min_W = row17.Min_W;

					tHashFile_tHashOutput_7.put(oneRow_tHashOutput_7);
					nb_line_tHashOutput_7++;

					tos_count_tHashOutput_7++;

					/**
					 * [tHashOutput_7 main ] stop
					 */

					/**
					 * [tHashOutput_7 process_data_begin ] start
					 */

					currentComponent = "tHashOutput_7";

					/**
					 * [tHashOutput_7 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_7 process_data_end ] start
					 */

					currentComponent = "tHashOutput_7";

					/**
					 * [tHashOutput_7 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_2 process_data_end ] start
					 */

					currentComponent = "tFixedFlowInput_2";

					/**
					 * [tFixedFlowInput_2 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_2 end ] start
					 */

					currentComponent = "tFixedFlowInput_2";

				}
				globalMap.put("tFixedFlowInput_2_NB_LINE", 0);

				ok_Hash.put("tFixedFlowInput_2", true);
				end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_2 end ] stop
				 */

				/**
				 * [tHashOutput_7 end ] start
				 */

				currentComponent = "tHashOutput_7";

				globalMap.put("tHashOutput_7_NB_LINE", nb_line_tHashOutput_7);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17");
				}

				ok_Hash.put("tHashOutput_7", true);
				end_Hash.put("tHashOutput_7", System.currentTimeMillis());

				/**
				 * [tHashOutput_7 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tFixedFlowInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_2 finally ] start
				 */

				currentComponent = "tFixedFlowInput_2";

				/**
				 * [tFixedFlowInput_2 finally ] stop
				 */

				/**
				 * [tHashOutput_7 finally ] start
				 */

				currentComponent = "tHashOutput_7";

				/**
				 * [tHashOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row26Struct implements routines.system.IPersistableComparableLookupRow<row26Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Max_W;

		public Double getMax_W() {
			return this.Max_W;
		}

		public Double Min_W;

		public Double getMin_W() {
			return this.Min_W;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

				result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

				result = prime * result + ((this.BU == null) ? 0 : this.BU.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row26Struct other = (row26Struct) obj;

			if (this.YEAR_NUM == null) {
				if (other.YEAR_NUM != null)
					return false;

			} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))

				return false;

			if (this.WEEK_OF_YEAR == null) {
				if (other.WEEK_OF_YEAR != null)
					return false;

			} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))

				return false;

			if (this.BU == null) {
				if (other.BU != null)
					return false;

			} else if (!this.BU.equals(other.BU))

				return false;

			return true;
		}

		public void copyDataTo(row26Struct other) {

			other.YEAR_NUM = this.YEAR_NUM;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.BU = this.BU;
			other.Max_W = this.Max_W;
			other.Min_W = this.Min_W;

		}

		public void copyKeysDataTo(row26Struct other) {

			other.YEAR_NUM = this.YEAR_NUM;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.BU = this.BU;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.Max_W = null;
				} else {
					this.Max_W = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Min_W = null;
				} else {
					this.Min_W = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.Max_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Max_W);
				}

				if (this.Min_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Min_W);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Max_W=" + String.valueOf(Max_W));
			sb.append(",Min_W=" + String.valueOf(Min_W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.YEAR_NUM, other.YEAR_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.WEEK_OF_YEAR, other.WEEK_OF_YEAR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.BU, other.BU);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row26Struct row26 = new row26Struct();

				/**
				 * [tAdvancedHash_row26 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row26", false);
				start_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row26";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row26");
				}

				int tos_count_tAdvancedHash_row26 = 0;

				// connection name:row26
				// source node:tHashInput_12 - inputs:(after_tHashInput_11)
				// outputs:(row26,row26) | target node:tAdvancedHash_row26 - inputs:(row26)
				// outputs:()
				// linked node: tMap_9 - inputs:(row25,row26) outputs:(out9)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row26 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row26Struct>getLookup(matchingModeEnum_row26);

				globalMap.put("tHash_Lookup_row26", tHash_Lookup_row26);

				/**
				 * [tAdvancedHash_row26 begin ] stop
				 */

				/**
				 * [tHashInput_12 begin ] start
				 */

				ok_Hash.put("tHashInput_12", false);
				start_Hash.put("tHashInput_12", System.currentTimeMillis());

				currentComponent = "tHashInput_12";

				int tos_count_tHashInput_12 = 0;

				int nb_line_tHashInput_12 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_12 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct> tHashFile_tHashInput_12 = mf_tHashInput_12
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_7");
				if (tHashFile_tHashInput_12 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row17Struct> iterator_tHashInput_12 = tHashFile_tHashInput_12.iterator();
				while (iterator_tHashInput_12.hasNext()) {
					row17Struct next_tHashInput_12 = iterator_tHashInput_12.next();

					row26.YEAR_NUM = next_tHashInput_12.YEAR_NUM;
					row26.WEEK_OF_YEAR = next_tHashInput_12.WEEK_OF_YEAR;
					row26.BU = next_tHashInput_12.BU;
					row26.Max_W = next_tHashInput_12.Max_W;
					row26.Min_W = next_tHashInput_12.Min_W;

					/**
					 * [tHashInput_12 begin ] stop
					 */

					/**
					 * [tHashInput_12 main ] start
					 */

					currentComponent = "tHashInput_12";

					tos_count_tHashInput_12++;

					/**
					 * [tHashInput_12 main ] stop
					 */

					/**
					 * [tHashInput_12 process_data_begin ] start
					 */

					currentComponent = "tHashInput_12";

					/**
					 * [tHashInput_12 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row26 main ] start
					 */

					currentComponent = "tAdvancedHash_row26";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row26");
					}

					row26Struct row26_HashRow = new row26Struct();

					row26_HashRow.YEAR_NUM = row26.YEAR_NUM;

					row26_HashRow.WEEK_OF_YEAR = row26.WEEK_OF_YEAR;

					row26_HashRow.BU = row26.BU;

					row26_HashRow.Max_W = row26.Max_W;

					row26_HashRow.Min_W = row26.Min_W;

					tHash_Lookup_row26.put(row26_HashRow);

					tos_count_tAdvancedHash_row26++;

					/**
					 * [tAdvancedHash_row26 main ] stop
					 */

					/**
					 * [tAdvancedHash_row26 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row26";

					/**
					 * [tAdvancedHash_row26 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row26 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row26";

					/**
					 * [tAdvancedHash_row26 process_data_end ] stop
					 */

					/**
					 * [tHashInput_12 process_data_end ] start
					 */

					currentComponent = "tHashInput_12";

					/**
					 * [tHashInput_12 process_data_end ] stop
					 */

					/**
					 * [tHashInput_12 end ] start
					 */

					currentComponent = "tHashInput_12";

					nb_line_tHashInput_12++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_7");

				globalMap.put("tHashInput_12_NB_LINE", nb_line_tHashInput_12);

				ok_Hash.put("tHashInput_12", true);
				end_Hash.put("tHashInput_12", System.currentTimeMillis());

				/**
				 * [tHashInput_12 end ] stop
				 */

				/**
				 * [tAdvancedHash_row26 end ] start
				 */

				currentComponent = "tAdvancedHash_row26";

				tHash_Lookup_row26.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row26");
				}

				ok_Hash.put("tAdvancedHash_row26", true);
				end_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row26 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_12 finally ] start
				 */

				currentComponent = "tHashInput_12";

				/**
				 * [tHashInput_12 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row26 finally ] start
				 */

				currentComponent = "tAdvancedHash_row26";

				/**
				 * [tAdvancedHash_row26 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_12_SUBPROCESS_STATE", 1);
	}

	public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_5
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_5> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_5 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row53Struct implements routines.system.IPersistableRow<row53Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row53Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out16Struct implements routines.system.IPersistableRow<out16Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row27Struct row27 = new row27Struct();
				out16Struct out16 = new out16Struct();
				row53Struct row53 = new row53Struct();
				row29Struct row29 = new row29Struct();

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out16");
				}

				int tos_count_tSortRow_1_SortOut = 0;

				class Comparableout16Struct extends out16Struct implements Comparable<Comparableout16Struct> {

					public int compareTo(Comparableout16Struct other) {

						if (this.Month_Differnece == null && other.Month_Differnece != null) {
							return -1;

						} else if (this.Month_Differnece != null && other.Month_Differnece == null) {
							return 1;

						} else if (this.Month_Differnece != null && other.Month_Differnece != null) {
							if (!this.Month_Differnece.equals(other.Month_Differnece)) {
								return this.Month_Differnece.compareTo(other.Month_Differnece);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparableout16Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparableout16Struct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tMap_19 begin ] start
				 */

				ok_Hash.put("tMap_19", false);
				start_Hash.put("tMap_19", System.currentTimeMillis());

				currentComponent = "tMap_19";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row27");
				}

				int tos_count_tMap_19 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_19__Struct {
				}
				Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out16Struct out16_tmp = new out16Struct();
// ###############################

				/**
				 * [tMap_19 begin ] stop
				 */

				/**
				 * [tHashInput_13 begin ] start
				 */

				ok_Hash.put("tHashInput_13", false);
				start_Hash.put("tHashInput_13", System.currentTimeMillis());

				currentComponent = "tHashInput_13";

				int tos_count_tHashInput_13 = 0;

				int nb_line_tHashInput_13 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_13 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out9Struct> tHashFile_tHashInput_13 = mf_tHashInput_13
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_14");
				if (tHashFile_tHashInput_13 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<out9Struct> iterator_tHashInput_13 = tHashFile_tHashInput_13.iterator();
				while (iterator_tHashInput_13.hasNext()) {
					out9Struct next_tHashInput_13 = iterator_tHashInput_13.next();

					row27.YEAR_NUM = next_tHashInput_13.YEAR_NUM;
					row27.MONTH_OF_YEAR = next_tHashInput_13.MONTH_OF_YEAR;
					row27.BU = next_tHashInput_13.BU;
					row27.KPI_ID = next_tHashInput_13.KPI_ID;
					row27.VAL = next_tHashInput_13.VAL;
					row27.FREQUENCY = next_tHashInput_13.FREQUENCY;
					row27.WEEK_OF_YEAR = next_tHashInput_13.WEEK_OF_YEAR;
					row27.KPI_DESC = next_tHashInput_13.KPI_DESC;
					row27.Weight = next_tHashInput_13.Weight;
					row27.JS = next_tHashInput_13.JS;
					row27.Month_Differnece = next_tHashInput_13.Month_Differnece;
					row27.Angle_Of_KPI = next_tHashInput_13.Angle_Of_KPI;
					row27.Achieved = next_tHashInput_13.Achieved;
					row27.Distance = next_tHashInput_13.Distance;

					/**
					 * [tHashInput_13 begin ] stop
					 */

					/**
					 * [tHashInput_13 main ] start
					 */

					currentComponent = "tHashInput_13";

					tos_count_tHashInput_13++;

					/**
					 * [tHashInput_13 main ] stop
					 */

					/**
					 * [tHashInput_13 process_data_begin ] start
					 */

					currentComponent = "tHashInput_13";

					/**
					 * [tHashInput_13 process_data_begin ] stop
					 */

					/**
					 * [tMap_19 main ] start
					 */

					currentComponent = "tMap_19";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row27");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_19 = false;
					boolean mainRowRejected_tMap_19 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
						// ###############################
						// # Output tables

						out16 = null;

// # Output table : 'out16'
						out16_tmp.YEAR_NUM = row27.YEAR_NUM;
						out16_tmp.MONTH_OF_YEAR = row27.MONTH_OF_YEAR;
						out16_tmp.BU = row27.BU;
						out16_tmp.KPI_ID = row27.KPI_ID;
						out16_tmp.VAL = row27.VAL;
						out16_tmp.FREQUENCY = row27.FREQUENCY;
						out16_tmp.WEEK_OF_YEAR = row27.WEEK_OF_YEAR;
						out16_tmp.KPI_DESC = row27.KPI_DESC;
						out16_tmp.Weight = row27.Weight;
						out16_tmp.JS = row27.JS;
						out16_tmp.Month_Differnece = row27.Month_Differnece < 0.0 ? row27.Month_Differnece * -1
								: row27.Month_Differnece;
						out16_tmp.Angle_Of_KPI = row27.Angle_Of_KPI;
						out16_tmp.Achieved = row27.Achieved;
						out16_tmp.Distance = row27.Distance;
						out16 = out16_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_19 = false;

					tos_count_tMap_19++;

					/**
					 * [tMap_19 main ] stop
					 */

					/**
					 * [tMap_19 process_data_begin ] start
					 */

					currentComponent = "tMap_19";

					/**
					 * [tMap_19 process_data_begin ] stop
					 */
// Start of branch "out16"
					if (out16 != null) {

						/**
						 * [tSortRow_1_SortOut main ] start
						 */

						currentVirtualComponent = "tSortRow_1";

						currentComponent = "tSortRow_1_SortOut";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "out16");
						}

						Comparableout16Struct arrayRowtSortRow_1_SortOut = new Comparableout16Struct();

						arrayRowtSortRow_1_SortOut.YEAR_NUM = out16.YEAR_NUM;
						arrayRowtSortRow_1_SortOut.MONTH_OF_YEAR = out16.MONTH_OF_YEAR;
						arrayRowtSortRow_1_SortOut.BU = out16.BU;
						arrayRowtSortRow_1_SortOut.KPI_ID = out16.KPI_ID;
						arrayRowtSortRow_1_SortOut.VAL = out16.VAL;
						arrayRowtSortRow_1_SortOut.FREQUENCY = out16.FREQUENCY;
						arrayRowtSortRow_1_SortOut.WEEK_OF_YEAR = out16.WEEK_OF_YEAR;
						arrayRowtSortRow_1_SortOut.KPI_DESC = out16.KPI_DESC;
						arrayRowtSortRow_1_SortOut.Weight = out16.Weight;
						arrayRowtSortRow_1_SortOut.JS = out16.JS;
						arrayRowtSortRow_1_SortOut.Month_Differnece = out16.Month_Differnece;
						arrayRowtSortRow_1_SortOut.Angle_Of_KPI = out16.Angle_Of_KPI;
						arrayRowtSortRow_1_SortOut.Achieved = out16.Achieved;
						arrayRowtSortRow_1_SortOut.Distance = out16.Distance;
						list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

						tos_count_tSortRow_1_SortOut++;

						/**
						 * [tSortRow_1_SortOut main ] stop
						 */

						/**
						 * [tSortRow_1_SortOut process_data_begin ] start
						 */

						currentVirtualComponent = "tSortRow_1";

						currentComponent = "tSortRow_1_SortOut";

						/**
						 * [tSortRow_1_SortOut process_data_begin ] stop
						 */

						/**
						 * [tSortRow_1_SortOut process_data_end ] start
						 */

						currentVirtualComponent = "tSortRow_1";

						currentComponent = "tSortRow_1_SortOut";

						/**
						 * [tSortRow_1_SortOut process_data_end ] stop
						 */

					} // End of branch "out16"

					/**
					 * [tMap_19 process_data_end ] start
					 */

					currentComponent = "tMap_19";

					/**
					 * [tMap_19 process_data_end ] stop
					 */

					/**
					 * [tHashInput_13 process_data_end ] start
					 */

					currentComponent = "tHashInput_13";

					/**
					 * [tHashInput_13 process_data_end ] stop
					 */

					/**
					 * [tHashInput_13 end ] start
					 */

					currentComponent = "tHashInput_13";

					nb_line_tHashInput_13++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_14");

				globalMap.put("tHashInput_13_NB_LINE", nb_line_tHashInput_13);

				ok_Hash.put("tHashInput_13", true);
				end_Hash.put("tHashInput_13", System.currentTimeMillis());

				/**
				 * [tHashInput_13 end ] stop
				 */

				/**
				 * [tMap_19 end ] start
				 */

				currentComponent = "tMap_19";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row27");
				}

				ok_Hash.put("tMap_19", true);
				end_Hash.put("tMap_19", System.currentTimeMillis());

				/**
				 * [tMap_19 end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				out16Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparableout16Struct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out16");
				}

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_5_AGGOUT", false);
				start_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row53");
				}

				int tos_count_tAggregateRow_5_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_5 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_5 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_5 utilClass_tAggregateRow_5 = new UtilClass_tAggregateRow_5();

				class AggOperationStruct_tAggregateRow_5 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String YEAR_NUM;
					String BU;
					String WEEK_OF_YEAR;
					Double Distance_first;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

							result = prime * result + ((this.BU == null) ? 0 : this.BU.hashCode());

							result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_5 other = (AggOperationStruct_tAggregateRow_5) obj;

						if (this.YEAR_NUM == null) {
							if (other.YEAR_NUM != null)
								return false;
						} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))
							return false;

						if (this.BU == null) {
							if (other.BU != null)
								return false;
						} else if (!this.BU.equals(other.BU))
							return false;

						if (this.WEEK_OF_YEAR == null) {
							if (other.WEEK_OF_YEAR != null)
								return false;
						} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_5 operation_result_tAggregateRow_5 = null;
				AggOperationStruct_tAggregateRow_5 operation_finder_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();
				java.util.Map<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5> hash_tAggregateRow_5 = new java.util.HashMap<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5>();

				/**
				 * [tAggregateRow_5_AGGOUT begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				out16Struct[] array_tSortRow_1_SortIn = (out16Struct[]) globalMap.remove("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				out16Struct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					row53.YEAR_NUM = current_tSortRow_1_SortIn.YEAR_NUM;
					row53.MONTH_OF_YEAR = current_tSortRow_1_SortIn.MONTH_OF_YEAR;
					row53.BU = current_tSortRow_1_SortIn.BU;
					row53.KPI_ID = current_tSortRow_1_SortIn.KPI_ID;
					row53.VAL = current_tSortRow_1_SortIn.VAL;
					row53.FREQUENCY = current_tSortRow_1_SortIn.FREQUENCY;
					row53.WEEK_OF_YEAR = current_tSortRow_1_SortIn.WEEK_OF_YEAR;
					row53.KPI_DESC = current_tSortRow_1_SortIn.KPI_DESC;
					row53.Weight = current_tSortRow_1_SortIn.Weight;
					row53.JS = current_tSortRow_1_SortIn.JS;
					row53.Month_Differnece = current_tSortRow_1_SortIn.Month_Differnece;
					row53.Angle_Of_KPI = current_tSortRow_1_SortIn.Angle_Of_KPI;
					row53.Achieved = current_tSortRow_1_SortIn.Achieved;
					row53.Distance = current_tSortRow_1_SortIn.Distance;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_begin ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGOUT main ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGOUT";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row53");
					}

					operation_finder_tAggregateRow_5.YEAR_NUM = row53.YEAR_NUM;
					operation_finder_tAggregateRow_5.BU = row53.BU;
					operation_finder_tAggregateRow_5.WEEK_OF_YEAR = row53.WEEK_OF_YEAR;

					operation_finder_tAggregateRow_5.hashCodeDirty = true;

					operation_result_tAggregateRow_5 = hash_tAggregateRow_5.get(operation_finder_tAggregateRow_5);

					boolean isFirstAdd_tAggregateRow_5 = false;

					if (operation_result_tAggregateRow_5 == null) { // G_OutMain_AggR_001

						operation_result_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();

						operation_result_tAggregateRow_5.YEAR_NUM = operation_finder_tAggregateRow_5.YEAR_NUM;
						operation_result_tAggregateRow_5.BU = operation_finder_tAggregateRow_5.BU;
						operation_result_tAggregateRow_5.WEEK_OF_YEAR = operation_finder_tAggregateRow_5.WEEK_OF_YEAR;

						isFirstAdd_tAggregateRow_5 = true;

						hash_tAggregateRow_5.put(operation_result_tAggregateRow_5, operation_result_tAggregateRow_5);

					} // G_OutMain_AggR_001

					if (isFirstAdd_tAggregateRow_5) {
						operation_result_tAggregateRow_5.Distance_first = row53.Distance;
					}

					tos_count_tAggregateRow_5_AGGOUT++;

					/**
					 * [tAggregateRow_5_AGGOUT main ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGOUT process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGOUT";

					/**
					 * [tAggregateRow_5_AGGOUT process_data_begin ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGOUT process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGOUT";

					/**
					 * [tAggregateRow_5_AGGOUT process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE", nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row53");
				}

				ok_Hash.put("tAggregateRow_5_AGGOUT", true);
				end_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_5_AGGOUT end ] stop
				 */

				/**
				 * [tHashOutput_15 begin ] start
				 */

				ok_Hash.put("tHashOutput_15", false);
				start_Hash.put("tHashOutput_15", System.currentTimeMillis());

				currentComponent = "tHashOutput_15";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row29");
				}

				int tos_count_tHashOutput_15 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_15 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row29Struct> tHashFile_tHashOutput_15 = null;
				String hashKey_tHashOutput_15 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_15";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_15)) {
					if (mf_tHashOutput_15.getResourceMap().get(hashKey_tHashOutput_15) == null) {
						mf_tHashOutput_15.getResourceMap().put(hashKey_tHashOutput_15,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row29Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_15 = mf_tHashOutput_15.getResourceMap().get(hashKey_tHashOutput_15);
					} else {
						tHashFile_tHashOutput_15 = mf_tHashOutput_15.getResourceMap().get(hashKey_tHashOutput_15);
					}
				}
				int nb_line_tHashOutput_15 = 0;

				/**
				 * [tHashOutput_15 begin ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_5_AGGIN", false);
				start_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGIN";

				int tos_count_tAggregateRow_5_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_5> values_tAggregateRow_5 = hash_tAggregateRow_5
						.values();

				globalMap.put("tAggregateRow_5_NB_LINE", values_tAggregateRow_5.size());

				for (AggOperationStruct_tAggregateRow_5 aggregated_row_tAggregateRow_5 : values_tAggregateRow_5) { // G_AggR_600

					/**
					 * [tAggregateRow_5_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

					row29.YEAR_NUM = aggregated_row_tAggregateRow_5.YEAR_NUM;

					row29.WEEK_OF_YEAR = aggregated_row_tAggregateRow_5.WEEK_OF_YEAR;

					row29.BU = aggregated_row_tAggregateRow_5.BU;

					row29.Distance = aggregated_row_tAggregateRow_5.Distance_first;

					tos_count_tAggregateRow_5_AGGIN++;

					/**
					 * [tAggregateRow_5_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

					/**
					 * [tAggregateRow_5_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_15 main ] start
					 */

					currentComponent = "tHashOutput_15";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row29");
					}

					row29Struct oneRow_tHashOutput_15 = new row29Struct();

					oneRow_tHashOutput_15.YEAR_NUM = row29.YEAR_NUM;
					oneRow_tHashOutput_15.WEEK_OF_YEAR = row29.WEEK_OF_YEAR;
					oneRow_tHashOutput_15.BU = row29.BU;
					oneRow_tHashOutput_15.Distance = row29.Distance;

					tHashFile_tHashOutput_15.put(oneRow_tHashOutput_15);
					nb_line_tHashOutput_15++;

					tos_count_tHashOutput_15++;

					/**
					 * [tHashOutput_15 main ] stop
					 */

					/**
					 * [tHashOutput_15 process_data_begin ] start
					 */

					currentComponent = "tHashOutput_15";

					/**
					 * [tHashOutput_15 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_15 process_data_end ] start
					 */

					currentComponent = "tHashOutput_15";

					/**
					 * [tHashOutput_15 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

					/**
					 * [tAggregateRow_5_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_5_AGGIN", true);
				end_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_5_AGGIN end ] stop
				 */

				/**
				 * [tHashOutput_15 end ] start
				 */

				currentComponent = "tHashOutput_15";

				globalMap.put("tHashOutput_15_NB_LINE", nb_line_tHashOutput_15);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row29");
				}

				ok_Hash.put("tHashOutput_15", true);
				end_Hash.put("tHashOutput_15", System.currentTimeMillis());

				/**
				 * [tHashOutput_15 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_13:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
			}

			tHashInput_15Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_5_AGGIN"
			globalMap.remove("tAggregateRow_5");

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			try {

				/**
				 * [tHashInput_13 finally ] start
				 */

				currentComponent = "tHashInput_13";

				/**
				 * [tHashInput_13 finally ] stop
				 */

				/**
				 * [tMap_19 finally ] start
				 */

				currentComponent = "tMap_19";

				/**
				 * [tMap_19 finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				/**
				 * [tAggregateRow_5_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGIN";

				/**
				 * [tAggregateRow_5_AGGIN finally ] stop
				 */

				/**
				 * [tHashOutput_15 finally ] start
				 */

				currentComponent = "tHashOutput_15";

				/**
				 * [tHashOutput_15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_13_SUBPROCESS_STATE", 1);
	}

	public static class copyOfout9Struct implements routines.system.IPersistableRow<copyOfout9Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tHashInput_15Struct
			implements routines.system.IPersistableRow<after_tHashInput_15Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tHashInput_15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tHashInput_14Process(globalMap);

				row31Struct row31 = new row31Struct();
				copyOfout9Struct copyOfout9 = new copyOfout9Struct();

				/**
				 * [tHashOutput_16 begin ] start
				 */

				ok_Hash.put("tHashOutput_16", false);
				start_Hash.put("tHashOutput_16", System.currentTimeMillis());

				currentComponent = "tHashOutput_16";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfout9");
				}

				int tos_count_tHashOutput_16 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_16 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout9Struct> tHashFile_tHashOutput_16 = null;
				String hashKey_tHashOutput_16 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_16";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_16)) {
					if (mf_tHashOutput_16.getResourceMap().get(hashKey_tHashOutput_16) == null) {
						mf_tHashOutput_16.getResourceMap().put(hashKey_tHashOutput_16,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout9Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_16 = mf_tHashOutput_16.getResourceMap().get(hashKey_tHashOutput_16);
					} else {
						tHashFile_tHashOutput_16 = mf_tHashOutput_16.getResourceMap().get(hashKey_tHashOutput_16);
					}
				}
				int nb_line_tHashOutput_16 = 0;

				/**
				 * [tHashOutput_16 begin ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());

				currentComponent = "tMap_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row31");
				}

				int tos_count_tMap_10 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) globalMap
						.get("tHash_Lookup_row30"));

				row30Struct row30HashKey = new row30Struct();
				row30Struct row30Default = new row30Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_10__Struct {
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfout9Struct copyOfout9_tmp = new copyOfout9Struct();
// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tHashInput_15 begin ] start
				 */

				ok_Hash.put("tHashInput_15", false);
				start_Hash.put("tHashInput_15", System.currentTimeMillis());

				currentComponent = "tHashInput_15";

				int tos_count_tHashInput_15 = 0;

				int nb_line_tHashInput_15 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_15 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out9Struct> tHashFile_tHashInput_15 = mf_tHashInput_15
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_14");
				if (tHashFile_tHashInput_15 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<out9Struct> iterator_tHashInput_15 = tHashFile_tHashInput_15.iterator();
				while (iterator_tHashInput_15.hasNext()) {
					out9Struct next_tHashInput_15 = iterator_tHashInput_15.next();

					row31.YEAR_NUM = next_tHashInput_15.YEAR_NUM;
					row31.MONTH_OF_YEAR = next_tHashInput_15.MONTH_OF_YEAR;
					row31.BU = next_tHashInput_15.BU;
					row31.KPI_ID = next_tHashInput_15.KPI_ID;
					row31.VAL = next_tHashInput_15.VAL;
					row31.FREQUENCY = next_tHashInput_15.FREQUENCY;
					row31.WEEK_OF_YEAR = next_tHashInput_15.WEEK_OF_YEAR;
					row31.KPI_DESC = next_tHashInput_15.KPI_DESC;
					row31.Weight = next_tHashInput_15.Weight;
					row31.JS = next_tHashInput_15.JS;
					row31.Month_Differnece = next_tHashInput_15.Month_Differnece;
					row31.Angle_Of_KPI = next_tHashInput_15.Angle_Of_KPI;
					row31.Achieved = next_tHashInput_15.Achieved;
					row31.Distance = next_tHashInput_15.Distance;

					/**
					 * [tHashInput_15 begin ] stop
					 */

					/**
					 * [tHashInput_15 main ] start
					 */

					currentComponent = "tHashInput_15";

					tos_count_tHashInput_15++;

					/**
					 * [tHashInput_15 main ] stop
					 */

					/**
					 * [tHashInput_15 process_data_begin ] start
					 */

					currentComponent = "tHashInput_15";

					/**
					 * [tHashInput_15 process_data_begin ] stop
					 */

					/**
					 * [tMap_10 main ] start
					 */

					currentComponent = "tMap_10";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row31");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_10 = false;
					boolean mainRowRejected_tMap_10 = false;

					///////////////////////////////////////////////
					// Starting Lookup Table "row30"
					///////////////////////////////////////////////

					boolean forceLooprow30 = false;

					row30Struct row30ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_10 = false;

						row30HashKey.YEAR_NUM = row31.YEAR_NUM;

						row30HashKey.WEEK_OF_YEAR = row31.WEEK_OF_YEAR;

						row30HashKey.BU = row31.BU;

						row30HashKey.hashCodeDirty = true;

						tHash_Lookup_row30.lookup(row30HashKey);

					} // G_TM_M_020

					if (tHash_Lookup_row30 != null && tHash_Lookup_row30.getCount(row30HashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
						// 'row30' and it contains more one result from keys : row30.YEAR_NUM = '" +
						// row30HashKey.YEAR_NUM + "', row30.WEEK_OF_YEAR = '" +
						// row30HashKey.WEEK_OF_YEAR + "', row30.BU = '" + row30HashKey.BU + "'");
					} // G 071

					row30Struct row30 = null;

					row30Struct fromLookup_row30 = null;
					row30 = row30Default;

					if (tHash_Lookup_row30 != null && tHash_Lookup_row30.hasNext()) { // G 099

						fromLookup_row30 = tHash_Lookup_row30.next();

					} // G 099

					if (fromLookup_row30 != null) {
						row30 = fromLookup_row30;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
						// ###############################
						// # Output tables

						copyOfout9 = null;

// # Output table : 'copyOfout9'
						copyOfout9_tmp.YEAR_NUM = row31.YEAR_NUM;
						copyOfout9_tmp.MONTH_OF_YEAR = row31.MONTH_OF_YEAR;
						copyOfout9_tmp.BU = row31.BU;
						copyOfout9_tmp.KPI_ID = row31.KPI_ID;
						copyOfout9_tmp.VAL = row31.VAL;
						copyOfout9_tmp.FREQUENCY = row31.FREQUENCY;
						copyOfout9_tmp.WEEK_OF_YEAR = row31.WEEK_OF_YEAR;
						copyOfout9_tmp.KPI_DESC = row31.KPI_DESC;
						copyOfout9_tmp.Weight = row31.Weight;
						copyOfout9_tmp.JS = row31.JS;
						copyOfout9_tmp.Month_Differnece = row31.Month_Differnece;
						copyOfout9_tmp.Angle_Of_KPI = row31.Angle_Of_KPI;
						copyOfout9_tmp.Achieved = row31.Achieved;
						copyOfout9_tmp.Distance = (row31.Achieved == 1 ? (row31.Distance / row30.Distance) + 2
								: (row31.Distance / row30.Distance)) > 4.0
										? 4.0
										: (row31.Achieved == 1 ? (row31.Distance / row30.Distance) + 2
												: (row31.Distance / row30.Distance)) < 0.0 ? 0.0
														: (row31.Achieved == 1 ? (row31.Distance / row30.Distance) + 2
																: (row31.Distance / row30.Distance));
						copyOfout9 = copyOfout9_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_10 = false;

					tos_count_tMap_10++;

					/**
					 * [tMap_10 main ] stop
					 */

					/**
					 * [tMap_10 process_data_begin ] start
					 */

					currentComponent = "tMap_10";

					/**
					 * [tMap_10 process_data_begin ] stop
					 */
// Start of branch "copyOfout9"
					if (copyOfout9 != null) {

						/**
						 * [tHashOutput_16 main ] start
						 */

						currentComponent = "tHashOutput_16";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfout9");
						}

						copyOfout9Struct oneRow_tHashOutput_16 = new copyOfout9Struct();

						oneRow_tHashOutput_16.YEAR_NUM = copyOfout9.YEAR_NUM;
						oneRow_tHashOutput_16.MONTH_OF_YEAR = copyOfout9.MONTH_OF_YEAR;
						oneRow_tHashOutput_16.BU = copyOfout9.BU;
						oneRow_tHashOutput_16.KPI_ID = copyOfout9.KPI_ID;
						oneRow_tHashOutput_16.VAL = copyOfout9.VAL;
						oneRow_tHashOutput_16.FREQUENCY = copyOfout9.FREQUENCY;
						oneRow_tHashOutput_16.WEEK_OF_YEAR = copyOfout9.WEEK_OF_YEAR;
						oneRow_tHashOutput_16.KPI_DESC = copyOfout9.KPI_DESC;
						oneRow_tHashOutput_16.Weight = copyOfout9.Weight;
						oneRow_tHashOutput_16.JS = copyOfout9.JS;
						oneRow_tHashOutput_16.Month_Differnece = copyOfout9.Month_Differnece;
						oneRow_tHashOutput_16.Angle_Of_KPI = copyOfout9.Angle_Of_KPI;
						oneRow_tHashOutput_16.Achieved = copyOfout9.Achieved;
						oneRow_tHashOutput_16.Distance = copyOfout9.Distance;

						tHashFile_tHashOutput_16.put(oneRow_tHashOutput_16);
						nb_line_tHashOutput_16++;

						tos_count_tHashOutput_16++;

						/**
						 * [tHashOutput_16 main ] stop
						 */

						/**
						 * [tHashOutput_16 process_data_begin ] start
						 */

						currentComponent = "tHashOutput_16";

						/**
						 * [tHashOutput_16 process_data_begin ] stop
						 */

						/**
						 * [tHashOutput_16 process_data_end ] start
						 */

						currentComponent = "tHashOutput_16";

						/**
						 * [tHashOutput_16 process_data_end ] stop
						 */

					} // End of branch "copyOfout9"

					/**
					 * [tMap_10 process_data_end ] start
					 */

					currentComponent = "tMap_10";

					/**
					 * [tMap_10 process_data_end ] stop
					 */

					/**
					 * [tHashInput_15 process_data_end ] start
					 */

					currentComponent = "tHashInput_15";

					/**
					 * [tHashInput_15 process_data_end ] stop
					 */

					/**
					 * [tHashInput_15 end ] start
					 */

					currentComponent = "tHashInput_15";

					nb_line_tHashInput_15++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_14");

				globalMap.put("tHashInput_15_NB_LINE", nb_line_tHashInput_15);

				ok_Hash.put("tHashInput_15", true);
				end_Hash.put("tHashInput_15", System.currentTimeMillis());

				/**
				 * [tHashInput_15 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row30 != null) {
					tHash_Lookup_row30.endGet();
				}
				globalMap.remove("tHash_Lookup_row30");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row31");
				}

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tHashOutput_16 end ] start
				 */

				currentComponent = "tHashOutput_16";

				globalMap.put("tHashOutput_16_NB_LINE", nb_line_tHashOutput_16);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfout9");
				}

				ok_Hash.put("tHashOutput_16", true);
				end_Hash.put("tHashOutput_16", System.currentTimeMillis());

				/**
				 * [tHashOutput_16 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_15:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
			}

			tHashInput_17Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_10"
			globalMap.remove("tHash_Lookup_row30");

			try {

				/**
				 * [tHashInput_15 finally ] start
				 */

				currentComponent = "tHashInput_15";

				/**
				 * [tHashInput_15 finally ] stop
				 */

				/**
				 * [tMap_10 finally ] start
				 */

				currentComponent = "tMap_10";

				/**
				 * [tMap_10 finally ] stop
				 */

				/**
				 * [tHashOutput_16 finally ] start
				 */

				currentComponent = "tHashOutput_16";

				/**
				 * [tHashOutput_16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_15_SUBPROCESS_STATE", 1);
	}

	public static class out99Struct implements routines.system.IPersistableRow<out99Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out99Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfout9Struct implements routines.system.IPersistableRow<copyOfcopyOfout9Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfout9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tHashInput_17Struct
			implements routines.system.IPersistableRow<after_tHashInput_17Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.VAL = null;
					} else {
						this.VAL = dis.readDouble();
					}

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// Double

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tHashInput_17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tHashInput_16Process(globalMap);

				row33Struct row33 = new row33Struct();
				copyOfcopyOfout9Struct copyOfcopyOfout9 = new copyOfcopyOfout9Struct();
				out99Struct out99 = new out99Struct();

				/**
				 * [tHashOutput_17 begin ] start
				 */

				ok_Hash.put("tHashOutput_17", false);
				start_Hash.put("tHashOutput_17", System.currentTimeMillis());

				currentComponent = "tHashOutput_17";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out99");
				}

				int tos_count_tHashOutput_17 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_17 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out99Struct> tHashFile_tHashOutput_17 = null;
				String hashKey_tHashOutput_17 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_17";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_17)) {
					if (mf_tHashOutput_17.getResourceMap().get(hashKey_tHashOutput_17) == null) {
						mf_tHashOutput_17.getResourceMap().put(hashKey_tHashOutput_17,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out99Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_17 = mf_tHashOutput_17.getResourceMap().get(hashKey_tHashOutput_17);
					} else {
						tHashFile_tHashOutput_17 = mf_tHashOutput_17.getResourceMap().get(hashKey_tHashOutput_17);
					}
				}
				int nb_line_tHashOutput_17 = 0;

				/**
				 * [tHashOutput_17 begin ] stop
				 */

				/**
				 * [tMap_27 begin ] start
				 */

				ok_Hash.put("tMap_27", false);
				start_Hash.put("tMap_27", System.currentTimeMillis());

				currentComponent = "tMap_27";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfout9");
				}

				int tos_count_tMap_27 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_27__Struct {
				}
				Var__tMap_27__Struct Var__tMap_27 = new Var__tMap_27__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out99Struct out99_tmp = new out99Struct();
// ###############################

				/**
				 * [tMap_27 begin ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());

				currentComponent = "tMap_11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row33");
				}

				int tos_count_tMap_11 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) globalMap
						.get("tHash_Lookup_row34"));

				row34Struct row34HashKey = new row34Struct();
				row34Struct row34Default = new row34Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_11__Struct {
				}
				Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfout9Struct copyOfcopyOfout9_tmp = new copyOfcopyOfout9Struct();
// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tHashInput_17 begin ] start
				 */

				ok_Hash.put("tHashInput_17", false);
				start_Hash.put("tHashInput_17", System.currentTimeMillis());

				currentComponent = "tHashInput_17";

				int tos_count_tHashInput_17 = 0;

				int nb_line_tHashInput_17 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_17 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout9Struct> tHashFile_tHashInput_17 = mf_tHashInput_17
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_16");
				if (tHashFile_tHashInput_17 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<copyOfout9Struct> iterator_tHashInput_17 = tHashFile_tHashInput_17.iterator();
				while (iterator_tHashInput_17.hasNext()) {
					copyOfout9Struct next_tHashInput_17 = iterator_tHashInput_17.next();

					row33.YEAR_NUM = next_tHashInput_17.YEAR_NUM;
					row33.MONTH_OF_YEAR = next_tHashInput_17.MONTH_OF_YEAR;
					row33.BU = next_tHashInput_17.BU;
					row33.KPI_ID = next_tHashInput_17.KPI_ID;
					row33.VAL = next_tHashInput_17.VAL;
					row33.FREQUENCY = next_tHashInput_17.FREQUENCY;
					row33.WEEK_OF_YEAR = next_tHashInput_17.WEEK_OF_YEAR;
					row33.KPI_DESC = next_tHashInput_17.KPI_DESC;
					row33.Weight = next_tHashInput_17.Weight;
					row33.JS = next_tHashInput_17.JS;
					row33.Month_Differnece = next_tHashInput_17.Month_Differnece;
					row33.Angle_Of_KPI = next_tHashInput_17.Angle_Of_KPI;
					row33.Achieved = next_tHashInput_17.Achieved;
					row33.Distance = next_tHashInput_17.Distance;

					/**
					 * [tHashInput_17 begin ] stop
					 */

					/**
					 * [tHashInput_17 main ] start
					 */

					currentComponent = "tHashInput_17";

					tos_count_tHashInput_17++;

					/**
					 * [tHashInput_17 main ] stop
					 */

					/**
					 * [tHashInput_17 process_data_begin ] start
					 */

					currentComponent = "tHashInput_17";

					/**
					 * [tHashInput_17 process_data_begin ] stop
					 */

					/**
					 * [tMap_11 main ] start
					 */

					currentComponent = "tMap_11";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row33");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_11 = false;
					boolean mainRowRejected_tMap_11 = false;

					///////////////////////////////////////////////
					// Starting Lookup Table "row34"
					///////////////////////////////////////////////

					boolean forceLooprow34 = false;

					row34Struct row34ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_11) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_11 = false;

						row34HashKey.KPI_id = row33.KPI_ID;

						row34HashKey.Year = row33.YEAR_NUM;

						row34HashKey.WEEK_OF_YEAR = row33.WEEK_OF_YEAR;

						row34HashKey.hashCodeDirty = true;

						tHash_Lookup_row34.lookup(row34HashKey);

					} // G_TM_M_020

					if (tHash_Lookup_row34 != null && tHash_Lookup_row34.getCount(row34HashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
						// 'row34' and it contains more one result from keys : row34.KPI_id = '" +
						// row34HashKey.KPI_id + "', row34.Year = '" + row34HashKey.Year + "',
						// row34.WEEK_OF_YEAR = '" + row34HashKey.WEEK_OF_YEAR + "'");
					} // G 071

					row34Struct row34 = null;

					row34Struct fromLookup_row34 = null;
					row34 = row34Default;

					if (tHash_Lookup_row34 != null && tHash_Lookup_row34.hasNext()) { // G 099

						fromLookup_row34 = tHash_Lookup_row34.next();

					} // G 099

					if (fromLookup_row34 != null) {
						row34 = fromLookup_row34;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
						// ###############################
						// # Output tables

						copyOfcopyOfout9 = null;

// # Output table : 'copyOfcopyOfout9'
						copyOfcopyOfout9_tmp.YEAR_NUM = row33.YEAR_NUM;
						copyOfcopyOfout9_tmp.MONTH_OF_YEAR = row33.MONTH_OF_YEAR;
						copyOfcopyOfout9_tmp.BU = row33.BU;
						copyOfcopyOfout9_tmp.KPI_ID = row33.KPI_ID;
						copyOfcopyOfout9_tmp.FREQUENCY = row33.FREQUENCY;
						copyOfcopyOfout9_tmp.WEEK_OF_YEAR = row33.WEEK_OF_YEAR;
						copyOfcopyOfout9_tmp.KPI_DESC = row34.SUB_BU.equals("Gov") ? row34.SUB_BU + "_" + row33.KPI_DESC
								: row34.SUB_BU.equals("Non-Gov") ? row34.SUB_BU + "_" + row33.KPI_DESC : row33.KPI_DESC;
						copyOfcopyOfout9_tmp.Weight = row34.weight;
						copyOfcopyOfout9_tmp.JS = row34.JS;
						copyOfcopyOfout9_tmp.Month_Differnece = row33.Month_Differnece;
						copyOfcopyOfout9_tmp.Angle_Of_KPI = row33.Angle_Of_KPI;
						copyOfcopyOfout9_tmp.Achieved = row33.Achieved;
						copyOfcopyOfout9_tmp.Distance = row33.Distance;
						copyOfcopyOfout9_tmp.Weight_Disc = ((row33.Angle_Of_KPI >= 0.0 && row33.Angle_Of_KPI < 28.0)
								|| (row33.Angle_Of_KPI >= 82.0 && row33.Angle_Of_KPI < 154.0
										&& row33.JS.equals("Using"))
								|| (row33.Angle_Of_KPI >= 297.0 && row33.Angle_Of_KPI < 319.0
										&& row33.JS.equals("Evaluating")))
												? "LOW"
												: ((row33.Angle_Of_KPI >= 28.0 && row33.Angle_Of_KPI < 55.0)
														|| (row33.Angle_Of_KPI >= 154.0 && row33.Angle_Of_KPI < 226.0
																&& row33.JS.equals("Using"))
														|| (row33.Angle_Of_KPI >= 319.0 && row33.Angle_Of_KPI < 341.0
																&& row33.JS.equals("Evaluating"))) ? "MEDIUM" : "HIGH";
						copyOfcopyOfout9_tmp.Total_BU = row33.BU.equals("STC")
								? "STC_" + (StringHandling.SUBSTR(row33.KPI_ID, 5, 3).equals("CBU") ? "B2C"
										: StringHandling.SUBSTR(row33.KPI_ID, 5, 3).equals("EBU") ? "B2B"
												: StringHandling.SUBSTR(row33.KPI_ID, 5, 3))
								: row33.BU;
						copyOfcopyOfout9_tmp.Title = row33.KPI_ID + "_" + row33.YEAR_NUM + "_" + row33.MONTH_OF_YEAR
								+ "_" + TalendDate.getDate("hh:mm:ss");
						copyOfcopyOfout9_tmp.Score = Agg_Class_Methods.Calculate_adj_score(Agg_Class_Methods
								.Calculate_actual_perf(row34.KPI_dierection, row33.VAL, row34.Amb_target), row34.weight,
								row34.Apa);
						copyOfcopyOfout9_tmp.SUB_BU = row34.SUB_BU;
						copyOfcopyOfout9_tmp.Is_weekly = row34.Is_weekly;
						copyOfcopyOfout9 = copyOfcopyOfout9_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_11 = false;

					tos_count_tMap_11++;

					/**
					 * [tMap_11 main ] stop
					 */

					/**
					 * [tMap_11 process_data_begin ] start
					 */

					currentComponent = "tMap_11";

					/**
					 * [tMap_11 process_data_begin ] stop
					 */
// Start of branch "copyOfcopyOfout9"
					if (copyOfcopyOfout9 != null) {

						/**
						 * [tMap_27 main ] start
						 */

						currentComponent = "tMap_27";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfout9");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_27 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_27 = false;
						boolean mainRowRejected_tMap_27 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_27__Struct Var = Var__tMap_27;// ###############################
							// ###############################
							// # Output tables

							out99 = null;

// # Output table : 'out99'
							out99_tmp.YEAR_NUM = copyOfcopyOfout9.YEAR_NUM;
							out99_tmp.MONTH_OF_YEAR = copyOfcopyOfout9.MONTH_OF_YEAR;
							out99_tmp.BU = copyOfcopyOfout9.BU;
							out99_tmp.KPI_ID = copyOfcopyOfout9.KPI_ID;
							out99_tmp.FREQUENCY = copyOfcopyOfout9.FREQUENCY;
							out99_tmp.WEEK_OF_YEAR = copyOfcopyOfout9.WEEK_OF_YEAR;
							out99_tmp.KPI_DESC = copyOfcopyOfout9.KPI_DESC;
							out99_tmp.Weight = copyOfcopyOfout9.Weight;
							out99_tmp.JS = copyOfcopyOfout9.JS;
							out99_tmp.Month_Differnece = copyOfcopyOfout9.Month_Differnece;
							out99_tmp.Angle_Of_KPI = copyOfcopyOfout9.Angle_Of_KPI;
							out99_tmp.Achieved = copyOfcopyOfout9.Achieved;
							out99_tmp.Distance = copyOfcopyOfout9.Distance;
							out99_tmp.Weight_Disc = copyOfcopyOfout9.Weight_Disc;
							out99_tmp.Total_BU = copyOfcopyOfout9.Total_BU;
							out99_tmp.Title = copyOfcopyOfout9.KPI_ID + "_W_" + copyOfcopyOfout9.Total_BU;
							out99_tmp.Score = copyOfcopyOfout9.Score;
							out99_tmp.SUB_BU = copyOfcopyOfout9.SUB_BU;
							out99_tmp.Is_weekly = copyOfcopyOfout9.Is_weekly;
							out99 = out99_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_27 = false;

						tos_count_tMap_27++;

						/**
						 * [tMap_27 main ] stop
						 */

						/**
						 * [tMap_27 process_data_begin ] start
						 */

						currentComponent = "tMap_27";

						/**
						 * [tMap_27 process_data_begin ] stop
						 */
// Start of branch "out99"
						if (out99 != null) {

							/**
							 * [tHashOutput_17 main ] start
							 */

							currentComponent = "tHashOutput_17";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out99");
							}

							out99Struct oneRow_tHashOutput_17 = new out99Struct();

							oneRow_tHashOutput_17.YEAR_NUM = out99.YEAR_NUM;
							oneRow_tHashOutput_17.MONTH_OF_YEAR = out99.MONTH_OF_YEAR;
							oneRow_tHashOutput_17.BU = out99.BU;
							oneRow_tHashOutput_17.KPI_ID = out99.KPI_ID;
							oneRow_tHashOutput_17.FREQUENCY = out99.FREQUENCY;
							oneRow_tHashOutput_17.WEEK_OF_YEAR = out99.WEEK_OF_YEAR;
							oneRow_tHashOutput_17.KPI_DESC = out99.KPI_DESC;
							oneRow_tHashOutput_17.Weight = out99.Weight;
							oneRow_tHashOutput_17.JS = out99.JS;
							oneRow_tHashOutput_17.Month_Differnece = out99.Month_Differnece;
							oneRow_tHashOutput_17.Angle_Of_KPI = out99.Angle_Of_KPI;
							oneRow_tHashOutput_17.Achieved = out99.Achieved;
							oneRow_tHashOutput_17.Distance = out99.Distance;
							oneRow_tHashOutput_17.Weight_Disc = out99.Weight_Disc;
							oneRow_tHashOutput_17.Total_BU = out99.Total_BU;
							oneRow_tHashOutput_17.Title = out99.Title;
							oneRow_tHashOutput_17.Score = out99.Score;
							oneRow_tHashOutput_17.SUB_BU = out99.SUB_BU;
							oneRow_tHashOutput_17.Is_weekly = out99.Is_weekly;

							tHashFile_tHashOutput_17.put(oneRow_tHashOutput_17);
							nb_line_tHashOutput_17++;

							tos_count_tHashOutput_17++;

							/**
							 * [tHashOutput_17 main ] stop
							 */

							/**
							 * [tHashOutput_17 process_data_begin ] start
							 */

							currentComponent = "tHashOutput_17";

							/**
							 * [tHashOutput_17 process_data_begin ] stop
							 */

							/**
							 * [tHashOutput_17 process_data_end ] start
							 */

							currentComponent = "tHashOutput_17";

							/**
							 * [tHashOutput_17 process_data_end ] stop
							 */

						} // End of branch "out99"

						/**
						 * [tMap_27 process_data_end ] start
						 */

						currentComponent = "tMap_27";

						/**
						 * [tMap_27 process_data_end ] stop
						 */

					} // End of branch "copyOfcopyOfout9"

					/**
					 * [tMap_11 process_data_end ] start
					 */

					currentComponent = "tMap_11";

					/**
					 * [tMap_11 process_data_end ] stop
					 */

					/**
					 * [tHashInput_17 process_data_end ] start
					 */

					currentComponent = "tHashInput_17";

					/**
					 * [tHashInput_17 process_data_end ] stop
					 */

					/**
					 * [tHashInput_17 end ] start
					 */

					currentComponent = "tHashInput_17";

					nb_line_tHashInput_17++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_16");

				globalMap.put("tHashInput_17_NB_LINE", nb_line_tHashInput_17);

				ok_Hash.put("tHashInput_17", true);
				end_Hash.put("tHashInput_17", System.currentTimeMillis());

				/**
				 * [tHashInput_17 end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row34 != null) {
					tHash_Lookup_row34.endGet();
				}
				globalMap.remove("tHash_Lookup_row34");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row33");
				}

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tMap_27 end ] start
				 */

				currentComponent = "tMap_27";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfout9");
				}

				ok_Hash.put("tMap_27", true);
				end_Hash.put("tMap_27", System.currentTimeMillis());

				/**
				 * [tMap_27 end ] stop
				 */

				/**
				 * [tHashOutput_17 end ] start
				 */

				currentComponent = "tHashOutput_17";

				globalMap.put("tHashOutput_17_NB_LINE", nb_line_tHashOutput_17);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out99");
				}

				ok_Hash.put("tHashOutput_17", true);
				end_Hash.put("tHashOutput_17", System.currentTimeMillis());

				/**
				 * [tHashOutput_17 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_17:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
			}

			tHashInput_18Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_11"
			globalMap.remove("tHash_Lookup_row34");

			try {

				/**
				 * [tHashInput_17 finally ] start
				 */

				currentComponent = "tHashInput_17";

				/**
				 * [tHashInput_17 finally ] stop
				 */

				/**
				 * [tMap_11 finally ] start
				 */

				currentComponent = "tMap_11";

				/**
				 * [tMap_11 finally ] stop
				 */

				/**
				 * [tMap_27 finally ] start
				 */

				currentComponent = "tMap_27";

				/**
				 * [tMap_27 finally ] stop
				 */

				/**
				 * [tHashOutput_17 finally ] start
				 */

				currentComponent = "tHashOutput_17";

				/**
				 * [tHashOutput_17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_17_SUBPROCESS_STATE", 1);
	}

	public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public Integer Cluster;

		public Integer getCluster() {
			return this.Cluster;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Cluster = readInteger(dis);

					this.BU = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// Integer

				writeInteger(this.Cluster, dos);

				// String

				writeString(this.BU, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",JS=" + JS);
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Cluster=" + String.valueOf(Cluster));
			sb.append(",BU=" + BU);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out10Struct implements routines.system.IPersistableRow<out10Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public Integer Cluster;

		public Integer getCluster() {
			return this.Cluster;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Cluster = readInteger(dis);

					this.BU = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// Integer

				writeInteger(this.Cluster, dos);

				// String

				writeString(this.BU, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",JS=" + JS);
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Cluster=" + String.valueOf(Cluster));
			sb.append(",BU=" + BU);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.BU = readString(dis);

					this.Total_BU = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.Total_BU, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",JS=" + JS);
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",BU=" + BU);
			sb.append(",Total_BU=" + Total_BU);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_7
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_7> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.BU = readString(dis);

					this.Total_BU = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.Total_BU, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",JS=" + JS);
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",BU=" + BU);
			sb.append(",Total_BU=" + Total_BU);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_7 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row57Struct implements routines.system.IPersistableRow<row57Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row57Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_6
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_6> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_6 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row55Struct implements routines.system.IPersistableRow<row55Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row55Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_3
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_3> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_3 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_2
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_2> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row32Struct row32 = new row32Struct();
				row35Struct row35 = new row35Struct();
				row55Struct row55 = new row55Struct();
				row57Struct row57 = new row57Struct();
				row37Struct row37 = new row37Struct();
				out10Struct out10 = new out10Struct();
				row36Struct row36 = new row36Struct();

				/**
				 * [tSortRow_2_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_2_SortOut", false);
				start_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row32");
				}

				int tos_count_tSortRow_2_SortOut = 0;

				class Comparablerow32Struct extends row32Struct implements Comparable<Comparablerow32Struct> {

					public int compareTo(Comparablerow32Struct other) {

						if (this.YEAR_NUM == null && other.YEAR_NUM != null) {
							return -1;

						} else if (this.YEAR_NUM != null && other.YEAR_NUM == null) {
							return 1;

						} else if (this.YEAR_NUM != null && other.YEAR_NUM != null) {
							if (!this.YEAR_NUM.equals(other.YEAR_NUM)) {
								return this.YEAR_NUM.compareTo(other.YEAR_NUM);
							}
						}
						if (this.WEEK_OF_YEAR == null && other.WEEK_OF_YEAR != null) {
							return -1;

						} else if (this.WEEK_OF_YEAR != null && other.WEEK_OF_YEAR == null) {
							return 1;

						} else if (this.WEEK_OF_YEAR != null && other.WEEK_OF_YEAR != null) {
							if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR)) {
								return this.WEEK_OF_YEAR.compareTo(other.WEEK_OF_YEAR);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow32Struct> list_tSortRow_2_SortOut = new java.util.ArrayList<Comparablerow32Struct>();

				/**
				 * [tSortRow_2_SortOut begin ] stop
				 */

				/**
				 * [tHashInput_18 begin ] start
				 */

				ok_Hash.put("tHashInput_18", false);
				start_Hash.put("tHashInput_18", System.currentTimeMillis());

				currentComponent = "tHashInput_18";

				int tos_count_tHashInput_18 = 0;

				int nb_line_tHashInput_18 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_18 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out99Struct> tHashFile_tHashInput_18 = mf_tHashInput_18
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_17");
				if (tHashFile_tHashInput_18 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<out99Struct> iterator_tHashInput_18 = tHashFile_tHashInput_18.iterator();
				while (iterator_tHashInput_18.hasNext()) {
					out99Struct next_tHashInput_18 = iterator_tHashInput_18.next();

					row32.YEAR_NUM = next_tHashInput_18.YEAR_NUM;
					row32.MONTH_OF_YEAR = next_tHashInput_18.MONTH_OF_YEAR;
					row32.BU = next_tHashInput_18.BU;
					row32.KPI_ID = next_tHashInput_18.KPI_ID;
					row32.FREQUENCY = next_tHashInput_18.FREQUENCY;
					row32.WEEK_OF_YEAR = next_tHashInput_18.WEEK_OF_YEAR;
					row32.KPI_DESC = next_tHashInput_18.KPI_DESC;
					row32.Weight = next_tHashInput_18.Weight;
					row32.JS = next_tHashInput_18.JS;
					row32.Month_Differnece = next_tHashInput_18.Month_Differnece;
					row32.Angle_Of_KPI = next_tHashInput_18.Angle_Of_KPI;
					row32.Achieved = next_tHashInput_18.Achieved;
					row32.Distance = next_tHashInput_18.Distance;
					row32.Weight_Disc = next_tHashInput_18.Weight_Disc;
					row32.Total_BU = next_tHashInput_18.Total_BU;
					row32.Title = next_tHashInput_18.Title;
					row32.Score = next_tHashInput_18.Score;
					row32.SUB_BU = next_tHashInput_18.SUB_BU;
					row32.Is_weekly = next_tHashInput_18.Is_weekly;

					/**
					 * [tHashInput_18 begin ] stop
					 */

					/**
					 * [tHashInput_18 main ] start
					 */

					currentComponent = "tHashInput_18";

					tos_count_tHashInput_18++;

					/**
					 * [tHashInput_18 main ] stop
					 */

					/**
					 * [tHashInput_18 process_data_begin ] start
					 */

					currentComponent = "tHashInput_18";

					/**
					 * [tHashInput_18 process_data_begin ] stop
					 */

					/**
					 * [tSortRow_2_SortOut main ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortOut";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row32");
					}

					Comparablerow32Struct arrayRowtSortRow_2_SortOut = new Comparablerow32Struct();

					arrayRowtSortRow_2_SortOut.YEAR_NUM = row32.YEAR_NUM;
					arrayRowtSortRow_2_SortOut.MONTH_OF_YEAR = row32.MONTH_OF_YEAR;
					arrayRowtSortRow_2_SortOut.BU = row32.BU;
					arrayRowtSortRow_2_SortOut.KPI_ID = row32.KPI_ID;
					arrayRowtSortRow_2_SortOut.FREQUENCY = row32.FREQUENCY;
					arrayRowtSortRow_2_SortOut.WEEK_OF_YEAR = row32.WEEK_OF_YEAR;
					arrayRowtSortRow_2_SortOut.KPI_DESC = row32.KPI_DESC;
					arrayRowtSortRow_2_SortOut.Weight = row32.Weight;
					arrayRowtSortRow_2_SortOut.JS = row32.JS;
					arrayRowtSortRow_2_SortOut.Month_Differnece = row32.Month_Differnece;
					arrayRowtSortRow_2_SortOut.Angle_Of_KPI = row32.Angle_Of_KPI;
					arrayRowtSortRow_2_SortOut.Achieved = row32.Achieved;
					arrayRowtSortRow_2_SortOut.Distance = row32.Distance;
					arrayRowtSortRow_2_SortOut.Weight_Disc = row32.Weight_Disc;
					arrayRowtSortRow_2_SortOut.Total_BU = row32.Total_BU;
					arrayRowtSortRow_2_SortOut.Title = row32.Title;
					arrayRowtSortRow_2_SortOut.Score = row32.Score;
					arrayRowtSortRow_2_SortOut.SUB_BU = row32.SUB_BU;
					arrayRowtSortRow_2_SortOut.Is_weekly = row32.Is_weekly;
					list_tSortRow_2_SortOut.add(arrayRowtSortRow_2_SortOut);

					tos_count_tSortRow_2_SortOut++;

					/**
					 * [tSortRow_2_SortOut main ] stop
					 */

					/**
					 * [tSortRow_2_SortOut process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortOut";

					/**
					 * [tSortRow_2_SortOut process_data_begin ] stop
					 */

					/**
					 * [tSortRow_2_SortOut process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortOut";

					/**
					 * [tSortRow_2_SortOut process_data_end ] stop
					 */

					/**
					 * [tHashInput_18 process_data_end ] start
					 */

					currentComponent = "tHashInput_18";

					/**
					 * [tHashInput_18 process_data_end ] stop
					 */

					/**
					 * [tHashInput_18 end ] start
					 */

					currentComponent = "tHashInput_18";

					nb_line_tHashInput_18++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_17");

				globalMap.put("tHashInput_18_NB_LINE", nb_line_tHashInput_18);

				ok_Hash.put("tHashInput_18", true);
				end_Hash.put("tHashInput_18", System.currentTimeMillis());

				/**
				 * [tHashInput_18 end ] stop
				 */

				/**
				 * [tSortRow_2_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				row32Struct[] array_tSortRow_2_SortOut = list_tSortRow_2_SortOut.toArray(new Comparablerow32Struct[0]);

				java.util.Arrays.sort(array_tSortRow_2_SortOut);

				globalMap.put("tSortRow_2", array_tSortRow_2_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row32");
				}

				ok_Hash.put("tSortRow_2_SortOut", true);
				end_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_2_SortOut end ] stop
				 */

				/**
				 * [tSortRow_3_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_3_SortOut", false);
				start_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row35");
				}

				int tos_count_tSortRow_3_SortOut = 0;

				class Comparablerow35Struct extends row35Struct implements Comparable<Comparablerow35Struct> {

					public int compareTo(Comparablerow35Struct other) {

						if (this.BU == null && other.BU != null) {
							return -1;

						} else if (this.BU != null && other.BU == null) {
							return 1;

						} else if (this.BU != null && other.BU != null) {
							if (!this.BU.equals(other.BU)) {
								return this.BU.compareTo(other.BU);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow35Struct> list_tSortRow_3_SortOut = new java.util.ArrayList<Comparablerow35Struct>();

				/**
				 * [tSortRow_3_SortOut begin ] stop
				 */

				/**
				 * [tSortRow_2_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_2_SortIn", false);
				start_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortIn";

				int tos_count_tSortRow_2_SortIn = 0;

				row32Struct[] array_tSortRow_2_SortIn = (row32Struct[]) globalMap.remove("tSortRow_2");

				int nb_line_tSortRow_2_SortIn = 0;

				row32Struct current_tSortRow_2_SortIn = null;

				for (int i_tSortRow_2_SortIn = 0; i_tSortRow_2_SortIn < array_tSortRow_2_SortIn.length; i_tSortRow_2_SortIn++) {
					current_tSortRow_2_SortIn = array_tSortRow_2_SortIn[i_tSortRow_2_SortIn];
					row35.YEAR_NUM = current_tSortRow_2_SortIn.YEAR_NUM;
					row35.MONTH_OF_YEAR = current_tSortRow_2_SortIn.MONTH_OF_YEAR;
					row35.BU = current_tSortRow_2_SortIn.BU;
					row35.KPI_ID = current_tSortRow_2_SortIn.KPI_ID;
					row35.FREQUENCY = current_tSortRow_2_SortIn.FREQUENCY;
					row35.WEEK_OF_YEAR = current_tSortRow_2_SortIn.WEEK_OF_YEAR;
					row35.KPI_DESC = current_tSortRow_2_SortIn.KPI_DESC;
					row35.Weight = current_tSortRow_2_SortIn.Weight;
					row35.JS = current_tSortRow_2_SortIn.JS;
					row35.Month_Differnece = current_tSortRow_2_SortIn.Month_Differnece;
					row35.Angle_Of_KPI = current_tSortRow_2_SortIn.Angle_Of_KPI;
					row35.Achieved = current_tSortRow_2_SortIn.Achieved;
					row35.Distance = current_tSortRow_2_SortIn.Distance;
					row35.Weight_Disc = current_tSortRow_2_SortIn.Weight_Disc;
					row35.Total_BU = current_tSortRow_2_SortIn.Total_BU;
					row35.Title = current_tSortRow_2_SortIn.Title;
					row35.Score = current_tSortRow_2_SortIn.Score;
					row35.SUB_BU = current_tSortRow_2_SortIn.SUB_BU;
					row35.Is_weekly = current_tSortRow_2_SortIn.Is_weekly;
					// increase number of line sorted
					nb_line_tSortRow_2_SortIn++;

					/**
					 * [tSortRow_2_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_2_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

					tos_count_tSortRow_2_SortIn++;

					/**
					 * [tSortRow_2_SortIn main ] stop
					 */

					/**
					 * [tSortRow_2_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

					/**
					 * [tSortRow_2_SortIn process_data_begin ] stop
					 */

					/**
					 * [tSortRow_3_SortOut main ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortOut";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row35");
					}

					Comparablerow35Struct arrayRowtSortRow_3_SortOut = new Comparablerow35Struct();

					arrayRowtSortRow_3_SortOut.YEAR_NUM = row35.YEAR_NUM;
					arrayRowtSortRow_3_SortOut.MONTH_OF_YEAR = row35.MONTH_OF_YEAR;
					arrayRowtSortRow_3_SortOut.BU = row35.BU;
					arrayRowtSortRow_3_SortOut.KPI_ID = row35.KPI_ID;
					arrayRowtSortRow_3_SortOut.FREQUENCY = row35.FREQUENCY;
					arrayRowtSortRow_3_SortOut.WEEK_OF_YEAR = row35.WEEK_OF_YEAR;
					arrayRowtSortRow_3_SortOut.KPI_DESC = row35.KPI_DESC;
					arrayRowtSortRow_3_SortOut.Weight = row35.Weight;
					arrayRowtSortRow_3_SortOut.JS = row35.JS;
					arrayRowtSortRow_3_SortOut.Month_Differnece = row35.Month_Differnece;
					arrayRowtSortRow_3_SortOut.Angle_Of_KPI = row35.Angle_Of_KPI;
					arrayRowtSortRow_3_SortOut.Achieved = row35.Achieved;
					arrayRowtSortRow_3_SortOut.Distance = row35.Distance;
					arrayRowtSortRow_3_SortOut.Weight_Disc = row35.Weight_Disc;
					arrayRowtSortRow_3_SortOut.Total_BU = row35.Total_BU;
					arrayRowtSortRow_3_SortOut.Title = row35.Title;
					arrayRowtSortRow_3_SortOut.Score = row35.Score;
					arrayRowtSortRow_3_SortOut.SUB_BU = row35.SUB_BU;
					arrayRowtSortRow_3_SortOut.Is_weekly = row35.Is_weekly;
					list_tSortRow_3_SortOut.add(arrayRowtSortRow_3_SortOut);

					tos_count_tSortRow_3_SortOut++;

					/**
					 * [tSortRow_3_SortOut main ] stop
					 */

					/**
					 * [tSortRow_3_SortOut process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortOut";

					/**
					 * [tSortRow_3_SortOut process_data_begin ] stop
					 */

					/**
					 * [tSortRow_3_SortOut process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortOut";

					/**
					 * [tSortRow_3_SortOut process_data_end ] stop
					 */

					/**
					 * [tSortRow_2_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

					/**
					 * [tSortRow_2_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_2_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

				}

				globalMap.put("tSortRow_2_SortIn_NB_LINE", nb_line_tSortRow_2_SortIn);

				ok_Hash.put("tSortRow_2_SortIn", true);
				end_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_2_SortIn end ] stop
				 */

				/**
				 * [tSortRow_3_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortOut";

				row35Struct[] array_tSortRow_3_SortOut = list_tSortRow_3_SortOut.toArray(new Comparablerow35Struct[0]);

				java.util.Arrays.sort(array_tSortRow_3_SortOut);

				globalMap.put("tSortRow_3", array_tSortRow_3_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row35");
				}

				ok_Hash.put("tSortRow_3_SortOut", true);
				end_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_3_SortOut end ] stop
				 */

				/**
				 * [tSortRow_6_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_6_SortOut", false);
				start_Hash.put("tSortRow_6_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_6";

				currentComponent = "tSortRow_6_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row55");
				}

				int tos_count_tSortRow_6_SortOut = 0;

				class Comparablerow55Struct extends row55Struct implements Comparable<Comparablerow55Struct> {

					public int compareTo(Comparablerow55Struct other) {

						if (this.Distance == null && other.Distance != null) {
							return 1;

						} else if (this.Distance != null && other.Distance == null) {
							return -1;

						} else if (this.Distance != null && other.Distance != null) {
							if (!this.Distance.equals(other.Distance)) {
								return other.Distance.compareTo(this.Distance);
							}
						}
						if (this.Angle_Of_KPI == null && other.Angle_Of_KPI != null) {
							return 1;

						} else if (this.Angle_Of_KPI != null && other.Angle_Of_KPI == null) {
							return -1;

						} else if (this.Angle_Of_KPI != null && other.Angle_Of_KPI != null) {
							if (!this.Angle_Of_KPI.equals(other.Angle_Of_KPI)) {
								return other.Angle_Of_KPI.compareTo(this.Angle_Of_KPI);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow55Struct> list_tSortRow_6_SortOut = new java.util.ArrayList<Comparablerow55Struct>();

				/**
				 * [tSortRow_6_SortOut begin ] stop
				 */

				/**
				 * [tSortRow_3_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_3_SortIn", false);
				start_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortIn";

				int tos_count_tSortRow_3_SortIn = 0;

				row35Struct[] array_tSortRow_3_SortIn = (row35Struct[]) globalMap.remove("tSortRow_3");

				int nb_line_tSortRow_3_SortIn = 0;

				row35Struct current_tSortRow_3_SortIn = null;

				for (int i_tSortRow_3_SortIn = 0; i_tSortRow_3_SortIn < array_tSortRow_3_SortIn.length; i_tSortRow_3_SortIn++) {
					current_tSortRow_3_SortIn = array_tSortRow_3_SortIn[i_tSortRow_3_SortIn];
					row55.YEAR_NUM = current_tSortRow_3_SortIn.YEAR_NUM;
					row55.MONTH_OF_YEAR = current_tSortRow_3_SortIn.MONTH_OF_YEAR;
					row55.BU = current_tSortRow_3_SortIn.BU;
					row55.KPI_ID = current_tSortRow_3_SortIn.KPI_ID;
					row55.FREQUENCY = current_tSortRow_3_SortIn.FREQUENCY;
					row55.WEEK_OF_YEAR = current_tSortRow_3_SortIn.WEEK_OF_YEAR;
					row55.KPI_DESC = current_tSortRow_3_SortIn.KPI_DESC;
					row55.Weight = current_tSortRow_3_SortIn.Weight;
					row55.JS = current_tSortRow_3_SortIn.JS;
					row55.Month_Differnece = current_tSortRow_3_SortIn.Month_Differnece;
					row55.Angle_Of_KPI = current_tSortRow_3_SortIn.Angle_Of_KPI;
					row55.Achieved = current_tSortRow_3_SortIn.Achieved;
					row55.Distance = current_tSortRow_3_SortIn.Distance;
					row55.Weight_Disc = current_tSortRow_3_SortIn.Weight_Disc;
					row55.Total_BU = current_tSortRow_3_SortIn.Total_BU;
					row55.Title = current_tSortRow_3_SortIn.Title;
					row55.Score = current_tSortRow_3_SortIn.Score;
					row55.SUB_BU = current_tSortRow_3_SortIn.SUB_BU;
					row55.Is_weekly = current_tSortRow_3_SortIn.Is_weekly;
					// increase number of line sorted
					nb_line_tSortRow_3_SortIn++;

					/**
					 * [tSortRow_3_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_3_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

					tos_count_tSortRow_3_SortIn++;

					/**
					 * [tSortRow_3_SortIn main ] stop
					 */

					/**
					 * [tSortRow_3_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

					/**
					 * [tSortRow_3_SortIn process_data_begin ] stop
					 */

					/**
					 * [tSortRow_6_SortOut main ] start
					 */

					currentVirtualComponent = "tSortRow_6";

					currentComponent = "tSortRow_6_SortOut";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row55");
					}

					Comparablerow55Struct arrayRowtSortRow_6_SortOut = new Comparablerow55Struct();

					arrayRowtSortRow_6_SortOut.YEAR_NUM = row55.YEAR_NUM;
					arrayRowtSortRow_6_SortOut.MONTH_OF_YEAR = row55.MONTH_OF_YEAR;
					arrayRowtSortRow_6_SortOut.BU = row55.BU;
					arrayRowtSortRow_6_SortOut.KPI_ID = row55.KPI_ID;
					arrayRowtSortRow_6_SortOut.FREQUENCY = row55.FREQUENCY;
					arrayRowtSortRow_6_SortOut.WEEK_OF_YEAR = row55.WEEK_OF_YEAR;
					arrayRowtSortRow_6_SortOut.KPI_DESC = row55.KPI_DESC;
					arrayRowtSortRow_6_SortOut.Weight = row55.Weight;
					arrayRowtSortRow_6_SortOut.JS = row55.JS;
					arrayRowtSortRow_6_SortOut.Month_Differnece = row55.Month_Differnece;
					arrayRowtSortRow_6_SortOut.Angle_Of_KPI = row55.Angle_Of_KPI;
					arrayRowtSortRow_6_SortOut.Achieved = row55.Achieved;
					arrayRowtSortRow_6_SortOut.Distance = row55.Distance;
					arrayRowtSortRow_6_SortOut.Weight_Disc = row55.Weight_Disc;
					arrayRowtSortRow_6_SortOut.Total_BU = row55.Total_BU;
					arrayRowtSortRow_6_SortOut.Title = row55.Title;
					arrayRowtSortRow_6_SortOut.Score = row55.Score;
					arrayRowtSortRow_6_SortOut.SUB_BU = row55.SUB_BU;
					arrayRowtSortRow_6_SortOut.Is_weekly = row55.Is_weekly;
					list_tSortRow_6_SortOut.add(arrayRowtSortRow_6_SortOut);

					tos_count_tSortRow_6_SortOut++;

					/**
					 * [tSortRow_6_SortOut main ] stop
					 */

					/**
					 * [tSortRow_6_SortOut process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_6";

					currentComponent = "tSortRow_6_SortOut";

					/**
					 * [tSortRow_6_SortOut process_data_begin ] stop
					 */

					/**
					 * [tSortRow_6_SortOut process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_6";

					currentComponent = "tSortRow_6_SortOut";

					/**
					 * [tSortRow_6_SortOut process_data_end ] stop
					 */

					/**
					 * [tSortRow_3_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

					/**
					 * [tSortRow_3_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_3_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

				}

				globalMap.put("tSortRow_3_SortIn_NB_LINE", nb_line_tSortRow_3_SortIn);

				ok_Hash.put("tSortRow_3_SortIn", true);
				end_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_3_SortIn end ] stop
				 */

				/**
				 * [tSortRow_6_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_6";

				currentComponent = "tSortRow_6_SortOut";

				row55Struct[] array_tSortRow_6_SortOut = list_tSortRow_6_SortOut.toArray(new Comparablerow55Struct[0]);

				java.util.Arrays.sort(array_tSortRow_6_SortOut);

				globalMap.put("tSortRow_6", array_tSortRow_6_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row55");
				}

				ok_Hash.put("tSortRow_6_SortOut", true);
				end_Hash.put("tSortRow_6_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_6_SortOut end ] stop
				 */

				/**
				 * [tAggregateRow_7_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_7_AGGOUT", false);
				start_Hash.put("tAggregateRow_7_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_7";

				currentComponent = "tAggregateRow_7_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row57");
				}

				int tos_count_tAggregateRow_7_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_7 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_7 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_7 utilClass_tAggregateRow_7 = new UtilClass_tAggregateRow_7();

				class AggOperationStruct_tAggregateRow_7 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String YEAR_NUM;
					String BU;
					String WEEK_OF_YEAR;
					String JS;
					Double Angle_Of_KPI;
					Double Distance;
					String Total_BU;
					StringBuilder KPI_ID_list = new StringBuilder();
					boolean KPI_ID_list_firstEmpty = false;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

							result = prime * result + ((this.BU == null) ? 0 : this.BU.hashCode());

							result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

							result = prime * result + ((this.JS == null) ? 0 : this.JS.hashCode());

							result = prime * result + ((this.Angle_Of_KPI == null) ? 0 : this.Angle_Of_KPI.hashCode());

							result = prime * result + ((this.Distance == null) ? 0 : this.Distance.hashCode());

							result = prime * result + ((this.Total_BU == null) ? 0 : this.Total_BU.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_7 other = (AggOperationStruct_tAggregateRow_7) obj;

						if (this.YEAR_NUM == null) {
							if (other.YEAR_NUM != null)
								return false;
						} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))
							return false;

						if (this.BU == null) {
							if (other.BU != null)
								return false;
						} else if (!this.BU.equals(other.BU))
							return false;

						if (this.WEEK_OF_YEAR == null) {
							if (other.WEEK_OF_YEAR != null)
								return false;
						} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))
							return false;

						if (this.JS == null) {
							if (other.JS != null)
								return false;
						} else if (!this.JS.equals(other.JS))
							return false;

						if (this.Angle_Of_KPI == null) {
							if (other.Angle_Of_KPI != null)
								return false;
						} else if (!this.Angle_Of_KPI.equals(other.Angle_Of_KPI))
							return false;

						if (this.Distance == null) {
							if (other.Distance != null)
								return false;
						} else if (!this.Distance.equals(other.Distance))
							return false;

						if (this.Total_BU == null) {
							if (other.Total_BU != null)
								return false;
						} else if (!this.Total_BU.equals(other.Total_BU))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_7 operation_result_tAggregateRow_7 = null;
				AggOperationStruct_tAggregateRow_7 operation_finder_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();
				java.util.Map<AggOperationStruct_tAggregateRow_7, AggOperationStruct_tAggregateRow_7> hash_tAggregateRow_7 = new java.util.HashMap<AggOperationStruct_tAggregateRow_7, AggOperationStruct_tAggregateRow_7>();

				String delimiter_tAggregateRow_7 = ",";

				/**
				 * [tAggregateRow_7_AGGOUT begin ] stop
				 */

				/**
				 * [tSortRow_6_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_6_SortIn", false);
				start_Hash.put("tSortRow_6_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_6";

				currentComponent = "tSortRow_6_SortIn";

				int tos_count_tSortRow_6_SortIn = 0;

				row55Struct[] array_tSortRow_6_SortIn = (row55Struct[]) globalMap.remove("tSortRow_6");

				int nb_line_tSortRow_6_SortIn = 0;

				row55Struct current_tSortRow_6_SortIn = null;

				for (int i_tSortRow_6_SortIn = 0; i_tSortRow_6_SortIn < array_tSortRow_6_SortIn.length; i_tSortRow_6_SortIn++) {
					current_tSortRow_6_SortIn = array_tSortRow_6_SortIn[i_tSortRow_6_SortIn];
					row57.YEAR_NUM = current_tSortRow_6_SortIn.YEAR_NUM;
					row57.MONTH_OF_YEAR = current_tSortRow_6_SortIn.MONTH_OF_YEAR;
					row57.BU = current_tSortRow_6_SortIn.BU;
					row57.KPI_ID = current_tSortRow_6_SortIn.KPI_ID;
					row57.FREQUENCY = current_tSortRow_6_SortIn.FREQUENCY;
					row57.WEEK_OF_YEAR = current_tSortRow_6_SortIn.WEEK_OF_YEAR;
					row57.KPI_DESC = current_tSortRow_6_SortIn.KPI_DESC;
					row57.Weight = current_tSortRow_6_SortIn.Weight;
					row57.JS = current_tSortRow_6_SortIn.JS;
					row57.Month_Differnece = current_tSortRow_6_SortIn.Month_Differnece;
					row57.Angle_Of_KPI = current_tSortRow_6_SortIn.Angle_Of_KPI;
					row57.Achieved = current_tSortRow_6_SortIn.Achieved;
					row57.Distance = current_tSortRow_6_SortIn.Distance;
					row57.Weight_Disc = current_tSortRow_6_SortIn.Weight_Disc;
					row57.Total_BU = current_tSortRow_6_SortIn.Total_BU;
					row57.Title = current_tSortRow_6_SortIn.Title;
					row57.Score = current_tSortRow_6_SortIn.Score;
					row57.SUB_BU = current_tSortRow_6_SortIn.SUB_BU;
					row57.Is_weekly = current_tSortRow_6_SortIn.Is_weekly;
					// increase number of line sorted
					nb_line_tSortRow_6_SortIn++;

					/**
					 * [tSortRow_6_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_6_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_6";

					currentComponent = "tSortRow_6_SortIn";

					tos_count_tSortRow_6_SortIn++;

					/**
					 * [tSortRow_6_SortIn main ] stop
					 */

					/**
					 * [tSortRow_6_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_6";

					currentComponent = "tSortRow_6_SortIn";

					/**
					 * [tSortRow_6_SortIn process_data_begin ] stop
					 */

					/**
					 * [tAggregateRow_7_AGGOUT main ] start
					 */

					currentVirtualComponent = "tAggregateRow_7";

					currentComponent = "tAggregateRow_7_AGGOUT";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row57");
					}

					operation_finder_tAggregateRow_7.YEAR_NUM = row57.YEAR_NUM;
					operation_finder_tAggregateRow_7.BU = row57.BU;
					operation_finder_tAggregateRow_7.WEEK_OF_YEAR = row57.WEEK_OF_YEAR;
					operation_finder_tAggregateRow_7.JS = row57.JS;
					operation_finder_tAggregateRow_7.Angle_Of_KPI = row57.Angle_Of_KPI;
					operation_finder_tAggregateRow_7.Distance = row57.Distance;
					operation_finder_tAggregateRow_7.Total_BU = row57.Total_BU;

					operation_finder_tAggregateRow_7.hashCodeDirty = true;

					operation_result_tAggregateRow_7 = hash_tAggregateRow_7.get(operation_finder_tAggregateRow_7);

					if (operation_result_tAggregateRow_7 == null) { // G_OutMain_AggR_001

						operation_result_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();

						operation_result_tAggregateRow_7.YEAR_NUM = operation_finder_tAggregateRow_7.YEAR_NUM;
						operation_result_tAggregateRow_7.BU = operation_finder_tAggregateRow_7.BU;
						operation_result_tAggregateRow_7.WEEK_OF_YEAR = operation_finder_tAggregateRow_7.WEEK_OF_YEAR;
						operation_result_tAggregateRow_7.JS = operation_finder_tAggregateRow_7.JS;
						operation_result_tAggregateRow_7.Angle_Of_KPI = operation_finder_tAggregateRow_7.Angle_Of_KPI;
						operation_result_tAggregateRow_7.Distance = operation_finder_tAggregateRow_7.Distance;
						operation_result_tAggregateRow_7.Total_BU = operation_finder_tAggregateRow_7.Total_BU;

						hash_tAggregateRow_7.put(operation_result_tAggregateRow_7, operation_result_tAggregateRow_7);

					} // G_OutMain_AggR_001

					if (operation_result_tAggregateRow_7.KPI_ID_list.length() > 0) {
						operation_result_tAggregateRow_7.KPI_ID_list.append(",");
					} else if (operation_result_tAggregateRow_7.KPI_ID_list_firstEmpty) {
						operation_result_tAggregateRow_7.KPI_ID_list.append(",");
					}
					if (operation_result_tAggregateRow_7.KPI_ID_list != null) {
						if (operation_result_tAggregateRow_7.KPI_ID_list_firstEmpty == false
								&& ("").equals(String.valueOf(row57.KPI_ID))) {
							operation_result_tAggregateRow_7.KPI_ID_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_7.KPI_ID_list = operation_result_tAggregateRow_7.KPI_ID_list
								.append(String.valueOf(row57.KPI_ID));
					}

					tos_count_tAggregateRow_7_AGGOUT++;

					/**
					 * [tAggregateRow_7_AGGOUT main ] stop
					 */

					/**
					 * [tAggregateRow_7_AGGOUT process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_7";

					currentComponent = "tAggregateRow_7_AGGOUT";

					/**
					 * [tAggregateRow_7_AGGOUT process_data_begin ] stop
					 */

					/**
					 * [tAggregateRow_7_AGGOUT process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_7";

					currentComponent = "tAggregateRow_7_AGGOUT";

					/**
					 * [tAggregateRow_7_AGGOUT process_data_end ] stop
					 */

					/**
					 * [tSortRow_6_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_6";

					currentComponent = "tSortRow_6_SortIn";

					/**
					 * [tSortRow_6_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_6_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_6";

					currentComponent = "tSortRow_6_SortIn";

				}

				globalMap.put("tSortRow_6_SortIn_NB_LINE", nb_line_tSortRow_6_SortIn);

				ok_Hash.put("tSortRow_6_SortIn", true);
				end_Hash.put("tSortRow_6_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_6_SortIn end ] stop
				 */

				/**
				 * [tAggregateRow_7_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_7";

				currentComponent = "tAggregateRow_7_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row57");
				}

				ok_Hash.put("tAggregateRow_7_AGGOUT", true);
				end_Hash.put("tAggregateRow_7_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_7_AGGOUT end ] stop
				 */

				/**
				 * [tHashOutput_18 begin ] start
				 */

				ok_Hash.put("tHashOutput_18", false);
				start_Hash.put("tHashOutput_18", System.currentTimeMillis());

				currentComponent = "tHashOutput_18";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row36");
				}

				int tos_count_tHashOutput_18 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_18 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row36Struct> tHashFile_tHashOutput_18 = null;
				String hashKey_tHashOutput_18 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_18";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_18)) {
					if (mf_tHashOutput_18.getResourceMap().get(hashKey_tHashOutput_18) == null) {
						mf_tHashOutput_18.getResourceMap().put(hashKey_tHashOutput_18,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row36Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_18 = mf_tHashOutput_18.getResourceMap().get(hashKey_tHashOutput_18);
					} else {
						tHashFile_tHashOutput_18 = mf_tHashOutput_18.getResourceMap().get(hashKey_tHashOutput_18);
					}
				}
				int nb_line_tHashOutput_18 = 0;

				/**
				 * [tHashOutput_18 begin ] stop
				 */

				/**
				 * [tNormalize_1 begin ] start
				 */

				ok_Hash.put("tNormalize_1", false);
				start_Hash.put("tNormalize_1", System.currentTimeMillis());

				currentComponent = "tNormalize_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out10");
				}

				int tos_count_tNormalize_1 = 0;

				int lastNoEmptyIndex_tNormalize_1 = 0;
				int nb_line_tNormalize_1 = 0;
				String tmp_tNormalize_1 = null;
				StringBuilder currentRecord_tNormalize_1 = null;
				String[] normalizeRecord_tNormalize_1 = null;
				java.util.Set<String> recordSet_tNormalize_1 = new java.util.HashSet<String>();

				if (((String) ",").length() == 0) {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				/**
				 * [tNormalize_1 begin ] stop
				 */

				/**
				 * [tMap_12 begin ] start
				 */

				ok_Hash.put("tMap_12", false);
				start_Hash.put("tMap_12", System.currentTimeMillis());

				currentComponent = "tMap_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row37");
				}

				int tos_count_tMap_12 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_12__Struct {
				}
				Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out10Struct out10_tmp = new out10Struct();
// ###############################

				/**
				 * [tMap_12 begin ] stop
				 */

				/**
				 * [tAggregateRow_7_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_7_AGGIN", false);
				start_Hash.put("tAggregateRow_7_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_7";

				currentComponent = "tAggregateRow_7_AGGIN";

				int tos_count_tAggregateRow_7_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_7> values_tAggregateRow_7 = hash_tAggregateRow_7
						.values();

				globalMap.put("tAggregateRow_7_NB_LINE", values_tAggregateRow_7.size());

				for (AggOperationStruct_tAggregateRow_7 aggregated_row_tAggregateRow_7 : values_tAggregateRow_7) { // G_AggR_600

					/**
					 * [tAggregateRow_7_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_7_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_7";

					currentComponent = "tAggregateRow_7_AGGIN";

					row37.YEAR_NUM = aggregated_row_tAggregateRow_7.YEAR_NUM;

					row37.WEEK_OF_YEAR = aggregated_row_tAggregateRow_7.WEEK_OF_YEAR;

					row37.KPI_ID = aggregated_row_tAggregateRow_7.KPI_ID_list.toString();

					row37.JS = aggregated_row_tAggregateRow_7.JS;

					row37.Angle_Of_KPI = aggregated_row_tAggregateRow_7.Angle_Of_KPI;

					row37.Distance = aggregated_row_tAggregateRow_7.Distance;

					row37.BU = aggregated_row_tAggregateRow_7.BU;

					row37.Total_BU = aggregated_row_tAggregateRow_7.Total_BU;

					tos_count_tAggregateRow_7_AGGIN++;

					/**
					 * [tAggregateRow_7_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_7_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_7";

					currentComponent = "tAggregateRow_7_AGGIN";

					/**
					 * [tAggregateRow_7_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tMap_12 main ] start
					 */

					currentComponent = "tMap_12";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row37");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_12 = false;
					boolean mainRowRejected_tMap_12 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
						// ###############################
						// # Output tables

						out10 = null;

// # Output table : 'out10'
						out10_tmp.YEAR_NUM = row37.YEAR_NUM;
						out10_tmp.WEEK_OF_YEAR = row37.WEEK_OF_YEAR;
						out10_tmp.KPI_ID = row37.KPI_ID;
						out10_tmp.JS = row37.JS;
						out10_tmp.Angle_Of_KPI = row37.Angle_Of_KPI;
						out10_tmp.Distance = row37.Distance;
						out10_tmp.Cluster = (row37.KPI_ID.contains(",")) ? Numeric.sequence("Cluster", 1, 1) : -1;
						out10_tmp.BU = row37.Total_BU;
						out10 = out10_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_12 = false;

					tos_count_tMap_12++;

					/**
					 * [tMap_12 main ] stop
					 */

					/**
					 * [tMap_12 process_data_begin ] start
					 */

					currentComponent = "tMap_12";

					/**
					 * [tMap_12 process_data_begin ] stop
					 */
// Start of branch "out10"
					if (out10 != null) {

						/**
						 * [tNormalize_1 main ] start
						 */

						currentComponent = "tNormalize_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "out10");
						}

						normalizeRecord_tNormalize_1 = new String[1];
						if (out10.KPI_ID != null) {
							if ("".equals(out10.KPI_ID)) {
								normalizeRecord_tNormalize_1[0] = "";
							} else {

								normalizeRecord_tNormalize_1 = out10.KPI_ID.split(",", -1);

							}
						}
						lastNoEmptyIndex_tNormalize_1 = normalizeRecord_tNormalize_1.length;

						for (int i_tNormalize_1 = 0; i_tNormalize_1 < lastNoEmptyIndex_tNormalize_1; i_tNormalize_1++) {

							currentRecord_tNormalize_1 = new StringBuilder();
							nb_line_tNormalize_1++;

							row36.YEAR_NUM = out10.YEAR_NUM;

							row36.WEEK_OF_YEAR = out10.WEEK_OF_YEAR;

							row36.KPI_ID = normalizeRecord_tNormalize_1[i_tNormalize_1];

							row36.JS = out10.JS;

							row36.Angle_Of_KPI = out10.Angle_Of_KPI;

							row36.Distance = out10.Distance;

							row36.Cluster = out10.Cluster;

							row36.BU = out10.BU;

							tos_count_tNormalize_1++;

							/**
							 * [tNormalize_1 main ] stop
							 */

							/**
							 * [tNormalize_1 process_data_begin ] start
							 */

							currentComponent = "tNormalize_1";

							/**
							 * [tNormalize_1 process_data_begin ] stop
							 */

							/**
							 * [tHashOutput_18 main ] start
							 */

							currentComponent = "tHashOutput_18";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row36");
							}

							row36Struct oneRow_tHashOutput_18 = new row36Struct();

							oneRow_tHashOutput_18.YEAR_NUM = row36.YEAR_NUM;
							oneRow_tHashOutput_18.WEEK_OF_YEAR = row36.WEEK_OF_YEAR;
							oneRow_tHashOutput_18.KPI_ID = row36.KPI_ID;
							oneRow_tHashOutput_18.JS = row36.JS;
							oneRow_tHashOutput_18.Angle_Of_KPI = row36.Angle_Of_KPI;
							oneRow_tHashOutput_18.Distance = row36.Distance;
							oneRow_tHashOutput_18.Cluster = row36.Cluster;
							oneRow_tHashOutput_18.BU = row36.BU;

							tHashFile_tHashOutput_18.put(oneRow_tHashOutput_18);
							nb_line_tHashOutput_18++;

							tos_count_tHashOutput_18++;

							/**
							 * [tHashOutput_18 main ] stop
							 */

							/**
							 * [tHashOutput_18 process_data_begin ] start
							 */

							currentComponent = "tHashOutput_18";

							/**
							 * [tHashOutput_18 process_data_begin ] stop
							 */

							/**
							 * [tHashOutput_18 process_data_end ] start
							 */

							currentComponent = "tHashOutput_18";

							/**
							 * [tHashOutput_18 process_data_end ] stop
							 */
							// end for
						}

						/**
						 * [tNormalize_1 process_data_end ] start
						 */

						currentComponent = "tNormalize_1";

						/**
						 * [tNormalize_1 process_data_end ] stop
						 */

					} // End of branch "out10"

					/**
					 * [tMap_12 process_data_end ] start
					 */

					currentComponent = "tMap_12";

					/**
					 * [tMap_12 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_7_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_7";

					currentComponent = "tAggregateRow_7_AGGIN";

					/**
					 * [tAggregateRow_7_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_7_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_7";

					currentComponent = "tAggregateRow_7_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_7_AGGIN", true);
				end_Hash.put("tAggregateRow_7_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_7_AGGIN end ] stop
				 */

				/**
				 * [tMap_12 end ] start
				 */

				currentComponent = "tMap_12";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row37");
				}

				ok_Hash.put("tMap_12", true);
				end_Hash.put("tMap_12", System.currentTimeMillis());

				/**
				 * [tMap_12 end ] stop
				 */

				/**
				 * [tNormalize_1 end ] start
				 */

				currentComponent = "tNormalize_1";

				globalMap.put("tNormalize_1_NB_LINE", nb_line_tNormalize_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out10");
				}

				ok_Hash.put("tNormalize_1", true);
				end_Hash.put("tNormalize_1", System.currentTimeMillis());

				/**
				 * [tNormalize_1 end ] stop
				 */

				/**
				 * [tHashOutput_18 end ] start
				 */

				currentComponent = "tHashOutput_18";

				globalMap.put("tHashOutput_18_NB_LINE", nb_line_tHashOutput_18);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row36");
				}

				ok_Hash.put("tHashOutput_18", true);
				end_Hash.put("tHashOutput_18", System.currentTimeMillis());

				/**
				 * [tHashOutput_18 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_18:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
			}

			tHashInput_21Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_7_AGGIN"
			globalMap.remove("tAggregateRow_7");

			// free memory for "tSortRow_6_SortIn"
			globalMap.remove("tSortRow_6");

			// free memory for "tSortRow_3_SortIn"
			globalMap.remove("tSortRow_3");

			// free memory for "tSortRow_2_SortIn"
			globalMap.remove("tSortRow_2");

			try {

				/**
				 * [tHashInput_18 finally ] start
				 */

				currentComponent = "tHashInput_18";

				/**
				 * [tHashInput_18 finally ] stop
				 */

				/**
				 * [tSortRow_2_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				/**
				 * [tSortRow_2_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_2_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortIn";

				/**
				 * [tSortRow_2_SortIn finally ] stop
				 */

				/**
				 * [tSortRow_3_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortOut";

				/**
				 * [tSortRow_3_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_3_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortIn";

				/**
				 * [tSortRow_3_SortIn finally ] stop
				 */

				/**
				 * [tSortRow_6_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_6";

				currentComponent = "tSortRow_6_SortOut";

				/**
				 * [tSortRow_6_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_6_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_6";

				currentComponent = "tSortRow_6_SortIn";

				/**
				 * [tSortRow_6_SortIn finally ] stop
				 */

				/**
				 * [tAggregateRow_7_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_7";

				currentComponent = "tAggregateRow_7_AGGOUT";

				/**
				 * [tAggregateRow_7_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_7_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_7";

				currentComponent = "tAggregateRow_7_AGGIN";

				/**
				 * [tAggregateRow_7_AGGIN finally ] stop
				 */

				/**
				 * [tMap_12 finally ] start
				 */

				currentComponent = "tMap_12";

				/**
				 * [tMap_12 finally ] stop
				 */

				/**
				 * [tNormalize_1 finally ] start
				 */

				currentComponent = "tNormalize_1";

				/**
				 * [tNormalize_1 finally ] stop
				 */

				/**
				 * [tHashOutput_18 finally ] start
				 */

				currentComponent = "tHashOutput_18";

				/**
				 * [tHashOutput_18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_18_SUBPROCESS_STATE", 1);
	}

	public static class out11Struct implements routines.system.IPersistableRow<out11Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.Is_weekly = readString(dis);

					this.BU = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Title = readString(dis);

					this.JS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.JS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Title=" + Title);
			sb.append(",JS=" + JS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row38Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tHashInput_21Struct
			implements routines.system.IPersistableRow<after_tHashInput_21Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					this.JS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					this.Title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.SUB_BU = readString(dis);

					this.Is_weekly = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// String

				writeString(this.JS, dos);

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// String

				writeString(this.Title, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Is_weekly, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tHashInput_21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tHashInput_19Process(globalMap);

				row38Struct row38 = new row38Struct();
				out11Struct out11 = new out11Struct();

				/**
				 * [tHashOutput_19 begin ] start
				 */

				ok_Hash.put("tHashOutput_19", false);
				start_Hash.put("tHashOutput_19", System.currentTimeMillis());

				currentComponent = "tHashOutput_19";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out11");
				}

				int tos_count_tHashOutput_19 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_19 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out11Struct> tHashFile_tHashOutput_19 = null;
				String hashKey_tHashOutput_19 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_19";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_19)) {
					if (mf_tHashOutput_19.getResourceMap().get(hashKey_tHashOutput_19) == null) {
						mf_tHashOutput_19.getResourceMap().put(hashKey_tHashOutput_19,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out11Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_19 = mf_tHashOutput_19.getResourceMap().get(hashKey_tHashOutput_19);
					} else {
						tHashFile_tHashOutput_19 = mf_tHashOutput_19.getResourceMap().get(hashKey_tHashOutput_19);
					}
				}
				int nb_line_tHashOutput_19 = 0;

				/**
				 * [tHashOutput_19 begin ] stop
				 */

				/**
				 * [tMap_13 begin ] start
				 */

				ok_Hash.put("tMap_13", false);
				start_Hash.put("tMap_13", System.currentTimeMillis());

				currentComponent = "tMap_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row38");
				}

				int tos_count_tMap_13 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct> tHash_Lookup_row39 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) globalMap
						.get("tHash_Lookup_row39"));

				row39Struct row39HashKey = new row39Struct();
				row39Struct row39Default = new row39Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_13__Struct {
				}
				Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out11Struct out11_tmp = new out11Struct();
// ###############################

				/**
				 * [tMap_13 begin ] stop
				 */

				/**
				 * [tHashInput_21 begin ] start
				 */

				ok_Hash.put("tHashInput_21", false);
				start_Hash.put("tHashInput_21", System.currentTimeMillis());

				currentComponent = "tHashInput_21";

				int tos_count_tHashInput_21 = 0;

				int nb_line_tHashInput_21 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_21 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out99Struct> tHashFile_tHashInput_21 = mf_tHashInput_21
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_17");
				if (tHashFile_tHashInput_21 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<out99Struct> iterator_tHashInput_21 = tHashFile_tHashInput_21.iterator();
				while (iterator_tHashInput_21.hasNext()) {
					out99Struct next_tHashInput_21 = iterator_tHashInput_21.next();

					row38.YEAR_NUM = next_tHashInput_21.YEAR_NUM;
					row38.MONTH_OF_YEAR = next_tHashInput_21.MONTH_OF_YEAR;
					row38.BU = next_tHashInput_21.BU;
					row38.KPI_ID = next_tHashInput_21.KPI_ID;
					row38.FREQUENCY = next_tHashInput_21.FREQUENCY;
					row38.WEEK_OF_YEAR = next_tHashInput_21.WEEK_OF_YEAR;
					row38.KPI_DESC = next_tHashInput_21.KPI_DESC;
					row38.Weight = next_tHashInput_21.Weight;
					row38.JS = next_tHashInput_21.JS;
					row38.Month_Differnece = next_tHashInput_21.Month_Differnece;
					row38.Angle_Of_KPI = next_tHashInput_21.Angle_Of_KPI;
					row38.Achieved = next_tHashInput_21.Achieved;
					row38.Distance = next_tHashInput_21.Distance;
					row38.Weight_Disc = next_tHashInput_21.Weight_Disc;
					row38.Total_BU = next_tHashInput_21.Total_BU;
					row38.Title = next_tHashInput_21.Title;
					row38.Score = next_tHashInput_21.Score;
					row38.SUB_BU = next_tHashInput_21.SUB_BU;
					row38.Is_weekly = next_tHashInput_21.Is_weekly;

					/**
					 * [tHashInput_21 begin ] stop
					 */

					/**
					 * [tHashInput_21 main ] start
					 */

					currentComponent = "tHashInput_21";

					tos_count_tHashInput_21++;

					/**
					 * [tHashInput_21 main ] stop
					 */

					/**
					 * [tHashInput_21 process_data_begin ] start
					 */

					currentComponent = "tHashInput_21";

					/**
					 * [tHashInput_21 process_data_begin ] stop
					 */

					/**
					 * [tMap_13 main ] start
					 */

					currentComponent = "tMap_13";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row38");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_13 = false;
					boolean mainRowRejected_tMap_13 = false;

					///////////////////////////////////////////////
					// Starting Lookup Table "row39"
					///////////////////////////////////////////////

					boolean forceLooprow39 = false;

					row39Struct row39ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_13) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_13 = false;

						row39HashKey.YEAR_NUM = row38.YEAR_NUM;

						row39HashKey.WEEK_OF_YEAR = row38.WEEK_OF_YEAR;

						row39HashKey.KPI_ID = row38.KPI_ID;

						row39HashKey.BU = row38.Total_BU;

						row39HashKey.hashCodeDirty = true;

						tHash_Lookup_row39.lookup(row39HashKey);

						if (!tHash_Lookup_row39.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_13 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					if (tHash_Lookup_row39 != null && tHash_Lookup_row39.getCount(row39HashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
						// 'row39' and it contains more one result from keys : row39.YEAR_NUM = '" +
						// row39HashKey.YEAR_NUM + "', row39.WEEK_OF_YEAR = '" +
						// row39HashKey.WEEK_OF_YEAR + "', row39.KPI_ID = '" + row39HashKey.KPI_ID + "',
						// row39.BU = '" + row39HashKey.BU + "'");
					} // G 071

					row39Struct row39 = null;

					row39Struct fromLookup_row39 = null;
					row39 = row39Default;

					if (tHash_Lookup_row39 != null && tHash_Lookup_row39.hasNext()) { // G 099

						fromLookup_row39 = tHash_Lookup_row39.next();

					} // G 099

					if (fromLookup_row39 != null) {
						row39 = fromLookup_row39;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
						// ###############################
						// # Output tables

						out11 = null;

						if (!rejectedInnerJoin_tMap_13) {

// # Output table : 'out11'
							out11_tmp.YEAR_NUM = row38.YEAR_NUM;
							out11_tmp.MONTH_OF_YEAR = row38.MONTH_OF_YEAR;
							out11_tmp.KPI_ID = row38.KPI_ID;
							out11_tmp.FREQUENCY = row38.FREQUENCY;
							out11_tmp.WEEK_OF_YEAR = row38.WEEK_OF_YEAR;
							out11_tmp.Is_weekly = row38.Is_weekly;
							out11_tmp.BU = row38.BU;
							out11_tmp.KPI_DESC = row38.KPI_DESC;
							out11_tmp.Weight = row38.Weight * 100.0;
							out11_tmp.Month_Differnece = row38.Month_Differnece;
							out11_tmp.Angle_Of_KPI = row38.Angle_Of_KPI;
							out11_tmp.Achieved = row38.Achieved;
							out11_tmp.Distance = row38.Distance;
							out11_tmp.Weight_Disc = row38.Weight_Disc;
							out11_tmp.Total_BU = row38.Total_BU;
							out11_tmp.Score = row38.Score;
							out11_tmp.Cluster_ID = row39.Cluster;
							out11_tmp.SUB_BU = row38.SUB_BU;
							out11_tmp.Title = row38.Title;
							out11_tmp.JS = row38.JS;
							out11 = out11_tmp;
						} // closing inner join bracket (2)
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_13 = false;

					tos_count_tMap_13++;

					/**
					 * [tMap_13 main ] stop
					 */

					/**
					 * [tMap_13 process_data_begin ] start
					 */

					currentComponent = "tMap_13";

					/**
					 * [tMap_13 process_data_begin ] stop
					 */
// Start of branch "out11"
					if (out11 != null) {

						/**
						 * [tHashOutput_19 main ] start
						 */

						currentComponent = "tHashOutput_19";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "out11");
						}

						out11Struct oneRow_tHashOutput_19 = new out11Struct();

						oneRow_tHashOutput_19.YEAR_NUM = out11.YEAR_NUM;
						oneRow_tHashOutput_19.MONTH_OF_YEAR = out11.MONTH_OF_YEAR;
						oneRow_tHashOutput_19.KPI_ID = out11.KPI_ID;
						oneRow_tHashOutput_19.FREQUENCY = out11.FREQUENCY;
						oneRow_tHashOutput_19.WEEK_OF_YEAR = out11.WEEK_OF_YEAR;
						oneRow_tHashOutput_19.Is_weekly = out11.Is_weekly;
						oneRow_tHashOutput_19.BU = out11.BU;
						oneRow_tHashOutput_19.KPI_DESC = out11.KPI_DESC;
						oneRow_tHashOutput_19.Weight = out11.Weight;
						oneRow_tHashOutput_19.Month_Differnece = out11.Month_Differnece;
						oneRow_tHashOutput_19.Angle_Of_KPI = out11.Angle_Of_KPI;
						oneRow_tHashOutput_19.Achieved = out11.Achieved;
						oneRow_tHashOutput_19.Distance = out11.Distance;
						oneRow_tHashOutput_19.Weight_Disc = out11.Weight_Disc;
						oneRow_tHashOutput_19.Total_BU = out11.Total_BU;
						oneRow_tHashOutput_19.Score = out11.Score;
						oneRow_tHashOutput_19.Cluster_ID = out11.Cluster_ID;
						oneRow_tHashOutput_19.SUB_BU = out11.SUB_BU;
						oneRow_tHashOutput_19.Title = out11.Title;
						oneRow_tHashOutput_19.JS = out11.JS;

						tHashFile_tHashOutput_19.put(oneRow_tHashOutput_19);
						nb_line_tHashOutput_19++;

						tos_count_tHashOutput_19++;

						/**
						 * [tHashOutput_19 main ] stop
						 */

						/**
						 * [tHashOutput_19 process_data_begin ] start
						 */

						currentComponent = "tHashOutput_19";

						/**
						 * [tHashOutput_19 process_data_begin ] stop
						 */

						/**
						 * [tHashOutput_19 process_data_end ] start
						 */

						currentComponent = "tHashOutput_19";

						/**
						 * [tHashOutput_19 process_data_end ] stop
						 */

					} // End of branch "out11"

					/**
					 * [tMap_13 process_data_end ] start
					 */

					currentComponent = "tMap_13";

					/**
					 * [tMap_13 process_data_end ] stop
					 */

					/**
					 * [tHashInput_21 process_data_end ] start
					 */

					currentComponent = "tHashInput_21";

					/**
					 * [tHashInput_21 process_data_end ] stop
					 */

					/**
					 * [tHashInput_21 end ] start
					 */

					currentComponent = "tHashInput_21";

					nb_line_tHashInput_21++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_17");

				globalMap.put("tHashInput_21_NB_LINE", nb_line_tHashInput_21);

				ok_Hash.put("tHashInput_21", true);
				end_Hash.put("tHashInput_21", System.currentTimeMillis());

				/**
				 * [tHashInput_21 end ] stop
				 */

				/**
				 * [tMap_13 end ] start
				 */

				currentComponent = "tMap_13";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row39 != null) {
					tHash_Lookup_row39.endGet();
				}
				globalMap.remove("tHash_Lookup_row39");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row38");
				}

				ok_Hash.put("tMap_13", true);
				end_Hash.put("tMap_13", System.currentTimeMillis());

				/**
				 * [tMap_13 end ] stop
				 */

				/**
				 * [tHashOutput_19 end ] start
				 */

				currentComponent = "tHashOutput_19";

				globalMap.put("tHashOutput_19_NB_LINE", nb_line_tHashOutput_19);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out11");
				}

				ok_Hash.put("tHashOutput_19", true);
				end_Hash.put("tHashOutput_19", System.currentTimeMillis());

				/**
				 * [tHashOutput_19 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_21:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
			}

			tHashInput_23Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_13"
			globalMap.remove("tHash_Lookup_row39");

			try {

				/**
				 * [tHashInput_21 finally ] start
				 */

				currentComponent = "tHashInput_21";

				/**
				 * [tHashInput_21 finally ] stop
				 */

				/**
				 * [tMap_13 finally ] start
				 */

				currentComponent = "tMap_13";

				/**
				 * [tMap_13 finally ] stop
				 */

				/**
				 * [tHashOutput_19 finally ] start
				 */

				currentComponent = "tHashOutput_19";

				/**
				 * [tHashOutput_19 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_21_SUBPROCESS_STATE", 1);
	}

	public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String Year;

		public String getYear() {
			return this.Year;
		}

		public String Month;

		public String getMonth() {
			return this.Month;
		}

		public String Week_Of_Year_Str;

		public String getWeek_Of_Year_Str() {
			return this.Week_Of_Year_Str;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.Year = readString(dis);

					this.Month = readString(dis);

					this.Week_Of_Year_Str = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Year, dos);

				// String

				writeString(this.Month, dos);

				// String

				writeString(this.Week_Of_Year_Str, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Year=" + Year);
			sb.append(",Month=" + Month);
			sb.append(",Week_Of_Year_Str=" + Week_Of_Year_Str);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row46Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_10
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_10> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String Year;

		public String getYear() {
			return this.Year;
		}

		public String Month;

		public String getMonth() {
			return this.Month;
		}

		public String Week_Of_Year_Str;

		public String getWeek_Of_Year_Str() {
			return this.Week_Of_Year_Str;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.Year = readString(dis);

					this.Month = readString(dis);

					this.Week_Of_Year_Str = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Year, dos);

				// String

				writeString(this.Month, dos);

				// String

				writeString(this.Week_Of_Year_Str, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Year=" + Year);
			sb.append(",Month=" + Month);
			sb.append(",Week_Of_Year_Str=" + Week_Of_Year_Str);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_10 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row40Struct implements routines.system.IPersistableRow<row40Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public Integer Cluster_ID;

		public Integer getCluster_ID() {
			return this.Cluster_ID;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.FREQUENCY = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.Is_weekly = readString(dis);

					this.BU = readString(dis);

					this.KPI_DESC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Weight = null;
					} else {
						this.Weight = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Month_Differnece = null;
					} else {
						this.Month_Differnece = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Angle_Of_KPI = null;
					} else {
						this.Angle_Of_KPI = dis.readDouble();
					}

					this.Achieved = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readDouble();
					}

					this.Weight_Disc = readString(dis);

					this.Total_BU = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Score = null;
					} else {
						this.Score = dis.readDouble();
					}

					this.Cluster_ID = readInteger(dis);

					this.SUB_BU = readString(dis);

					this.Title = readString(dis);

					this.JS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.FREQUENCY, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.Is_weekly, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.KPI_DESC, dos);

				// Double

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				// Double

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				// Double

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				// Integer

				writeInteger(this.Achieved, dos);

				// Double

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				// String

				writeString(this.Weight_Disc, dos);

				// String

				writeString(this.Total_BU, dos);

				// Double

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				// Integer

				writeInteger(this.Cluster_ID, dos);

				// String

				writeString(this.SUB_BU, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.JS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",Cluster_ID=" + String.valueOf(Cluster_ID));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Title=" + Title);
			sb.append(",JS=" + JS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row40Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_23_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row40Struct row40 = new row40Struct();
				row46Struct row46 = new row46Struct();

				/**
				 * [tAggregateRow_10_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_10_AGGOUT", false);
				start_Hash.put("tAggregateRow_10_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_10";

				currentComponent = "tAggregateRow_10_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row40");
				}

				int tos_count_tAggregateRow_10_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_10 = new java.util.HashMap();

// ------------
				class AggOperationStruct_tAggregateRow_10 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String YEAR_NUM;
					String MONTH_OF_YEAR;
					String WEEK_OF_YEAR;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

							result = prime * result
									+ ((this.MONTH_OF_YEAR == null) ? 0 : this.MONTH_OF_YEAR.hashCode());

							result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_10 other = (AggOperationStruct_tAggregateRow_10) obj;

						if (this.YEAR_NUM == null) {
							if (other.YEAR_NUM != null)
								return false;
						} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))
							return false;

						if (this.MONTH_OF_YEAR == null) {
							if (other.MONTH_OF_YEAR != null)
								return false;
						} else if (!this.MONTH_OF_YEAR.equals(other.MONTH_OF_YEAR))
							return false;

						if (this.WEEK_OF_YEAR == null) {
							if (other.WEEK_OF_YEAR != null)
								return false;
						} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_10 operation_result_tAggregateRow_10 = null;
				AggOperationStruct_tAggregateRow_10 operation_finder_tAggregateRow_10 = new AggOperationStruct_tAggregateRow_10();
				java.util.Map<AggOperationStruct_tAggregateRow_10, AggOperationStruct_tAggregateRow_10> hash_tAggregateRow_10 = new java.util.HashMap<AggOperationStruct_tAggregateRow_10, AggOperationStruct_tAggregateRow_10>();

				/**
				 * [tAggregateRow_10_AGGOUT begin ] stop
				 */

				/**
				 * [tHashInput_23 begin ] start
				 */

				ok_Hash.put("tHashInput_23", false);
				start_Hash.put("tHashInput_23", System.currentTimeMillis());

				currentComponent = "tHashInput_23";

				int tos_count_tHashInput_23 = 0;

				int nb_line_tHashInput_23 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_23 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out11Struct> tHashFile_tHashInput_23 = mf_tHashInput_23
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_19");
				if (tHashFile_tHashInput_23 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<out11Struct> iterator_tHashInput_23 = tHashFile_tHashInput_23.iterator();
				while (iterator_tHashInput_23.hasNext()) {
					out11Struct next_tHashInput_23 = iterator_tHashInput_23.next();

					row40.YEAR_NUM = next_tHashInput_23.YEAR_NUM;
					row40.MONTH_OF_YEAR = next_tHashInput_23.MONTH_OF_YEAR;
					row40.KPI_ID = next_tHashInput_23.KPI_ID;
					row40.FREQUENCY = next_tHashInput_23.FREQUENCY;
					row40.WEEK_OF_YEAR = next_tHashInput_23.WEEK_OF_YEAR;
					row40.Is_weekly = next_tHashInput_23.Is_weekly;
					row40.BU = next_tHashInput_23.BU;
					row40.KPI_DESC = next_tHashInput_23.KPI_DESC;
					row40.Weight = next_tHashInput_23.Weight;
					row40.Month_Differnece = next_tHashInput_23.Month_Differnece;
					row40.Angle_Of_KPI = next_tHashInput_23.Angle_Of_KPI;
					row40.Achieved = next_tHashInput_23.Achieved;
					row40.Distance = next_tHashInput_23.Distance;
					row40.Weight_Disc = next_tHashInput_23.Weight_Disc;
					row40.Total_BU = next_tHashInput_23.Total_BU;
					row40.Score = next_tHashInput_23.Score;
					row40.Cluster_ID = next_tHashInput_23.Cluster_ID;
					row40.SUB_BU = next_tHashInput_23.SUB_BU;
					row40.Title = next_tHashInput_23.Title;
					row40.JS = next_tHashInput_23.JS;

					/**
					 * [tHashInput_23 begin ] stop
					 */

					/**
					 * [tHashInput_23 main ] start
					 */

					currentComponent = "tHashInput_23";

					tos_count_tHashInput_23++;

					/**
					 * [tHashInput_23 main ] stop
					 */

					/**
					 * [tHashInput_23 process_data_begin ] start
					 */

					currentComponent = "tHashInput_23";

					/**
					 * [tHashInput_23 process_data_begin ] stop
					 */

					/**
					 * [tAggregateRow_10_AGGOUT main ] start
					 */

					currentVirtualComponent = "tAggregateRow_10";

					currentComponent = "tAggregateRow_10_AGGOUT";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row40");
					}

					operation_finder_tAggregateRow_10.YEAR_NUM = row40.YEAR_NUM;
					operation_finder_tAggregateRow_10.MONTH_OF_YEAR = row40.MONTH_OF_YEAR;
					operation_finder_tAggregateRow_10.WEEK_OF_YEAR = row40.WEEK_OF_YEAR;

					operation_finder_tAggregateRow_10.hashCodeDirty = true;

					operation_result_tAggregateRow_10 = hash_tAggregateRow_10.get(operation_finder_tAggregateRow_10);

					if (operation_result_tAggregateRow_10 == null) { // G_OutMain_AggR_001

						operation_result_tAggregateRow_10 = new AggOperationStruct_tAggregateRow_10();

						operation_result_tAggregateRow_10.YEAR_NUM = operation_finder_tAggregateRow_10.YEAR_NUM;
						operation_result_tAggregateRow_10.MONTH_OF_YEAR = operation_finder_tAggregateRow_10.MONTH_OF_YEAR;
						operation_result_tAggregateRow_10.WEEK_OF_YEAR = operation_finder_tAggregateRow_10.WEEK_OF_YEAR;

						hash_tAggregateRow_10.put(operation_result_tAggregateRow_10, operation_result_tAggregateRow_10);

					} // G_OutMain_AggR_001

					tos_count_tAggregateRow_10_AGGOUT++;

					/**
					 * [tAggregateRow_10_AGGOUT main ] stop
					 */

					/**
					 * [tAggregateRow_10_AGGOUT process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_10";

					currentComponent = "tAggregateRow_10_AGGOUT";

					/**
					 * [tAggregateRow_10_AGGOUT process_data_begin ] stop
					 */

					/**
					 * [tAggregateRow_10_AGGOUT process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_10";

					currentComponent = "tAggregateRow_10_AGGOUT";

					/**
					 * [tAggregateRow_10_AGGOUT process_data_end ] stop
					 */

					/**
					 * [tHashInput_23 process_data_end ] start
					 */

					currentComponent = "tHashInput_23";

					/**
					 * [tHashInput_23 process_data_end ] stop
					 */

					/**
					 * [tHashInput_23 end ] start
					 */

					currentComponent = "tHashInput_23";

					nb_line_tHashInput_23++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_19");

				globalMap.put("tHashInput_23_NB_LINE", nb_line_tHashInput_23);

				ok_Hash.put("tHashInput_23", true);
				end_Hash.put("tHashInput_23", System.currentTimeMillis());

				/**
				 * [tHashInput_23 end ] stop
				 */

				/**
				 * [tAggregateRow_10_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_10";

				currentComponent = "tAggregateRow_10_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row40");
				}

				ok_Hash.put("tAggregateRow_10_AGGOUT", true);
				end_Hash.put("tAggregateRow_10_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_10_AGGOUT end ] stop
				 */

				/**
				 * [tHashOutput_22 begin ] start
				 */

				ok_Hash.put("tHashOutput_22", false);
				start_Hash.put("tHashOutput_22", System.currentTimeMillis());

				currentComponent = "tHashOutput_22";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row46");
				}

				int tos_count_tHashOutput_22 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_22 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row46Struct> tHashFile_tHashOutput_22 = null;
				String hashKey_tHashOutput_22 = "tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_22";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_22)) {
					if (mf_tHashOutput_22.getResourceMap().get(hashKey_tHashOutput_22) == null) {
						mf_tHashOutput_22.getResourceMap().put(hashKey_tHashOutput_22,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row46Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_22 = mf_tHashOutput_22.getResourceMap().get(hashKey_tHashOutput_22);
					} else {
						tHashFile_tHashOutput_22 = mf_tHashOutput_22.getResourceMap().get(hashKey_tHashOutput_22);
					}
				}
				int nb_line_tHashOutput_22 = 0;

				/**
				 * [tHashOutput_22 begin ] stop
				 */

				/**
				 * [tAggregateRow_10_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_10_AGGIN", false);
				start_Hash.put("tAggregateRow_10_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_10";

				currentComponent = "tAggregateRow_10_AGGIN";

				int tos_count_tAggregateRow_10_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_10> values_tAggregateRow_10 = hash_tAggregateRow_10
						.values();

				globalMap.put("tAggregateRow_10_NB_LINE", values_tAggregateRow_10.size());

				for (AggOperationStruct_tAggregateRow_10 aggregated_row_tAggregateRow_10 : values_tAggregateRow_10) { // G_AggR_600

					/**
					 * [tAggregateRow_10_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_10_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_10";

					currentComponent = "tAggregateRow_10_AGGIN";

					row46.Year = aggregated_row_tAggregateRow_10.YEAR_NUM;

					row46.Month = aggregated_row_tAggregateRow_10.MONTH_OF_YEAR;

					row46.Week_Of_Year_Str = aggregated_row_tAggregateRow_10.WEEK_OF_YEAR;

					tos_count_tAggregateRow_10_AGGIN++;

					/**
					 * [tAggregateRow_10_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_10_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_10";

					currentComponent = "tAggregateRow_10_AGGIN";

					/**
					 * [tAggregateRow_10_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_22 main ] start
					 */

					currentComponent = "tHashOutput_22";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row46");
					}

					row46Struct oneRow_tHashOutput_22 = new row46Struct();

					oneRow_tHashOutput_22.Year = row46.Year;
					oneRow_tHashOutput_22.Month = row46.Month;
					oneRow_tHashOutput_22.Week_Of_Year_Str = row46.Week_Of_Year_Str;

					tHashFile_tHashOutput_22.put(oneRow_tHashOutput_22);
					nb_line_tHashOutput_22++;

					tos_count_tHashOutput_22++;

					/**
					 * [tHashOutput_22 main ] stop
					 */

					/**
					 * [tHashOutput_22 process_data_begin ] start
					 */

					currentComponent = "tHashOutput_22";

					/**
					 * [tHashOutput_22 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_22 process_data_end ] start
					 */

					currentComponent = "tHashOutput_22";

					/**
					 * [tHashOutput_22 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_10_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_10";

					currentComponent = "tAggregateRow_10_AGGIN";

					/**
					 * [tAggregateRow_10_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_10_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_10";

					currentComponent = "tAggregateRow_10_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_10_AGGIN", true);
				end_Hash.put("tAggregateRow_10_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_10_AGGIN end ] stop
				 */

				/**
				 * [tHashOutput_22 end ] start
				 */

				currentComponent = "tHashOutput_22";

				globalMap.put("tHashOutput_22_NB_LINE", nb_line_tHashOutput_22);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row46");
				}

				ok_Hash.put("tHashOutput_22", true);
				end_Hash.put("tHashOutput_22", System.currentTimeMillis());

				/**
				 * [tHashOutput_22 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_23:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk22", 0, "ok");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_10_AGGIN"
			globalMap.remove("tAggregateRow_10");

			try {

				/**
				 * [tHashInput_23 finally ] start
				 */

				currentComponent = "tHashInput_23";

				/**
				 * [tHashInput_23 finally ] stop
				 */

				/**
				 * [tAggregateRow_10_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_10";

				currentComponent = "tAggregateRow_10_AGGOUT";

				/**
				 * [tAggregateRow_10_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_10_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_10";

				currentComponent = "tAggregateRow_10_AGGIN";

				/**
				 * [tAggregateRow_10_AGGIN finally ] stop
				 */

				/**
				 * [tHashOutput_22 finally ] start
				 */

				currentComponent = "tHashOutput_22";

				/**
				 * [tHashOutput_22 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_23_SUBPROCESS_STATE", 1);
	}

	public static class row30Struct implements routines.system.IPersistableComparableLookupRow<row30Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

				result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

				result = prime * result + ((this.BU == null) ? 0 : this.BU.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row30Struct other = (row30Struct) obj;

			if (this.YEAR_NUM == null) {
				if (other.YEAR_NUM != null)
					return false;

			} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))

				return false;

			if (this.WEEK_OF_YEAR == null) {
				if (other.WEEK_OF_YEAR != null)
					return false;

			} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))

				return false;

			if (this.BU == null) {
				if (other.BU != null)
					return false;

			} else if (!this.BU.equals(other.BU))

				return false;

			return true;
		}

		public void copyDataTo(row30Struct other) {

			other.YEAR_NUM = this.YEAR_NUM;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.BU = this.BU;
			other.Distance = this.Distance;

		}

		public void copyKeysDataTo(row30Struct other) {

			other.YEAR_NUM = this.YEAR_NUM;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.BU = this.BU;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.Distance = null;
				} else {
					this.Distance = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.YEAR_NUM, other.YEAR_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.WEEK_OF_YEAR, other.WEEK_OF_YEAR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.BU, other.BU);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row30Struct row30 = new row30Struct();

				/**
				 * [tAdvancedHash_row30 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row30", false);
				start_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row30";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row30");
				}

				int tos_count_tAdvancedHash_row30 = 0;

				// connection name:row30
				// source node:tHashInput_14 - inputs:(after_tHashInput_15)
				// outputs:(row30,row30) | target node:tAdvancedHash_row30 - inputs:(row30)
				// outputs:()
				// linked node: tMap_10 - inputs:(row31,row30) outputs:(copyOfout9)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row30 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row30Struct>getLookup(matchingModeEnum_row30);

				globalMap.put("tHash_Lookup_row30", tHash_Lookup_row30);

				/**
				 * [tAdvancedHash_row30 begin ] stop
				 */

				/**
				 * [tHashInput_14 begin ] start
				 */

				ok_Hash.put("tHashInput_14", false);
				start_Hash.put("tHashInput_14", System.currentTimeMillis());

				currentComponent = "tHashInput_14";

				int tos_count_tHashInput_14 = 0;

				int nb_line_tHashInput_14 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_14 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row29Struct> tHashFile_tHashInput_14 = mf_tHashInput_14
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_15");
				if (tHashFile_tHashInput_14 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row29Struct> iterator_tHashInput_14 = tHashFile_tHashInput_14.iterator();
				while (iterator_tHashInput_14.hasNext()) {
					row29Struct next_tHashInput_14 = iterator_tHashInput_14.next();

					row30.YEAR_NUM = next_tHashInput_14.YEAR_NUM;
					row30.WEEK_OF_YEAR = next_tHashInput_14.WEEK_OF_YEAR;
					row30.BU = next_tHashInput_14.BU;
					row30.Distance = next_tHashInput_14.Distance;

					/**
					 * [tHashInput_14 begin ] stop
					 */

					/**
					 * [tHashInput_14 main ] start
					 */

					currentComponent = "tHashInput_14";

					tos_count_tHashInput_14++;

					/**
					 * [tHashInput_14 main ] stop
					 */

					/**
					 * [tHashInput_14 process_data_begin ] start
					 */

					currentComponent = "tHashInput_14";

					/**
					 * [tHashInput_14 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row30 main ] start
					 */

					currentComponent = "tAdvancedHash_row30";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row30");
					}

					row30Struct row30_HashRow = new row30Struct();

					row30_HashRow.YEAR_NUM = row30.YEAR_NUM;

					row30_HashRow.WEEK_OF_YEAR = row30.WEEK_OF_YEAR;

					row30_HashRow.BU = row30.BU;

					row30_HashRow.Distance = row30.Distance;

					tHash_Lookup_row30.put(row30_HashRow);

					tos_count_tAdvancedHash_row30++;

					/**
					 * [tAdvancedHash_row30 main ] stop
					 */

					/**
					 * [tAdvancedHash_row30 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row30";

					/**
					 * [tAdvancedHash_row30 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row30 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row30";

					/**
					 * [tAdvancedHash_row30 process_data_end ] stop
					 */

					/**
					 * [tHashInput_14 process_data_end ] start
					 */

					currentComponent = "tHashInput_14";

					/**
					 * [tHashInput_14 process_data_end ] stop
					 */

					/**
					 * [tHashInput_14 end ] start
					 */

					currentComponent = "tHashInput_14";

					nb_line_tHashInput_14++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_15");

				globalMap.put("tHashInput_14_NB_LINE", nb_line_tHashInput_14);

				ok_Hash.put("tHashInput_14", true);
				end_Hash.put("tHashInput_14", System.currentTimeMillis());

				/**
				 * [tHashInput_14 end ] stop
				 */

				/**
				 * [tAdvancedHash_row30 end ] start
				 */

				currentComponent = "tAdvancedHash_row30";

				tHash_Lookup_row30.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row30");
				}

				ok_Hash.put("tAdvancedHash_row30", true);
				end_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row30 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_14 finally ] start
				 */

				currentComponent = "tHashInput_14";

				/**
				 * [tHashInput_14 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row30 finally ] start
				 */

				currentComponent = "tAdvancedHash_row30";

				/**
				 * [tAdvancedHash_row30 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_14_SUBPROCESS_STATE", 1);
	}

	public static class row34Struct implements routines.system.IPersistableComparableLookupRow<row34Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String KPI_id;

		public String getKPI_id() {
			return this.KPI_id;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_name;

		public String getKPI_name() {
			return this.KPI_name;
		}

		public Double Prop_target;

		public Double getProp_target() {
			return this.Prop_target;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public Integer KPI_dierection;

		public Integer getKPI_dierection() {
			return this.KPI_dierection;
		}

		public String Year;

		public String getYear() {
			return this.Year;
		}

		public String Month;

		public String getMonth() {
			return this.Month;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public Double Apa;

		public Double getApa() {
			return this.Apa;
		}

		public Double Amb_target;

		public Double getAmb_target() {
			return this.Amb_target;
		}

		public String Category_change;

		public String getCategory_change() {
			return this.Category_change;
		}

		public String Target_Type;

		public String getTarget_Type() {
			return this.Target_Type;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public Double baseline;

		public Double getBaseline() {
			return this.baseline;
		}

		public String unit;

		public String getUnit() {
			return this.unit;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.KPI_id == null) ? 0 : this.KPI_id.hashCode());

				result = prime * result + ((this.Year == null) ? 0 : this.Year.hashCode());

				result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row34Struct other = (row34Struct) obj;

			if (this.KPI_id == null) {
				if (other.KPI_id != null)
					return false;

			} else if (!this.KPI_id.equals(other.KPI_id))

				return false;

			if (this.Year == null) {
				if (other.Year != null)
					return false;

			} else if (!this.Year.equals(other.Year))

				return false;

			if (this.WEEK_OF_YEAR == null) {
				if (other.WEEK_OF_YEAR != null)
					return false;

			} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))

				return false;

			return true;
		}

		public void copyDataTo(row34Struct other) {

			other.KPI_id = this.KPI_id;
			other.Is_weekly = this.Is_weekly;
			other.BU = this.BU;
			other.KPI_name = this.KPI_name;
			other.Prop_target = this.Prop_target;
			other.weight = this.weight;
			other.JS = this.JS;
			other.S_JS = this.S_JS;
			other.KPI_dierection = this.KPI_dierection;
			other.Year = this.Year;
			other.Month = this.Month;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.Apa = this.Apa;
			other.Amb_target = this.Amb_target;
			other.Category_change = this.Category_change;
			other.Target_Type = this.Target_Type;
			other.SUB_BU = this.SUB_BU;
			other.baseline = this.baseline;
			other.unit = this.unit;

		}

		public void copyKeysDataTo(row34Struct other) {

			other.KPI_id = this.KPI_id;
			other.Year = this.Year;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.KPI_id = readString(dis);

					this.Year = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.KPI_id, dos);

				// String

				writeString(this.Year, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Is_weekly = readString(dis, ois);

				this.BU = readString(dis, ois);

				this.KPI_name = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Prop_target = null;
				} else {
					this.Prop_target = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.weight = null;
				} else {
					this.weight = dis.readDouble();
				}

				this.JS = readString(dis, ois);

				this.S_JS = readString(dis, ois);

				this.KPI_dierection = readInteger(dis, ois);

				this.Month = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Apa = null;
				} else {
					this.Apa = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Amb_target = null;
				} else {
					this.Amb_target = dis.readDouble();
				}

				this.Category_change = readString(dis, ois);

				this.Target_Type = readString(dis, ois);

				this.SUB_BU = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.baseline = null;
				} else {
					this.baseline = dis.readDouble();
				}

				this.unit = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Is_weekly, dos, oos);

				writeString(this.BU, dos, oos);

				writeString(this.KPI_name, dos, oos);

				if (this.Prop_target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Prop_target);
				}

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				writeString(this.JS, dos, oos);

				writeString(this.S_JS, dos, oos);

				writeInteger(this.KPI_dierection, dos, oos);

				writeString(this.Month, dos, oos);

				if (this.Apa == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Apa);
				}

				if (this.Amb_target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Amb_target);
				}

				writeString(this.Category_change, dos, oos);

				writeString(this.Target_Type, dos, oos);

				writeString(this.SUB_BU, dos, oos);

				if (this.baseline == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.baseline);
				}

				writeString(this.unit, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("KPI_id=" + KPI_id);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_name=" + KPI_name);
			sb.append(",Prop_target=" + String.valueOf(Prop_target));
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",KPI_dierection=" + String.valueOf(KPI_dierection));
			sb.append(",Year=" + Year);
			sb.append(",Month=" + Month);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",Apa=" + String.valueOf(Apa));
			sb.append(",Amb_target=" + String.valueOf(Amb_target));
			sb.append(",Category_change=" + Category_change);
			sb.append(",Target_Type=" + Target_Type);
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",baseline=" + String.valueOf(baseline));
			sb.append(",unit=" + unit);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KPI_id, other.KPI_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Year, other.Year);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.WEEK_OF_YEAR, other.WEEK_OF_YEAR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row34Struct row34 = new row34Struct();

				/**
				 * [tAdvancedHash_row34 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row34", false);
				start_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row34";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row34");
				}

				int tos_count_tAdvancedHash_row34 = 0;

				// connection name:row34
				// source node:tHashInput_16 - inputs:(after_tHashInput_17)
				// outputs:(row34,row34) | target node:tAdvancedHash_row34 - inputs:(row34)
				// outputs:()
				// linked node: tMap_11 - inputs:(row33,row34) outputs:(copyOfcopyOfout9)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row34 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row34Struct>getLookup(matchingModeEnum_row34);

				globalMap.put("tHash_Lookup_row34", tHash_Lookup_row34);

				/**
				 * [tAdvancedHash_row34 begin ] stop
				 */

				/**
				 * [tHashInput_16 begin ] start
				 */

				ok_Hash.put("tHashInput_16", false);
				start_Hash.put("tHashInput_16", System.currentTimeMillis());

				currentComponent = "tHashInput_16";

				int tos_count_tHashInput_16 = 0;

				int nb_line_tHashInput_16 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_16 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tMap_23_outStruct> tHashFile_tHashInput_16 = mf_tHashInput_16
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_2");
				if (tHashFile_tHashInput_16 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tMap_23_outStruct> iterator_tHashInput_16 = tHashFile_tHashInput_16.iterator();
				while (iterator_tHashInput_16.hasNext()) {
					tMap_23_outStruct next_tHashInput_16 = iterator_tHashInput_16.next();

					row34.KPI_id = next_tHashInput_16.KPI_id;
					row34.Is_weekly = next_tHashInput_16.Is_weekly;
					row34.BU = next_tHashInput_16.BU;
					row34.KPI_name = next_tHashInput_16.KPI_name;
					row34.Prop_target = next_tHashInput_16.Prop_target;
					row34.weight = next_tHashInput_16.weight;
					row34.JS = next_tHashInput_16.JS;
					row34.S_JS = next_tHashInput_16.S_JS;
					row34.KPI_dierection = next_tHashInput_16.KPI_dierection;
					row34.Year = next_tHashInput_16.Year;
					row34.Month = next_tHashInput_16.Month;
					row34.WEEK_OF_YEAR = next_tHashInput_16.WEEK_OF_YEAR;
					row34.Apa = next_tHashInput_16.Apa;
					row34.Amb_target = next_tHashInput_16.Amb_target;
					row34.Category_change = next_tHashInput_16.Category_change;
					row34.Target_Type = next_tHashInput_16.Target_Type;
					row34.SUB_BU = next_tHashInput_16.SUB_BU;
					row34.baseline = next_tHashInput_16.baseline;
					row34.unit = next_tHashInput_16.unit;

					/**
					 * [tHashInput_16 begin ] stop
					 */

					/**
					 * [tHashInput_16 main ] start
					 */

					currentComponent = "tHashInput_16";

					tos_count_tHashInput_16++;

					/**
					 * [tHashInput_16 main ] stop
					 */

					/**
					 * [tHashInput_16 process_data_begin ] start
					 */

					currentComponent = "tHashInput_16";

					/**
					 * [tHashInput_16 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row34 main ] start
					 */

					currentComponent = "tAdvancedHash_row34";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row34");
					}

					row34Struct row34_HashRow = new row34Struct();

					row34_HashRow.KPI_id = row34.KPI_id;

					row34_HashRow.Is_weekly = row34.Is_weekly;

					row34_HashRow.BU = row34.BU;

					row34_HashRow.KPI_name = row34.KPI_name;

					row34_HashRow.Prop_target = row34.Prop_target;

					row34_HashRow.weight = row34.weight;

					row34_HashRow.JS = row34.JS;

					row34_HashRow.S_JS = row34.S_JS;

					row34_HashRow.KPI_dierection = row34.KPI_dierection;

					row34_HashRow.Year = row34.Year;

					row34_HashRow.Month = row34.Month;

					row34_HashRow.WEEK_OF_YEAR = row34.WEEK_OF_YEAR;

					row34_HashRow.Apa = row34.Apa;

					row34_HashRow.Amb_target = row34.Amb_target;

					row34_HashRow.Category_change = row34.Category_change;

					row34_HashRow.Target_Type = row34.Target_Type;

					row34_HashRow.SUB_BU = row34.SUB_BU;

					row34_HashRow.baseline = row34.baseline;

					row34_HashRow.unit = row34.unit;

					tHash_Lookup_row34.put(row34_HashRow);

					tos_count_tAdvancedHash_row34++;

					/**
					 * [tAdvancedHash_row34 main ] stop
					 */

					/**
					 * [tAdvancedHash_row34 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row34";

					/**
					 * [tAdvancedHash_row34 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row34 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row34";

					/**
					 * [tAdvancedHash_row34 process_data_end ] stop
					 */

					/**
					 * [tHashInput_16 process_data_end ] start
					 */

					currentComponent = "tHashInput_16";

					/**
					 * [tHashInput_16 process_data_end ] stop
					 */

					/**
					 * [tHashInput_16 end ] start
					 */

					currentComponent = "tHashInput_16";

					nb_line_tHashInput_16++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_2");

				globalMap.put("tHashInput_16_NB_LINE", nb_line_tHashInput_16);

				ok_Hash.put("tHashInput_16", true);
				end_Hash.put("tHashInput_16", System.currentTimeMillis());

				/**
				 * [tHashInput_16 end ] stop
				 */

				/**
				 * [tAdvancedHash_row34 end ] start
				 */

				currentComponent = "tAdvancedHash_row34";

				tHash_Lookup_row34.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row34");
				}

				ok_Hash.put("tAdvancedHash_row34", true);
				end_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row34 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_16 finally ] start
				 */

				currentComponent = "tHashInput_16";

				/**
				 * [tHashInput_16 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row34 finally ] start
				 */

				currentComponent = "tAdvancedHash_row34";

				/**
				 * [tAdvancedHash_row34 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_16_SUBPROCESS_STATE", 1);
	}

	public static class row39Struct implements routines.system.IPersistableComparableLookupRow<row39Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public Integer Cluster;

		public Integer getCluster() {
			return this.Cluster;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

				result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

				result = prime * result + ((this.KPI_ID == null) ? 0 : this.KPI_ID.hashCode());

				result = prime * result + ((this.BU == null) ? 0 : this.BU.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row39Struct other = (row39Struct) obj;

			if (this.YEAR_NUM == null) {
				if (other.YEAR_NUM != null)
					return false;

			} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))

				return false;

			if (this.WEEK_OF_YEAR == null) {
				if (other.WEEK_OF_YEAR != null)
					return false;

			} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))

				return false;

			if (this.KPI_ID == null) {
				if (other.KPI_ID != null)
					return false;

			} else if (!this.KPI_ID.equals(other.KPI_ID))

				return false;

			if (this.BU == null) {
				if (other.BU != null)
					return false;

			} else if (!this.BU.equals(other.BU))

				return false;

			return true;
		}

		public void copyDataTo(row39Struct other) {

			other.YEAR_NUM = this.YEAR_NUM;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.KPI_ID = this.KPI_ID;
			other.JS = this.JS;
			other.Angle_Of_KPI = this.Angle_Of_KPI;
			other.Distance = this.Distance;
			other.Cluster = this.Cluster;
			other.BU = this.BU;

		}

		public void copyKeysDataTo(row39Struct other) {

			other.YEAR_NUM = this.YEAR_NUM;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.KPI_ID = this.KPI_ID;
			other.BU = this.BU;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.KPI_ID = readString(dis);

					this.BU = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.BU, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.JS = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Angle_Of_KPI = null;
				} else {
					this.Angle_Of_KPI = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Distance = null;
				} else {
					this.Distance = dis.readDouble();
				}

				this.Cluster = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.JS, dos, oos);

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				writeInteger(this.Cluster, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",JS=" + JS);
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Cluster=" + String.valueOf(Cluster));
			sb.append(",BU=" + BU);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row39Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.YEAR_NUM, other.YEAR_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.WEEK_OF_YEAR, other.WEEK_OF_YEAR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.KPI_ID, other.KPI_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.BU, other.BU);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_19_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row39Struct row39 = new row39Struct();

				/**
				 * [tAdvancedHash_row39 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row39", false);
				start_Hash.put("tAdvancedHash_row39", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row39";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row39");
				}

				int tos_count_tAdvancedHash_row39 = 0;

				// connection name:row39
				// source node:tHashInput_19 - inputs:(after_tHashInput_21)
				// outputs:(row39,row39) | target node:tAdvancedHash_row39 - inputs:(row39)
				// outputs:()
				// linked node: tMap_13 - inputs:(row38,row39) outputs:(out11)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row39 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct> tHash_Lookup_row39 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row39Struct>getLookup(matchingModeEnum_row39);

				globalMap.put("tHash_Lookup_row39", tHash_Lookup_row39);

				/**
				 * [tAdvancedHash_row39 begin ] stop
				 */

				/**
				 * [tHashInput_19 begin ] start
				 */

				ok_Hash.put("tHashInput_19", false);
				start_Hash.put("tHashInput_19", System.currentTimeMillis());

				currentComponent = "tHashInput_19";

				int tos_count_tHashInput_19 = 0;

				int nb_line_tHashInput_19 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_19 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row36Struct> tHashFile_tHashInput_19 = mf_tHashInput_19
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_18");
				if (tHashFile_tHashInput_19 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row36Struct> iterator_tHashInput_19 = tHashFile_tHashInput_19.iterator();
				while (iterator_tHashInput_19.hasNext()) {
					row36Struct next_tHashInput_19 = iterator_tHashInput_19.next();

					row39.YEAR_NUM = next_tHashInput_19.YEAR_NUM;
					row39.WEEK_OF_YEAR = next_tHashInput_19.WEEK_OF_YEAR;
					row39.KPI_ID = next_tHashInput_19.KPI_ID;
					row39.JS = next_tHashInput_19.JS;
					row39.Angle_Of_KPI = next_tHashInput_19.Angle_Of_KPI;
					row39.Distance = next_tHashInput_19.Distance;
					row39.Cluster = next_tHashInput_19.Cluster;
					row39.BU = next_tHashInput_19.BU;

					/**
					 * [tHashInput_19 begin ] stop
					 */

					/**
					 * [tHashInput_19 main ] start
					 */

					currentComponent = "tHashInput_19";

					tos_count_tHashInput_19++;

					/**
					 * [tHashInput_19 main ] stop
					 */

					/**
					 * [tHashInput_19 process_data_begin ] start
					 */

					currentComponent = "tHashInput_19";

					/**
					 * [tHashInput_19 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row39 main ] start
					 */

					currentComponent = "tAdvancedHash_row39";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row39");
					}

					row39Struct row39_HashRow = new row39Struct();

					row39_HashRow.YEAR_NUM = row39.YEAR_NUM;

					row39_HashRow.WEEK_OF_YEAR = row39.WEEK_OF_YEAR;

					row39_HashRow.KPI_ID = row39.KPI_ID;

					row39_HashRow.JS = row39.JS;

					row39_HashRow.Angle_Of_KPI = row39.Angle_Of_KPI;

					row39_HashRow.Distance = row39.Distance;

					row39_HashRow.Cluster = row39.Cluster;

					row39_HashRow.BU = row39.BU;

					tHash_Lookup_row39.put(row39_HashRow);

					tos_count_tAdvancedHash_row39++;

					/**
					 * [tAdvancedHash_row39 main ] stop
					 */

					/**
					 * [tAdvancedHash_row39 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row39";

					/**
					 * [tAdvancedHash_row39 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row39 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row39";

					/**
					 * [tAdvancedHash_row39 process_data_end ] stop
					 */

					/**
					 * [tHashInput_19 process_data_end ] start
					 */

					currentComponent = "tHashInput_19";

					/**
					 * [tHashInput_19 process_data_end ] stop
					 */

					/**
					 * [tHashInput_19 end ] start
					 */

					currentComponent = "tHashInput_19";

					nb_line_tHashInput_19++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_18");

				globalMap.put("tHashInput_19_NB_LINE", nb_line_tHashInput_19);

				ok_Hash.put("tHashInput_19", true);
				end_Hash.put("tHashInput_19", System.currentTimeMillis());

				/**
				 * [tHashInput_19 end ] stop
				 */

				/**
				 * [tAdvancedHash_row39 end ] start
				 */

				currentComponent = "tAdvancedHash_row39";

				tHash_Lookup_row39.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row39");
				}

				ok_Hash.put("tAdvancedHash_row39", true);
				end_Hash.put("tAdvancedHash_row39", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row39 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_19 finally ] start
				 */

				currentComponent = "tHashInput_19";

				/**
				 * [tHashInput_19 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row39 finally ] start
				 */

				currentComponent = "tAdvancedHash_row39";

				/**
				 * [tAdvancedHash_row39 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_19_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String KPI_id;

		public String getKPI_id() {
			return this.KPI_id;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_name;

		public String getKPI_name() {
			return this.KPI_name;
		}

		public Double Prop_target;

		public Double getProp_target() {
			return this.Prop_target;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public Integer KPI_dierection;

		public Integer getKPI_dierection() {
			return this.KPI_dierection;
		}

		public String Year;

		public String getYear() {
			return this.Year;
		}

		public String Month;

		public String getMonth() {
			return this.Month;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public Double Apa;

		public Double getApa() {
			return this.Apa;
		}

		public Double Amb_target;

		public Double getAmb_target() {
			return this.Amb_target;
		}

		public String Category_change;

		public String getCategory_change() {
			return this.Category_change;
		}

		public String Target_Type;

		public String getTarget_Type() {
			return this.Target_Type;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public Double baseline;

		public Double getBaseline() {
			return this.baseline;
		}

		public String unit;

		public String getUnit() {
			return this.unit;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.KPI_id == null) ? 0 : this.KPI_id.hashCode());

				result = prime * result + ((this.Year == null) ? 0 : this.Year.hashCode());

				result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.KPI_id == null) {
				if (other.KPI_id != null)
					return false;

			} else if (!this.KPI_id.equals(other.KPI_id))

				return false;

			if (this.Year == null) {
				if (other.Year != null)
					return false;

			} else if (!this.Year.equals(other.Year))

				return false;

			if (this.WEEK_OF_YEAR == null) {
				if (other.WEEK_OF_YEAR != null)
					return false;

			} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.KPI_id = this.KPI_id;
			other.Is_weekly = this.Is_weekly;
			other.BU = this.BU;
			other.KPI_name = this.KPI_name;
			other.Prop_target = this.Prop_target;
			other.weight = this.weight;
			other.JS = this.JS;
			other.S_JS = this.S_JS;
			other.KPI_dierection = this.KPI_dierection;
			other.Year = this.Year;
			other.Month = this.Month;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.Apa = this.Apa;
			other.Amb_target = this.Amb_target;
			other.Category_change = this.Category_change;
			other.Target_Type = this.Target_Type;
			other.SUB_BU = this.SUB_BU;
			other.baseline = this.baseline;
			other.unit = this.unit;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.KPI_id = this.KPI_id;
			other.Year = this.Year;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.KPI_id = readString(dis);

					this.Year = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.KPI_id, dos);

				// String

				writeString(this.Year, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Is_weekly = readString(dis, ois);

				this.BU = readString(dis, ois);

				this.KPI_name = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Prop_target = null;
				} else {
					this.Prop_target = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.weight = null;
				} else {
					this.weight = dis.readDouble();
				}

				this.JS = readString(dis, ois);

				this.S_JS = readString(dis, ois);

				this.KPI_dierection = readInteger(dis, ois);

				this.Month = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Apa = null;
				} else {
					this.Apa = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Amb_target = null;
				} else {
					this.Amb_target = dis.readDouble();
				}

				this.Category_change = readString(dis, ois);

				this.Target_Type = readString(dis, ois);

				this.SUB_BU = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.baseline = null;
				} else {
					this.baseline = dis.readDouble();
				}

				this.unit = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Is_weekly, dos, oos);

				writeString(this.BU, dos, oos);

				writeString(this.KPI_name, dos, oos);

				if (this.Prop_target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Prop_target);
				}

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				writeString(this.JS, dos, oos);

				writeString(this.S_JS, dos, oos);

				writeInteger(this.KPI_dierection, dos, oos);

				writeString(this.Month, dos, oos);

				if (this.Apa == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Apa);
				}

				if (this.Amb_target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Amb_target);
				}

				writeString(this.Category_change, dos, oos);

				writeString(this.Target_Type, dos, oos);

				writeString(this.SUB_BU, dos, oos);

				if (this.baseline == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.baseline);
				}

				writeString(this.unit, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("KPI_id=" + KPI_id);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_name=" + KPI_name);
			sb.append(",Prop_target=" + String.valueOf(Prop_target));
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",KPI_dierection=" + String.valueOf(KPI_dierection));
			sb.append(",Year=" + Year);
			sb.append(",Month=" + Month);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",Apa=" + String.valueOf(Apa));
			sb.append(",Amb_target=" + String.valueOf(Amb_target));
			sb.append(",Category_change=" + Category_change);
			sb.append(",Target_Type=" + Target_Type);
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",baseline=" + String.valueOf(baseline));
			sb.append(",unit=" + unit);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KPI_id, other.KPI_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Year, other.Year);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.WEEK_OF_YEAR, other.WEEK_OF_YEAR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tHashInput_2 - inputs:(after_tHashInput_1) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row2,row4) outputs:(all_trend)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct>getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tHashInput_2 begin ] start
				 */

				ok_Hash.put("tHashInput_2", false);
				start_Hash.put("tHashInput_2", System.currentTimeMillis());

				currentComponent = "tHashInput_2";

				int tos_count_tHashInput_2 = 0;

				int nb_line_tHashInput_2 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tMap_23_outStruct> tHashFile_tHashInput_2 = mf_tHashInput_2
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_2");
				if (tHashFile_tHashInput_2 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tMap_23_outStruct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
				while (iterator_tHashInput_2.hasNext()) {
					tMap_23_outStruct next_tHashInput_2 = iterator_tHashInput_2.next();

					row4.KPI_id = next_tHashInput_2.KPI_id;
					row4.Is_weekly = next_tHashInput_2.Is_weekly;
					row4.BU = next_tHashInput_2.BU;
					row4.KPI_name = next_tHashInput_2.KPI_name;
					row4.Prop_target = next_tHashInput_2.Prop_target;
					row4.weight = next_tHashInput_2.weight;
					row4.JS = next_tHashInput_2.JS;
					row4.S_JS = next_tHashInput_2.S_JS;
					row4.KPI_dierection = next_tHashInput_2.KPI_dierection;
					row4.Year = next_tHashInput_2.Year;
					row4.Month = next_tHashInput_2.Month;
					row4.WEEK_OF_YEAR = next_tHashInput_2.WEEK_OF_YEAR;
					row4.Apa = next_tHashInput_2.Apa;
					row4.Amb_target = next_tHashInput_2.Amb_target;
					row4.Category_change = next_tHashInput_2.Category_change;
					row4.Target_Type = next_tHashInput_2.Target_Type;
					row4.SUB_BU = next_tHashInput_2.SUB_BU;
					row4.baseline = next_tHashInput_2.baseline;
					row4.unit = next_tHashInput_2.unit;

					/**
					 * [tHashInput_2 begin ] stop
					 */

					/**
					 * [tHashInput_2 main ] start
					 */

					currentComponent = "tHashInput_2";

					tos_count_tHashInput_2++;

					/**
					 * [tHashInput_2 main ] stop
					 */

					/**
					 * [tHashInput_2 process_data_begin ] start
					 */

					currentComponent = "tHashInput_2";

					/**
					 * [tHashInput_2 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row4 main ] start
					 */

					currentComponent = "tAdvancedHash_row4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
					}

					row4Struct row4_HashRow = new row4Struct();

					row4_HashRow.KPI_id = row4.KPI_id;

					row4_HashRow.Is_weekly = row4.Is_weekly;

					row4_HashRow.BU = row4.BU;

					row4_HashRow.KPI_name = row4.KPI_name;

					row4_HashRow.Prop_target = row4.Prop_target;

					row4_HashRow.weight = row4.weight;

					row4_HashRow.JS = row4.JS;

					row4_HashRow.S_JS = row4.S_JS;

					row4_HashRow.KPI_dierection = row4.KPI_dierection;

					row4_HashRow.Year = row4.Year;

					row4_HashRow.Month = row4.Month;

					row4_HashRow.WEEK_OF_YEAR = row4.WEEK_OF_YEAR;

					row4_HashRow.Apa = row4.Apa;

					row4_HashRow.Amb_target = row4.Amb_target;

					row4_HashRow.Category_change = row4.Category_change;

					row4_HashRow.Target_Type = row4.Target_Type;

					row4_HashRow.SUB_BU = row4.SUB_BU;

					row4_HashRow.baseline = row4.baseline;

					row4_HashRow.unit = row4.unit;

					tHash_Lookup_row4.put(row4_HashRow);

					tos_count_tAdvancedHash_row4++;

					/**
					 * [tAdvancedHash_row4 main ] stop
					 */

					/**
					 * [tAdvancedHash_row4 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row4";

					/**
					 * [tAdvancedHash_row4 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row4 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row4";

					/**
					 * [tAdvancedHash_row4 process_data_end ] stop
					 */

					/**
					 * [tHashInput_2 process_data_end ] start
					 */

					currentComponent = "tHashInput_2";

					/**
					 * [tHashInput_2 process_data_end ] stop
					 */

					/**
					 * [tHashInput_2 end ] start
					 */

					currentComponent = "tHashInput_2";

					nb_line_tHashInput_2++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_2");

				globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);

				ok_Hash.put("tHashInput_2", true);
				end_Hash.put("tHashInput_2", System.currentTimeMillis());

				/**
				 * [tHashInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_2 finally ] start
				 */

				currentComponent = "tHashInput_2";

				/**
				 * [tHashInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row76Struct implements routines.system.IPersistableComparableLookupRow<row76Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_WBU_Group_Desc;

		public String getKPI_WBU_Group_Desc() {
			return this.KPI_WBU_Group_Desc;
		}

		public Double KPI_WBU_Group_Weight_Threshold;

		public Double getKPI_WBU_Group_Weight_Threshold() {
			return this.KPI_WBU_Group_Weight_Threshold;
		}

		public Integer CountOfActValues;

		public Integer getCountOfActValues() {
			return this.CountOfActValues;
		}

		public Double Single_WBU_KPI_Weight;

		public Double getSingle_WBU_KPI_Weight() {
			return this.Single_WBU_KPI_Weight;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

				result = prime * result + ((this.MONTH_OF_YEAR == null) ? 0 : this.MONTH_OF_YEAR.hashCode());

				result = prime * result + ((this.KPI_WBU_Group_Desc == null) ? 0 : this.KPI_WBU_Group_Desc.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row76Struct other = (row76Struct) obj;

			if (this.YEAR_NUM == null) {
				if (other.YEAR_NUM != null)
					return false;

			} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))

				return false;

			if (this.MONTH_OF_YEAR == null) {
				if (other.MONTH_OF_YEAR != null)
					return false;

			} else if (!this.MONTH_OF_YEAR.equals(other.MONTH_OF_YEAR))

				return false;

			if (this.KPI_WBU_Group_Desc == null) {
				if (other.KPI_WBU_Group_Desc != null)
					return false;

			} else if (!this.KPI_WBU_Group_Desc.equals(other.KPI_WBU_Group_Desc))

				return false;

			return true;
		}

		public void copyDataTo(row76Struct other) {

			other.YEAR_NUM = this.YEAR_NUM;
			other.MONTH_OF_YEAR = this.MONTH_OF_YEAR;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.KPI_WBU_Group_Desc = this.KPI_WBU_Group_Desc;
			other.KPI_WBU_Group_Weight_Threshold = this.KPI_WBU_Group_Weight_Threshold;
			other.CountOfActValues = this.CountOfActValues;
			other.Single_WBU_KPI_Weight = this.Single_WBU_KPI_Weight;

		}

		public void copyKeysDataTo(row76Struct other) {

			other.YEAR_NUM = this.YEAR_NUM;
			other.MONTH_OF_YEAR = this.MONTH_OF_YEAR;
			other.KPI_WBU_Group_Desc = this.KPI_WBU_Group_Desc;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.KPI_WBU_Group_Desc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.KPI_WBU_Group_Desc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.WEEK_OF_YEAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.KPI_WBU_Group_Weight_Threshold = null;
				} else {
					this.KPI_WBU_Group_Weight_Threshold = dis.readDouble();
				}

				this.CountOfActValues = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Single_WBU_KPI_Weight = null;
				} else {
					this.Single_WBU_KPI_Weight = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.WEEK_OF_YEAR, dos, oos);

				if (this.KPI_WBU_Group_Weight_Threshold == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.KPI_WBU_Group_Weight_Threshold);
				}

				writeInteger(this.CountOfActValues, dos, oos);

				if (this.Single_WBU_KPI_Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Single_WBU_KPI_Weight);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_WBU_Group_Desc=" + KPI_WBU_Group_Desc);
			sb.append(",KPI_WBU_Group_Weight_Threshold=" + String.valueOf(KPI_WBU_Group_Weight_Threshold));
			sb.append(",CountOfActValues=" + String.valueOf(CountOfActValues));
			sb.append(",Single_WBU_KPI_Weight=" + String.valueOf(Single_WBU_KPI_Weight));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row76Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.YEAR_NUM, other.YEAR_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.MONTH_OF_YEAR, other.MONTH_OF_YEAR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.KPI_WBU_Group_Desc, other.KPI_WBU_Group_Desc);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_28_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row76Struct row76 = new row76Struct();

				/**
				 * [tAdvancedHash_row76 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row76", false);
				start_Hash.put("tAdvancedHash_row76", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row76";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row76");
				}

				int tos_count_tAdvancedHash_row76 = 0;

				// connection name:row76
				// source node:tHashInput_28 - inputs:(after_tFileInputExcel_2)
				// outputs:(row76,row76) | target node:tAdvancedHash_row76 - inputs:(row76)
				// outputs:()
				// linked node: tMap_23 - inputs:(row3,row76) outputs:(tMap_23_out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row76 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row76Struct> tHash_Lookup_row76 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row76Struct>getLookup(matchingModeEnum_row76);

				globalMap.put("tHash_Lookup_row76", tHash_Lookup_row76);

				/**
				 * [tAdvancedHash_row76 begin ] stop
				 */

				/**
				 * [tHashInput_28 begin ] start
				 */

				ok_Hash.put("tHashInput_28", false);
				start_Hash.put("tHashInput_28", System.currentTimeMillis());

				currentComponent = "tHashInput_28";

				int tos_count_tHashInput_28 = 0;

				int nb_line_tHashInput_28 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_28 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<oWBU_K_W8Struct> tHashFile_tHashInput_28 = mf_tHashInput_28
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_10");
				if (tHashFile_tHashInput_28 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<oWBU_K_W8Struct> iterator_tHashInput_28 = tHashFile_tHashInput_28.iterator();
				while (iterator_tHashInput_28.hasNext()) {
					oWBU_K_W8Struct next_tHashInput_28 = iterator_tHashInput_28.next();

					row76.YEAR_NUM = next_tHashInput_28.YEAR_NUM;
					row76.MONTH_OF_YEAR = next_tHashInput_28.MONTH_OF_YEAR;
					row76.WEEK_OF_YEAR = next_tHashInput_28.WEEK_OF_YEAR;
					row76.KPI_WBU_Group_Desc = next_tHashInput_28.KPI_WBU_Group_Desc;
					row76.KPI_WBU_Group_Weight_Threshold = next_tHashInput_28.KPI_WBU_Group_Weight_Threshold;
					row76.CountOfActValues = next_tHashInput_28.CountOfActValues;
					row76.Single_WBU_KPI_Weight = next_tHashInput_28.Single_WBU_KPI_Weight;

					/**
					 * [tHashInput_28 begin ] stop
					 */

					/**
					 * [tHashInput_28 main ] start
					 */

					currentComponent = "tHashInput_28";

					tos_count_tHashInput_28++;

					/**
					 * [tHashInput_28 main ] stop
					 */

					/**
					 * [tHashInput_28 process_data_begin ] start
					 */

					currentComponent = "tHashInput_28";

					/**
					 * [tHashInput_28 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row76 main ] start
					 */

					currentComponent = "tAdvancedHash_row76";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row76");
					}

					row76Struct row76_HashRow = new row76Struct();

					row76_HashRow.YEAR_NUM = row76.YEAR_NUM;

					row76_HashRow.MONTH_OF_YEAR = row76.MONTH_OF_YEAR;

					row76_HashRow.WEEK_OF_YEAR = row76.WEEK_OF_YEAR;

					row76_HashRow.KPI_WBU_Group_Desc = row76.KPI_WBU_Group_Desc;

					row76_HashRow.KPI_WBU_Group_Weight_Threshold = row76.KPI_WBU_Group_Weight_Threshold;

					row76_HashRow.CountOfActValues = row76.CountOfActValues;

					row76_HashRow.Single_WBU_KPI_Weight = row76.Single_WBU_KPI_Weight;

					tHash_Lookup_row76.put(row76_HashRow);

					tos_count_tAdvancedHash_row76++;

					/**
					 * [tAdvancedHash_row76 main ] stop
					 */

					/**
					 * [tAdvancedHash_row76 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row76";

					/**
					 * [tAdvancedHash_row76 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row76 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row76";

					/**
					 * [tAdvancedHash_row76 process_data_end ] stop
					 */

					/**
					 * [tHashInput_28 process_data_end ] start
					 */

					currentComponent = "tHashInput_28";

					/**
					 * [tHashInput_28 process_data_end ] stop
					 */

					/**
					 * [tHashInput_28 end ] start
					 */

					currentComponent = "tHashInput_28";

					nb_line_tHashInput_28++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_10");

				globalMap.put("tHashInput_28_NB_LINE", nb_line_tHashInput_28);

				ok_Hash.put("tHashInput_28", true);
				end_Hash.put("tHashInput_28", System.currentTimeMillis());

				/**
				 * [tHashInput_28 end ] stop
				 */

				/**
				 * [tAdvancedHash_row76 end ] start
				 */

				currentComponent = "tAdvancedHash_row76";

				tHash_Lookup_row76.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row76");
				}

				ok_Hash.put("tAdvancedHash_row76", true);
				end_Hash.put("tAdvancedHash_row76", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row76 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_28 finally ] start
				 */

				currentComponent = "tHashInput_28";

				/**
				 * [tHashInput_28 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row76 finally ] start
				 */

				currentComponent = "tAdvancedHash_row76";

				/**
				 * [tAdvancedHash_row76 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_28_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String KPI_id;

		public String getKPI_id() {
			return this.KPI_id;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_name;

		public String getKPI_name() {
			return this.KPI_name;
		}

		public Double Prop_target;

		public Double getProp_target() {
			return this.Prop_target;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public String S_JS;

		public String getS_JS() {
			return this.S_JS;
		}

		public Integer KPI_dierection;

		public Integer getKPI_dierection() {
			return this.KPI_dierection;
		}

		public String Year;

		public String getYear() {
			return this.Year;
		}

		public String Month;

		public String getMonth() {
			return this.Month;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public Double Apa;

		public Double getApa() {
			return this.Apa;
		}

		public Double Amb_target;

		public Double getAmb_target() {
			return this.Amb_target;
		}

		public String Category_change;

		public String getCategory_change() {
			return this.Category_change;
		}

		public String Target_Type;

		public String getTarget_Type() {
			return this.Target_Type;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public Double baseline;

		public Double getBaseline() {
			return this.baseline;
		}

		public String unit;

		public String getUnit() {
			return this.unit;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.KPI_id == null) ? 0 : this.KPI_id.hashCode());

				result = prime * result + ((this.Year == null) ? 0 : this.Year.hashCode());

				result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.KPI_id == null) {
				if (other.KPI_id != null)
					return false;

			} else if (!this.KPI_id.equals(other.KPI_id))

				return false;

			if (this.Year == null) {
				if (other.Year != null)
					return false;

			} else if (!this.Year.equals(other.Year))

				return false;

			if (this.WEEK_OF_YEAR == null) {
				if (other.WEEK_OF_YEAR != null)
					return false;

			} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.KPI_id = this.KPI_id;
			other.Is_weekly = this.Is_weekly;
			other.BU = this.BU;
			other.KPI_name = this.KPI_name;
			other.Prop_target = this.Prop_target;
			other.weight = this.weight;
			other.JS = this.JS;
			other.S_JS = this.S_JS;
			other.KPI_dierection = this.KPI_dierection;
			other.Year = this.Year;
			other.Month = this.Month;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.Apa = this.Apa;
			other.Amb_target = this.Amb_target;
			other.Category_change = this.Category_change;
			other.Target_Type = this.Target_Type;
			other.SUB_BU = this.SUB_BU;
			other.baseline = this.baseline;
			other.unit = this.unit;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.KPI_id = this.KPI_id;
			other.Year = this.Year;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.KPI_id = readString(dis);

					this.Year = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.KPI_id, dos);

				// String

				writeString(this.Year, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Is_weekly = readString(dis, ois);

				this.BU = readString(dis, ois);

				this.KPI_name = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Prop_target = null;
				} else {
					this.Prop_target = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.weight = null;
				} else {
					this.weight = dis.readDouble();
				}

				this.JS = readString(dis, ois);

				this.S_JS = readString(dis, ois);

				this.KPI_dierection = readInteger(dis, ois);

				this.Month = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Apa = null;
				} else {
					this.Apa = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Amb_target = null;
				} else {
					this.Amb_target = dis.readDouble();
				}

				this.Category_change = readString(dis, ois);

				this.Target_Type = readString(dis, ois);

				this.SUB_BU = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.baseline = null;
				} else {
					this.baseline = dis.readDouble();
				}

				this.unit = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Is_weekly, dos, oos);

				writeString(this.BU, dos, oos);

				writeString(this.KPI_name, dos, oos);

				if (this.Prop_target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Prop_target);
				}

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				writeString(this.JS, dos, oos);

				writeString(this.S_JS, dos, oos);

				writeInteger(this.KPI_dierection, dos, oos);

				writeString(this.Month, dos, oos);

				if (this.Apa == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Apa);
				}

				if (this.Amb_target == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Amb_target);
				}

				writeString(this.Category_change, dos, oos);

				writeString(this.Target_Type, dos, oos);

				writeString(this.SUB_BU, dos, oos);

				if (this.baseline == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.baseline);
				}

				writeString(this.unit, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("KPI_id=" + KPI_id);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append(",BU=" + BU);
			sb.append(",KPI_name=" + KPI_name);
			sb.append(",Prop_target=" + String.valueOf(Prop_target));
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",JS=" + JS);
			sb.append(",S_JS=" + S_JS);
			sb.append(",KPI_dierection=" + String.valueOf(KPI_dierection));
			sb.append(",Year=" + Year);
			sb.append(",Month=" + Month);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",Apa=" + String.valueOf(Apa));
			sb.append(",Amb_target=" + String.valueOf(Amb_target));
			sb.append(",Category_change=" + Category_change);
			sb.append(",Target_Type=" + Target_Type);
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",baseline=" + String.valueOf(baseline));
			sb.append(",unit=" + unit);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KPI_id, other.KPI_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Year, other.Year);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.WEEK_OF_YEAR, other.WEEK_OF_YEAR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tHashInput_3 - inputs:(after_tHashInput_4) outputs:(row7,row7) |
				// target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
				// linked node: tMap_2 - inputs:(row6,row7) outputs:(out1,out3)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct>getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tHashInput_3 begin ] start
				 */

				ok_Hash.put("tHashInput_3", false);
				start_Hash.put("tHashInput_3", System.currentTimeMillis());

				currentComponent = "tHashInput_3";

				int tos_count_tHashInput_3 = 0;

				int nb_line_tHashInput_3 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tMap_23_outStruct> tHashFile_tHashInput_3 = mf_tHashInput_3
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_2");
				if (tHashFile_tHashInput_3 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tMap_23_outStruct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
				while (iterator_tHashInput_3.hasNext()) {
					tMap_23_outStruct next_tHashInput_3 = iterator_tHashInput_3.next();

					row7.KPI_id = next_tHashInput_3.KPI_id;
					row7.Is_weekly = next_tHashInput_3.Is_weekly;
					row7.BU = next_tHashInput_3.BU;
					row7.KPI_name = next_tHashInput_3.KPI_name;
					row7.Prop_target = next_tHashInput_3.Prop_target;
					row7.weight = next_tHashInput_3.weight;
					row7.JS = next_tHashInput_3.JS;
					row7.S_JS = next_tHashInput_3.S_JS;
					row7.KPI_dierection = next_tHashInput_3.KPI_dierection;
					row7.Year = next_tHashInput_3.Year;
					row7.Month = next_tHashInput_3.Month;
					row7.WEEK_OF_YEAR = next_tHashInput_3.WEEK_OF_YEAR;
					row7.Apa = next_tHashInput_3.Apa;
					row7.Amb_target = next_tHashInput_3.Amb_target;
					row7.Category_change = next_tHashInput_3.Category_change;
					row7.Target_Type = next_tHashInput_3.Target_Type;
					row7.SUB_BU = next_tHashInput_3.SUB_BU;
					row7.baseline = next_tHashInput_3.baseline;
					row7.unit = next_tHashInput_3.unit;

					/**
					 * [tHashInput_3 begin ] stop
					 */

					/**
					 * [tHashInput_3 main ] start
					 */

					currentComponent = "tHashInput_3";

					tos_count_tHashInput_3++;

					/**
					 * [tHashInput_3 main ] stop
					 */

					/**
					 * [tHashInput_3 process_data_begin ] start
					 */

					currentComponent = "tHashInput_3";

					/**
					 * [tHashInput_3 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row7 main ] start
					 */

					currentComponent = "tAdvancedHash_row7";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
					}

					row7Struct row7_HashRow = new row7Struct();

					row7_HashRow.KPI_id = row7.KPI_id;

					row7_HashRow.Is_weekly = row7.Is_weekly;

					row7_HashRow.BU = row7.BU;

					row7_HashRow.KPI_name = row7.KPI_name;

					row7_HashRow.Prop_target = row7.Prop_target;

					row7_HashRow.weight = row7.weight;

					row7_HashRow.JS = row7.JS;

					row7_HashRow.S_JS = row7.S_JS;

					row7_HashRow.KPI_dierection = row7.KPI_dierection;

					row7_HashRow.Year = row7.Year;

					row7_HashRow.Month = row7.Month;

					row7_HashRow.WEEK_OF_YEAR = row7.WEEK_OF_YEAR;

					row7_HashRow.Apa = row7.Apa;

					row7_HashRow.Amb_target = row7.Amb_target;

					row7_HashRow.Category_change = row7.Category_change;

					row7_HashRow.Target_Type = row7.Target_Type;

					row7_HashRow.SUB_BU = row7.SUB_BU;

					row7_HashRow.baseline = row7.baseline;

					row7_HashRow.unit = row7.unit;

					tHash_Lookup_row7.put(row7_HashRow);

					tos_count_tAdvancedHash_row7++;

					/**
					 * [tAdvancedHash_row7 main ] stop
					 */

					/**
					 * [tAdvancedHash_row7 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row7";

					/**
					 * [tAdvancedHash_row7 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row7 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row7";

					/**
					 * [tAdvancedHash_row7 process_data_end ] stop
					 */

					/**
					 * [tHashInput_3 process_data_end ] start
					 */

					currentComponent = "tHashInput_3";

					/**
					 * [tHashInput_3 process_data_end ] stop
					 */

					/**
					 * [tHashInput_3 end ] start
					 */

					currentComponent = "tHashInput_3";

					nb_line_tHashInput_3++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_2");

				globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);

				ok_Hash.put("tHashInput_3", true);
				end_Hash.put("tHashInput_3", System.currentTimeMillis());

				/**
				 * [tHashInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_3 finally ] start
				 */

				currentComponent = "tHashInput_3";

				/**
				 * [tHashInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row86Struct implements routines.system.IPersistableComparableLookupRow<row86Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Month_Differnece;

		public Double getMonth_Differnece() {
			return this.Month_Differnece;
		}

		public Double Angle_Of_KPI;

		public Double getAngle_Of_KPI() {
			return this.Angle_Of_KPI;
		}

		public Integer Achieved;

		public Integer getAchieved() {
			return this.Achieved;
		}

		public Double Distance;

		public Double getDistance() {
			return this.Distance;
		}

		public String Weight_Disc;

		public String getWeight_Disc() {
			return this.Weight_Disc;
		}

		public String Total_BU;

		public String getTotal_BU() {
			return this.Total_BU;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		public String SUB_BU;

		public String getSUB_BU() {
			return this.SUB_BU;
		}

		public String Is_weekly;

		public String getIs_weekly() {
			return this.Is_weekly;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

				result = prime * result + ((this.MONTH_OF_YEAR == null) ? 0 : this.MONTH_OF_YEAR.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row86Struct other = (row86Struct) obj;

			if (this.YEAR_NUM == null) {
				if (other.YEAR_NUM != null)
					return false;

			} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))

				return false;

			if (this.MONTH_OF_YEAR == null) {
				if (other.MONTH_OF_YEAR != null)
					return false;

			} else if (!this.MONTH_OF_YEAR.equals(other.MONTH_OF_YEAR))

				return false;

			return true;
		}

		public void copyDataTo(row86Struct other) {

			other.YEAR_NUM = this.YEAR_NUM;
			other.MONTH_OF_YEAR = this.MONTH_OF_YEAR;
			other.BU = this.BU;
			other.KPI_ID = this.KPI_ID;
			other.FREQUENCY = this.FREQUENCY;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.KPI_DESC = this.KPI_DESC;
			other.Weight = this.Weight;
			other.JS = this.JS;
			other.Month_Differnece = this.Month_Differnece;
			other.Angle_Of_KPI = this.Angle_Of_KPI;
			other.Achieved = this.Achieved;
			other.Distance = this.Distance;
			other.Weight_Disc = this.Weight_Disc;
			other.Total_BU = this.Total_BU;
			other.Title = this.Title;
			other.Score = this.Score;
			other.SUB_BU = this.SUB_BU;
			other.Is_weekly = this.Is_weekly;

		}

		public void copyKeysDataTo(row86Struct other) {

			other.YEAR_NUM = this.YEAR_NUM;
			other.MONTH_OF_YEAR = this.MONTH_OF_YEAR;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.BU = readString(dis, ois);

				this.KPI_ID = readString(dis, ois);

				this.FREQUENCY = readString(dis, ois);

				this.WEEK_OF_YEAR = readString(dis, ois);

				this.KPI_DESC = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Weight = null;
				} else {
					this.Weight = dis.readDouble();
				}

				this.JS = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Month_Differnece = null;
				} else {
					this.Month_Differnece = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Angle_Of_KPI = null;
				} else {
					this.Angle_Of_KPI = dis.readDouble();
				}

				this.Achieved = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Distance = null;
				} else {
					this.Distance = dis.readDouble();
				}

				this.Weight_Disc = readString(dis, ois);

				this.Total_BU = readString(dis, ois);

				this.Title = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Score = null;
				} else {
					this.Score = dis.readDouble();
				}

				this.SUB_BU = readString(dis, ois);

				this.Is_weekly = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.BU, dos, oos);

				writeString(this.KPI_ID, dos, oos);

				writeString(this.FREQUENCY, dos, oos);

				writeString(this.WEEK_OF_YEAR, dos, oos);

				writeString(this.KPI_DESC, dos, oos);

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				writeString(this.JS, dos, oos);

				if (this.Month_Differnece == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Month_Differnece);
				}

				if (this.Angle_Of_KPI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Angle_Of_KPI);
				}

				writeInteger(this.Achieved, dos, oos);

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Distance);
				}

				writeString(this.Weight_Disc, dos, oos);

				writeString(this.Total_BU, dos, oos);

				writeString(this.Title, dos, oos);

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

				writeString(this.SUB_BU, dos, oos);

				writeString(this.Is_weekly, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Month_Differnece=" + String.valueOf(Month_Differnece));
			sb.append(",Angle_Of_KPI=" + String.valueOf(Angle_Of_KPI));
			sb.append(",Achieved=" + String.valueOf(Achieved));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",Weight_Disc=" + Weight_Disc);
			sb.append(",Total_BU=" + Total_BU);
			sb.append(",Title=" + Title);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append(",SUB_BU=" + SUB_BU);
			sb.append(",Is_weekly=" + Is_weekly);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row86Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.YEAR_NUM, other.YEAR_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.MONTH_OF_YEAR, other.MONTH_OF_YEAR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_30_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row86Struct row86 = new row86Struct();

				/**
				 * [tAdvancedHash_row86 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row86", false);
				start_Hash.put("tAdvancedHash_row86", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row86";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row86");
				}

				int tos_count_tAdvancedHash_row86 = 0;

				// connection name:row86
				// source node:tHashInput_30 - inputs:(after_tHashInput_24)
				// outputs:(row86,row86) | target node:tAdvancedHash_row86 - inputs:(row86)
				// outputs:()
				// linked node: tMap_14 - inputs:(row85,row86) outputs:(out12)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row86 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row86Struct> tHash_Lookup_row86 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row86Struct>getLookup(matchingModeEnum_row86);

				globalMap.put("tHash_Lookup_row86", tHash_Lookup_row86);

				/**
				 * [tAdvancedHash_row86 begin ] stop
				 */

				/**
				 * [tHashInput_30 begin ] start
				 */

				ok_Hash.put("tHashInput_30", false);
				start_Hash.put("tHashInput_30", System.currentTimeMillis());

				currentComponent = "tHashInput_30";

				int tos_count_tHashInput_30 = 0;

				int nb_line_tHashInput_30 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_30 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row104Struct> tHashFile_tHashInput_30 = mf_tHashInput_30
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_23");
				if (tHashFile_tHashInput_30 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row104Struct> iterator_tHashInput_30 = tHashFile_tHashInput_30.iterator();
				while (iterator_tHashInput_30.hasNext()) {
					row104Struct next_tHashInput_30 = iterator_tHashInput_30.next();

					row86.YEAR_NUM = next_tHashInput_30.YEAR_NUM;
					row86.MONTH_OF_YEAR = next_tHashInput_30.MONTH_OF_YEAR;
					row86.BU = next_tHashInput_30.BU;
					row86.KPI_ID = next_tHashInput_30.KPI_ID;
					row86.FREQUENCY = next_tHashInput_30.FREQUENCY;
					row86.WEEK_OF_YEAR = next_tHashInput_30.WEEK_OF_YEAR;
					row86.KPI_DESC = next_tHashInput_30.KPI_DESC;
					row86.Weight = next_tHashInput_30.Weight;
					row86.JS = next_tHashInput_30.JS;
					row86.Month_Differnece = next_tHashInput_30.Month_Differnece;
					row86.Angle_Of_KPI = next_tHashInput_30.Angle_Of_KPI;
					row86.Achieved = next_tHashInput_30.Achieved;
					row86.Distance = next_tHashInput_30.Distance;
					row86.Weight_Disc = next_tHashInput_30.Weight_Disc;
					row86.Total_BU = next_tHashInput_30.Total_BU;
					row86.Title = next_tHashInput_30.Title;
					row86.Score = next_tHashInput_30.Score;
					row86.SUB_BU = next_tHashInput_30.SUB_BU;
					row86.Is_weekly = next_tHashInput_30.Is_weekly;

					/**
					 * [tHashInput_30 begin ] stop
					 */

					/**
					 * [tHashInput_30 main ] start
					 */

					currentComponent = "tHashInput_30";

					tos_count_tHashInput_30++;

					/**
					 * [tHashInput_30 main ] stop
					 */

					/**
					 * [tHashInput_30 process_data_begin ] start
					 */

					currentComponent = "tHashInput_30";

					/**
					 * [tHashInput_30 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row86 main ] start
					 */

					currentComponent = "tAdvancedHash_row86";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row86");
					}

					row86Struct row86_HashRow = new row86Struct();

					row86_HashRow.YEAR_NUM = row86.YEAR_NUM;

					row86_HashRow.MONTH_OF_YEAR = row86.MONTH_OF_YEAR;

					row86_HashRow.BU = row86.BU;

					row86_HashRow.KPI_ID = row86.KPI_ID;

					row86_HashRow.FREQUENCY = row86.FREQUENCY;

					row86_HashRow.WEEK_OF_YEAR = row86.WEEK_OF_YEAR;

					row86_HashRow.KPI_DESC = row86.KPI_DESC;

					row86_HashRow.Weight = row86.Weight;

					row86_HashRow.JS = row86.JS;

					row86_HashRow.Month_Differnece = row86.Month_Differnece;

					row86_HashRow.Angle_Of_KPI = row86.Angle_Of_KPI;

					row86_HashRow.Achieved = row86.Achieved;

					row86_HashRow.Distance = row86.Distance;

					row86_HashRow.Weight_Disc = row86.Weight_Disc;

					row86_HashRow.Total_BU = row86.Total_BU;

					row86_HashRow.Title = row86.Title;

					row86_HashRow.Score = row86.Score;

					row86_HashRow.SUB_BU = row86.SUB_BU;

					row86_HashRow.Is_weekly = row86.Is_weekly;

					tHash_Lookup_row86.put(row86_HashRow);

					tos_count_tAdvancedHash_row86++;

					/**
					 * [tAdvancedHash_row86 main ] stop
					 */

					/**
					 * [tAdvancedHash_row86 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row86";

					/**
					 * [tAdvancedHash_row86 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row86 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row86";

					/**
					 * [tAdvancedHash_row86 process_data_end ] stop
					 */

					/**
					 * [tHashInput_30 process_data_end ] start
					 */

					currentComponent = "tHashInput_30";

					/**
					 * [tHashInput_30 process_data_end ] stop
					 */

					/**
					 * [tHashInput_30 end ] start
					 */

					currentComponent = "tHashInput_30";

					nb_line_tHashInput_30++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_23");

				globalMap.put("tHashInput_30_NB_LINE", nb_line_tHashInput_30);

				ok_Hash.put("tHashInput_30", true);
				end_Hash.put("tHashInput_30", System.currentTimeMillis());

				/**
				 * [tHashInput_30 end ] stop
				 */

				/**
				 * [tAdvancedHash_row86 end ] start
				 */

				currentComponent = "tAdvancedHash_row86";

				tHash_Lookup_row86.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row86");
				}

				ok_Hash.put("tAdvancedHash_row86", true);
				end_Hash.put("tAdvancedHash_row86", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row86 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_30 finally ] start
				 */

				currentComponent = "tHashInput_30";

				/**
				 * [tHashInput_30 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row86 finally ] start
				 */

				currentComponent = "tAdvancedHash_row86";

				/**
				 * [tAdvancedHash_row86 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_30_SUBPROCESS_STATE", 1);
	}

	public static class row102Struct implements routines.system.IPersistableComparableLookupRow<row102Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Score;

		public Double getScore() {
			return this.Score;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

				result = prime * result + ((this.MONTH_OF_YEAR == null) ? 0 : this.MONTH_OF_YEAR.hashCode());

				result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

				result = prime * result + ((this.BU == null) ? 0 : this.BU.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row102Struct other = (row102Struct) obj;

			if (this.YEAR_NUM == null) {
				if (other.YEAR_NUM != null)
					return false;

			} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))

				return false;

			if (this.MONTH_OF_YEAR == null) {
				if (other.MONTH_OF_YEAR != null)
					return false;

			} else if (!this.MONTH_OF_YEAR.equals(other.MONTH_OF_YEAR))

				return false;

			if (this.WEEK_OF_YEAR == null) {
				if (other.WEEK_OF_YEAR != null)
					return false;

			} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))

				return false;

			if (this.BU == null) {
				if (other.BU != null)
					return false;

			} else if (!this.BU.equals(other.BU))

				return false;

			return true;
		}

		public void copyDataTo(row102Struct other) {

			other.YEAR_NUM = this.YEAR_NUM;
			other.MONTH_OF_YEAR = this.MONTH_OF_YEAR;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.BU = this.BU;
			other.Score = this.Score;

		}

		public void copyKeysDataTo(row102Struct other) {

			other.YEAR_NUM = this.YEAR_NUM;
			other.MONTH_OF_YEAR = this.MONTH_OF_YEAR;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.BU = this.BU;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.MONTH_OF_YEAR = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.MONTH_OF_YEAR, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.Score = null;
				} else {
					this.Score = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.Score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Score);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Score=" + String.valueOf(Score));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row102Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.YEAR_NUM, other.YEAR_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.MONTH_OF_YEAR, other.MONTH_OF_YEAR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.WEEK_OF_YEAR, other.WEEK_OF_YEAR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.BU, other.BU);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_36Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_36_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row102Struct row102 = new row102Struct();

				/**
				 * [tAdvancedHash_row102 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row102", false);
				start_Hash.put("tAdvancedHash_row102", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row102";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row102");
				}

				int tos_count_tAdvancedHash_row102 = 0;

				// connection name:row102
				// source node:tHashInput_36 - inputs:(after_tHashInput_35)
				// outputs:(row102,row102) | target node:tAdvancedHash_row102 - inputs:(row102)
				// outputs:()
				// linked node: tMap_31 - inputs:(row101,row102) outputs:(out18)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row102 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row102Struct> tHash_Lookup_row102 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row102Struct>getLookup(matchingModeEnum_row102);

				globalMap.put("tHash_Lookup_row102", tHash_Lookup_row102);

				/**
				 * [tAdvancedHash_row102 begin ] stop
				 */

				/**
				 * [tHashInput_36 begin ] start
				 */

				ok_Hash.put("tHashInput_36", false);
				start_Hash.put("tHashInput_36", System.currentTimeMillis());

				currentComponent = "tHashInput_36";

				int tos_count_tHashInput_36 = 0;

				int nb_line_tHashInput_36 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_36 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tMap_29_MainStruct> tHashFile_tHashInput_36 = mf_tHashInput_36
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_27");
				if (tHashFile_tHashInput_36 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tMap_29_MainStruct> iterator_tHashInput_36 = tHashFile_tHashInput_36.iterator();
				while (iterator_tHashInput_36.hasNext()) {
					tMap_29_MainStruct next_tHashInput_36 = iterator_tHashInput_36.next();

					row102.YEAR_NUM = next_tHashInput_36.YEAR_NUM;
					row102.MONTH_OF_YEAR = next_tHashInput_36.MONTH_OF_YEAR;
					row102.WEEK_OF_YEAR = next_tHashInput_36.WEEK_OF_YEAR;
					row102.BU = next_tHashInput_36.BU;
					row102.Score = next_tHashInput_36.Score;

					/**
					 * [tHashInput_36 begin ] stop
					 */

					/**
					 * [tHashInput_36 main ] start
					 */

					currentComponent = "tHashInput_36";

					tos_count_tHashInput_36++;

					/**
					 * [tHashInput_36 main ] stop
					 */

					/**
					 * [tHashInput_36 process_data_begin ] start
					 */

					currentComponent = "tHashInput_36";

					/**
					 * [tHashInput_36 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row102 main ] start
					 */

					currentComponent = "tAdvancedHash_row102";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row102");
					}

					row102Struct row102_HashRow = new row102Struct();

					row102_HashRow.YEAR_NUM = row102.YEAR_NUM;

					row102_HashRow.MONTH_OF_YEAR = row102.MONTH_OF_YEAR;

					row102_HashRow.WEEK_OF_YEAR = row102.WEEK_OF_YEAR;

					row102_HashRow.BU = row102.BU;

					row102_HashRow.Score = row102.Score;

					tHash_Lookup_row102.put(row102_HashRow);

					tos_count_tAdvancedHash_row102++;

					/**
					 * [tAdvancedHash_row102 main ] stop
					 */

					/**
					 * [tAdvancedHash_row102 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row102";

					/**
					 * [tAdvancedHash_row102 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row102 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row102";

					/**
					 * [tAdvancedHash_row102 process_data_end ] stop
					 */

					/**
					 * [tHashInput_36 process_data_end ] start
					 */

					currentComponent = "tHashInput_36";

					/**
					 * [tHashInput_36 process_data_end ] stop
					 */

					/**
					 * [tHashInput_36 end ] start
					 */

					currentComponent = "tHashInput_36";

					nb_line_tHashInput_36++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_27");

				globalMap.put("tHashInput_36_NB_LINE", nb_line_tHashInput_36);

				ok_Hash.put("tHashInput_36", true);
				end_Hash.put("tHashInput_36", System.currentTimeMillis());

				/**
				 * [tHashInput_36 end ] stop
				 */

				/**
				 * [tAdvancedHash_row102 end ] start
				 */

				currentComponent = "tAdvancedHash_row102";

				tHash_Lookup_row102.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row102");
				}

				ok_Hash.put("tAdvancedHash_row102", true);
				end_Hash.put("tAdvancedHash_row102", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row102 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_36 finally ] start
				 */

				currentComponent = "tHashInput_36";

				/**
				 * [tHashInput_36 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row102 finally ] start
				 */

				currentComponent = "tAdvancedHash_row102";

				/**
				 * [tAdvancedHash_row102 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_36_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public java.util.Date OBS_DATE;

		public java.util.Date getOBS_DATE() {
			return this.OBS_DATE;
		}

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String MONTH_OF_YEAR;

		public String getMONTH_OF_YEAR() {
			return this.MONTH_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public String KPI_ID;

		public String getKPI_ID() {
			return this.KPI_ID;
		}

		public Double VAL;

		public Double getVAL() {
			return this.VAL;
		}

		public String FREQUENCY;

		public String getFREQUENCY() {
			return this.FREQUENCY;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String KPI_ID2;

		public String getKPI_ID2() {
			return this.KPI_ID2;
		}

		public String KPI_SEGMENT;

		public String getKPI_SEGMENT() {
			return this.KPI_SEGMENT;
		}

		public String KPI_DESC;

		public String getKPI_DESC() {
			return this.KPI_DESC;
		}

		public String BU2;

		public String getBU2() {
			return this.BU2;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

				result = prime * result + ((this.KPI_ID == null) ? 0 : this.KPI_ID.hashCode());

				result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.YEAR_NUM == null) {
				if (other.YEAR_NUM != null)
					return false;

			} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))

				return false;

			if (this.KPI_ID == null) {
				if (other.KPI_ID != null)
					return false;

			} else if (!this.KPI_ID.equals(other.KPI_ID))

				return false;

			if (this.WEEK_OF_YEAR == null) {
				if (other.WEEK_OF_YEAR != null)
					return false;

			} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.OBS_DATE = this.OBS_DATE;
			other.YEAR_NUM = this.YEAR_NUM;
			other.MONTH_OF_YEAR = this.MONTH_OF_YEAR;
			other.BU = this.BU;
			other.KPI_ID = this.KPI_ID;
			other.VAL = this.VAL;
			other.FREQUENCY = this.FREQUENCY;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.KPI_ID2 = this.KPI_ID2;
			other.KPI_SEGMENT = this.KPI_SEGMENT;
			other.KPI_DESC = this.KPI_DESC;
			other.BU2 = this.BU2;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.YEAR_NUM = this.YEAR_NUM;
			other.KPI_ID = this.KPI_ID;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;

		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.KPI_ID = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.KPI_ID, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.OBS_DATE = readDate(dis, ois);

				this.MONTH_OF_YEAR = readString(dis, ois);

				this.BU = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.VAL = null;
				} else {
					this.VAL = dis.readDouble();
				}

				this.FREQUENCY = readString(dis, ois);

				this.KPI_ID2 = readString(dis, ois);

				this.KPI_SEGMENT = readString(dis, ois);

				this.KPI_DESC = readString(dis, ois);

				this.BU2 = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeDate(this.OBS_DATE, dos, oos);

				writeString(this.MONTH_OF_YEAR, dos, oos);

				writeString(this.BU, dos, oos);

				if (this.VAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.VAL);
				}

				writeString(this.FREQUENCY, dos, oos);

				writeString(this.KPI_ID2, dos, oos);

				writeString(this.KPI_SEGMENT, dos, oos);

				writeString(this.KPI_DESC, dos, oos);

				writeString(this.BU2, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OBS_DATE=" + String.valueOf(OBS_DATE));
			sb.append(",YEAR_NUM=" + YEAR_NUM);
			sb.append(",MONTH_OF_YEAR=" + MONTH_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",KPI_ID=" + KPI_ID);
			sb.append(",VAL=" + String.valueOf(VAL));
			sb.append(",FREQUENCY=" + FREQUENCY);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",KPI_ID2=" + KPI_ID2);
			sb.append(",KPI_SEGMENT=" + KPI_SEGMENT);
			sb.append(",KPI_DESC=" + KPI_DESC);
			sb.append(",BU2=" + BU2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.YEAR_NUM, other.YEAR_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.KPI_ID, other.KPI_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.WEEK_OF_YEAR, other.WEEK_OF_YEAR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tAdvancedHash_row10 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row10", false);
				start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tAdvancedHash_row10 = 0;

				// connection name:row10
				// source node:tHashInput_6 - inputs:(after_tHashInput_1) outputs:(row10,row10)
				// | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
				// linked node: tMap_3 - inputs:(row5,row10) outputs:(out2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row10Struct>getLookup(matchingModeEnum_row10);

				globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);

				/**
				 * [tAdvancedHash_row10 begin ] stop
				 */

				/**
				 * [tHashInput_6 begin ] start
				 */

				ok_Hash.put("tHashInput_6", false);
				start_Hash.put("tHashInput_6", System.currentTimeMillis());

				currentComponent = "tHashInput_6";

				int tos_count_tHashInput_6 = 0;

				int nb_line_tHashInput_6 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_6 = mf_tHashInput_6
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_1");
				if (tHashFile_tHashInput_6 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row8Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
				while (iterator_tHashInput_6.hasNext()) {
					row8Struct next_tHashInput_6 = iterator_tHashInput_6.next();

					row10.OBS_DATE = next_tHashInput_6.OBS_DATE;
					row10.YEAR_NUM = next_tHashInput_6.YEAR_NUM;
					row10.MONTH_OF_YEAR = next_tHashInput_6.MONTH_OF_YEAR;
					row10.BU = next_tHashInput_6.BU;
					row10.KPI_ID = next_tHashInput_6.KPI_ID;
					row10.VAL = next_tHashInput_6.VAL;
					row10.FREQUENCY = next_tHashInput_6.FREQUENCY;
					row10.WEEK_OF_YEAR = next_tHashInput_6.WEEK_OF_YEAR;
					row10.KPI_ID2 = next_tHashInput_6.KPI_ID2;
					row10.KPI_SEGMENT = next_tHashInput_6.KPI_SEGMENT;
					row10.KPI_DESC = next_tHashInput_6.KPI_DESC;
					row10.BU2 = next_tHashInput_6.BU2;

					/**
					 * [tHashInput_6 begin ] stop
					 */

					/**
					 * [tHashInput_6 main ] start
					 */

					currentComponent = "tHashInput_6";

					tos_count_tHashInput_6++;

					/**
					 * [tHashInput_6 main ] stop
					 */

					/**
					 * [tHashInput_6 process_data_begin ] start
					 */

					currentComponent = "tHashInput_6";

					/**
					 * [tHashInput_6 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row10 main ] start
					 */

					currentComponent = "tAdvancedHash_row10";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row10");
					}

					row10Struct row10_HashRow = new row10Struct();

					row10_HashRow.OBS_DATE = row10.OBS_DATE;

					row10_HashRow.YEAR_NUM = row10.YEAR_NUM;

					row10_HashRow.MONTH_OF_YEAR = row10.MONTH_OF_YEAR;

					row10_HashRow.BU = row10.BU;

					row10_HashRow.KPI_ID = row10.KPI_ID;

					row10_HashRow.VAL = row10.VAL;

					row10_HashRow.FREQUENCY = row10.FREQUENCY;

					row10_HashRow.WEEK_OF_YEAR = row10.WEEK_OF_YEAR;

					row10_HashRow.KPI_ID2 = row10.KPI_ID2;

					row10_HashRow.KPI_SEGMENT = row10.KPI_SEGMENT;

					row10_HashRow.KPI_DESC = row10.KPI_DESC;

					row10_HashRow.BU2 = row10.BU2;

					tHash_Lookup_row10.put(row10_HashRow);

					tos_count_tAdvancedHash_row10++;

					/**
					 * [tAdvancedHash_row10 main ] stop
					 */

					/**
					 * [tAdvancedHash_row10 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row10";

					/**
					 * [tAdvancedHash_row10 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row10 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row10";

					/**
					 * [tAdvancedHash_row10 process_data_end ] stop
					 */

					/**
					 * [tHashInput_6 process_data_end ] start
					 */

					currentComponent = "tHashInput_6";

					/**
					 * [tHashInput_6 process_data_end ] stop
					 */

					/**
					 * [tHashInput_6 end ] start
					 */

					currentComponent = "tHashInput_6";

					nb_line_tHashInput_6++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_1");

				globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);

				ok_Hash.put("tHashInput_6", true);
				end_Hash.put("tHashInput_6", System.currentTimeMillis());

				/**
				 * [tHashInput_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 end ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				tHash_Lookup_row10.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tAdvancedHash_row10", true);
				end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row10 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_6 finally ] start
				 */

				currentComponent = "tHashInput_6";

				/**
				 * [tHashInput_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row10 finally ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				/**
				 * [tAdvancedHash_row10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements routines.system.IPersistableComparableLookupRow<row22Struct> {
		final static byte[] commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		static byte[] commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String YEAR_NUM;

		public String getYEAR_NUM() {
			return this.YEAR_NUM;
		}

		public String WEEK_OF_YEAR;

		public String getWEEK_OF_YEAR() {
			return this.WEEK_OF_YEAR;
		}

		public String BU;

		public String getBU() {
			return this.BU;
		}

		public Double Weight;

		public Double getWeight() {
			return this.Weight;
		}

		public String JS;

		public String getJS() {
			return this.JS;
		}

		public Double Max_W;

		public Double getMax_W() {
			return this.Max_W;
		}

		public Double Min_W;

		public Double getMin_W() {
			return this.Min_W;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.YEAR_NUM == null) ? 0 : this.YEAR_NUM.hashCode());

				result = prime * result + ((this.WEEK_OF_YEAR == null) ? 0 : this.WEEK_OF_YEAR.hashCode());

				result = prime * result + ((this.BU == null) ? 0 : this.BU.hashCode());

				result = prime * result + ((this.JS == null) ? 0 : this.JS.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row22Struct other = (row22Struct) obj;

			if (this.YEAR_NUM == null) {
				if (other.YEAR_NUM != null)
					return false;

			} else if (!this.YEAR_NUM.equals(other.YEAR_NUM))

				return false;

			if (this.WEEK_OF_YEAR == null) {
				if (other.WEEK_OF_YEAR != null)
					return false;

			} else if (!this.WEEK_OF_YEAR.equals(other.WEEK_OF_YEAR))

				return false;

			if (this.BU == null) {
				if (other.BU != null)
					return false;

			} else if (!this.BU.equals(other.BU))

				return false;

			if (this.JS == null) {
				if (other.JS != null)
					return false;

			} else if (!this.JS.equals(other.JS))

				return false;

			return true;
		}

		public void copyDataTo(row22Struct other) {

			other.YEAR_NUM = this.YEAR_NUM;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.BU = this.BU;
			other.Weight = this.Weight;
			other.JS = this.JS;
			other.Max_W = this.Max_W;
			other.Min_W = this.Min_W;

		}

		public void copyKeysDataTo(row22Struct other) {

			other.YEAR_NUM = this.YEAR_NUM;
			other.WEEK_OF_YEAR = this.WEEK_OF_YEAR;
			other.BU = this.BU;
			other.JS = this.JS;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length) {
					if (length < 1024 && commonByteArray_CEO_DASHBOARD_dev_assurance_weekly.length == 0) {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[1024];
					} else {
						commonByteArray_CEO_DASHBOARD_dev_assurance_weekly = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length);
				strReturn = new String(commonByteArray_CEO_DASHBOARD_dev_assurance_weekly, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CEO_DASHBOARD_dev_assurance_weekly) {

				try {

					int length = 0;

					this.YEAR_NUM = readString(dis);

					this.WEEK_OF_YEAR = readString(dis);

					this.BU = readString(dis);

					this.JS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.YEAR_NUM, dos);

				// String

				writeString(this.WEEK_OF_YEAR, dos);

				// String

				writeString(this.BU, dos);

				// String

				writeString(this.JS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.Weight = null;
				} else {
					this.Weight = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Max_W = null;
				} else {
					this.Max_W = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Min_W = null;
				} else {
					this.Min_W = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.Weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weight);
				}

				if (this.Max_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Max_W);
				}

				if (this.Min_W == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Min_W);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("YEAR_NUM=" + YEAR_NUM);
			sb.append(",WEEK_OF_YEAR=" + WEEK_OF_YEAR);
			sb.append(",BU=" + BU);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",JS=" + JS);
			sb.append(",Max_W=" + String.valueOf(Max_W));
			sb.append(",Min_W=" + String.valueOf(Min_W));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.YEAR_NUM, other.YEAR_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.WEEK_OF_YEAR, other.WEEK_OF_YEAR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.BU, other.BU);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.JS, other.JS);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();

				/**
				 * [tAdvancedHash_row22 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row22", false);
				start_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row22";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row22");
				}

				int tos_count_tAdvancedHash_row22 = 0;

				// connection name:row22
				// source node:tHashInput_9 - inputs:(after_tHashInput_8) outputs:(row22,row22)
				// | target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
				// linked node: tMap_6 - inputs:(row21,row22) outputs:(out6)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row22Struct>getLookup(matchingModeEnum_row22);

				globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);

				/**
				 * [tAdvancedHash_row22 begin ] stop
				 */

				/**
				 * [tHashInput_9 begin ] start
				 */

				ok_Hash.put("tHashInput_9", false);
				start_Hash.put("tHashInput_9", System.currentTimeMillis());

				currentComponent = "tHashInput_9";

				int tos_count_tHashInput_9 = 0;

				int nb_line_tHashInput_9 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_9 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct> tHashFile_tHashInput_9 = mf_tHashInput_9
						.getAdvancedMemoryHashFile("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_3");
				if (tHashFile_tHashInput_9 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row14Struct> iterator_tHashInput_9 = tHashFile_tHashInput_9.iterator();
				while (iterator_tHashInput_9.hasNext()) {
					row14Struct next_tHashInput_9 = iterator_tHashInput_9.next();

					row22.YEAR_NUM = next_tHashInput_9.YEAR_NUM_1;
					row22.WEEK_OF_YEAR = next_tHashInput_9.WEEK_OF_YEAR;
					row22.BU = next_tHashInput_9.BU;
					row22.Weight = next_tHashInput_9.weight;
					row22.JS = next_tHashInput_9.JS;
					row22.Max_W = next_tHashInput_9.Max_W;
					row22.Min_W = next_tHashInput_9.Min_W;

					/**
					 * [tHashInput_9 begin ] stop
					 */

					/**
					 * [tHashInput_9 main ] start
					 */

					currentComponent = "tHashInput_9";

					tos_count_tHashInput_9++;

					/**
					 * [tHashInput_9 main ] stop
					 */

					/**
					 * [tHashInput_9 process_data_begin ] start
					 */

					currentComponent = "tHashInput_9";

					/**
					 * [tHashInput_9 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row22 main ] start
					 */

					currentComponent = "tAdvancedHash_row22";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row22");
					}

					row22Struct row22_HashRow = new row22Struct();

					row22_HashRow.YEAR_NUM = row22.YEAR_NUM;

					row22_HashRow.WEEK_OF_YEAR = row22.WEEK_OF_YEAR;

					row22_HashRow.BU = row22.BU;

					row22_HashRow.Weight = row22.Weight;

					row22_HashRow.JS = row22.JS;

					row22_HashRow.Max_W = row22.Max_W;

					row22_HashRow.Min_W = row22.Min_W;

					tHash_Lookup_row22.put(row22_HashRow);

					tos_count_tAdvancedHash_row22++;

					/**
					 * [tAdvancedHash_row22 main ] stop
					 */

					/**
					 * [tAdvancedHash_row22 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row22";

					/**
					 * [tAdvancedHash_row22 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row22 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row22";

					/**
					 * [tAdvancedHash_row22 process_data_end ] stop
					 */

					/**
					 * [tHashInput_9 process_data_end ] start
					 */

					currentComponent = "tHashInput_9";

					/**
					 * [tHashInput_9 process_data_end ] stop
					 */

					/**
					 * [tHashInput_9 end ] start
					 */

					currentComponent = "tHashInput_9";

					nb_line_tHashInput_9++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_dev_assurance_weekly_" + pid + "_tHashOutput_3");

				globalMap.put("tHashInput_9_NB_LINE", nb_line_tHashInput_9);

				ok_Hash.put("tHashInput_9", true);
				end_Hash.put("tHashInput_9", System.currentTimeMillis());

				/**
				 * [tHashInput_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row22 end ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				tHash_Lookup_row22.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row22");
				}

				ok_Hash.put("tAdvancedHash_row22", true);
				end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row22 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_9 finally ] start
				 */

				currentComponent = "tHashInput_9";

				/**
				 * [tHashInput_9 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row22 finally ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				/**
				 * [tAdvancedHash_row22 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_9_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final dev_assurance_weekly dev_assurance_weeklyClass = new dev_assurance_weekly();

		int exitCode = dev_assurance_weeklyClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = dev_assurance_weekly.class.getClassLoader().getResourceAsStream(
					"ceo_dashboard/dev_assurance_weekly_0_2/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = dev_assurance_weekly.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("ceo_path", "id_String");
					context.ceo_path = (String) context.getProperty("ceo_path");
					context.setContextType("month_from_input", "id_String");
					context.month_from_input = (String) context.getProperty("month_from_input");
					context.setContextType("month_to", "id_String");
					context.month_to = (String) context.getProperty("month_to");
					context.setContextType("year", "id_String");
					context.year = (String) context.getProperty("year");
					context.setContextType("month_from_extract", "id_String");
					context.month_from_extract = (String) context.getProperty("month_from_extract");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("ceo_path")) {
				context.ceo_path = (String) parentContextMap.get("ceo_path");
			}
			if (parentContextMap.containsKey("month_from_input")) {
				context.month_from_input = (String) parentContextMap.get("month_from_input");
			}
			if (parentContextMap.containsKey("month_to")) {
				context.month_to = (String) parentContextMap.get("month_to");
			}
			if (parentContextMap.containsKey("year")) {
				context.year = (String) parentContextMap.get("year");
			}
			if (parentContextMap.containsKey("month_from_extract")) {
				context.month_from_extract = (String) parentContextMap.get("month_from_extract");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFixedFlowInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFixedFlowInput_2) {
			globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", -1);

			e_tFixedFlowInput_2.printStackTrace();

		}
		try {
			errorCode = null;
			tHashInput_13Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tHashInput_13) {
			globalMap.put("tHashInput_13_SUBPROCESS_STATE", -1);

			e_tHashInput_13.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : dev_assurance_weekly");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 2216666 characters generated by Talend Open Studio for Data Integration on
 * the September 1, 2021 1:24:45 AM EET
 ************************************************************************************************/